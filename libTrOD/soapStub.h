/* soapStub.h
   Generated by gSOAP 2.8.0 from wsName.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#ifndef soapStub_H
#define soapStub_H
#define SOAP_NAMESPACE_OF_ns2	"http://api.microsofttranslator.com/V2/Imports"
#define SOAP_NAMESPACE_OF_ns3	"http://api.microsofttranslator.com/V2"
#define SOAP_NAMESPACE_OF_ns4	"http://schemas.microsoft.com/2003/10/Serialization/"
#define SOAP_NAMESPACE_OF_ns5	"http://schemas.microsoft.com/2003/10/Serialization/Arrays"
#define SOAP_NAMESPACE_OF_ns6	"http://schemas.datacontract.org/2004/07/Microsoft.MT.Web.Service.V2"
#include "stdsoap2.h"

/******************************************************************************\
 *                                                                            *
 * Enumerations                                                               *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Types with Custom Serializers                                              *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Classes and Structs                                                        *
 *                                                                            *
\******************************************************************************/


#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__anyType
#define SOAP_TYPE_xsd__anyType (7)
/* Primitive xsd:anyType schema type: */
class SOAP_CMAC xsd__anyType
{
public:
	char *__item;
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 7; } /* = unique id SOAP_TYPE_xsd__anyType */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyType(): __item(NULL), soap(NULL) { xsd__anyType::soap_default(NULL); }
	virtual ~xsd__anyType() { }
};
#endif

#if 0 /* volatile type: do not declare here, declared elsewhere */

#endif

#ifndef SOAP_TYPE_xsd__ID_
#define SOAP_TYPE_xsd__ID_ (11)
/* Primitive xsd:ID schema type: */
class SOAP_CMAC xsd__ID_ : public xsd__anyType
{
public:
	std::wstring __item;
public:
	virtual int soap_type() const { return 11; } /* = unique id SOAP_TYPE_xsd__ID_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__ID_() { xsd__ID_::soap_default(NULL); }
	virtual ~xsd__ID_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__IDREF_
#define SOAP_TYPE_xsd__IDREF_ (13)
/* Primitive xsd:IDREF schema type: */
class SOAP_CMAC xsd__IDREF_ : public xsd__anyType
{
public:
	std::wstring __item;
public:
	virtual int soap_type() const { return 13; } /* = unique id SOAP_TYPE_xsd__IDREF_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__IDREF_() { xsd__IDREF_::soap_default(NULL); }
	virtual ~xsd__IDREF_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__QName
#define SOAP_TYPE_xsd__QName (14)
/* Primitive xsd:QName schema type: */
class SOAP_CMAC xsd__QName : public xsd__anyType
{
public:
	char *__item;
public:
	virtual int soap_type() const { return 14; } /* = unique id SOAP_TYPE_xsd__QName */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__QName(): __item(NULL) { xsd__QName::soap_default(NULL); }
	virtual ~xsd__QName() { }
};
#endif

#ifndef SOAP_TYPE_xsd__anyURI_
#define SOAP_TYPE_xsd__anyURI_ (16)
/* Primitive xsd:anyURI schema type: */
class SOAP_CMAC xsd__anyURI_ : public xsd__anyType
{
public:
	std::wstring __item;
public:
	virtual int soap_type() const { return 16; } /* = unique id SOAP_TYPE_xsd__anyURI_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__anyURI_() { xsd__anyURI_::soap_default(NULL); }
	virtual ~xsd__anyURI_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__base64Binary
#define SOAP_TYPE_xsd__base64Binary (17)
/* Base64 schema type: */
class SOAP_CMAC xsd__base64Binary
{
public:
	unsigned char *__ptr;
	int __size;
	char *id;	/* optional element of type xsd:string */
	char *type;	/* optional element of type xsd:string */
	char *options;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 17; } /* = unique id SOAP_TYPE_xsd__base64Binary */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary(): __ptr(NULL), id(NULL), type(NULL), options(NULL), soap(NULL) { xsd__base64Binary::soap_default(NULL); }
	virtual ~xsd__base64Binary() { }
};
#endif

#ifndef SOAP_TYPE_xsd__base64Binary_
#define SOAP_TYPE_xsd__base64Binary_ (21)
/* Primitive xsd:base64Binary schema type: */
class SOAP_CMAC xsd__base64Binary_ : public xsd__anyType
{
public:
	xsd__base64Binary __item;
public:
	virtual int soap_type() const { return 21; } /* = unique id SOAP_TYPE_xsd__base64Binary_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__base64Binary_() { xsd__base64Binary_::soap_default(NULL); }
	virtual ~xsd__base64Binary_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__boolean
#define SOAP_TYPE_xsd__boolean (22)
/* Primitive xsd:boolean schema type: */
class SOAP_CMAC xsd__boolean : public xsd__anyType
{
public:
	bool __item;
public:
	virtual int soap_type() const { return 22; } /* = unique id SOAP_TYPE_xsd__boolean */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__boolean() { xsd__boolean::soap_default(NULL); }
	virtual ~xsd__boolean() { }
};
#endif

#ifndef SOAP_TYPE_xsd__byte_
#define SOAP_TYPE_xsd__byte_ (25)
/* Primitive xsd:byte schema type: */
class SOAP_CMAC xsd__byte_ : public xsd__anyType
{
public:
	char __item;
public:
	virtual int soap_type() const { return 25; } /* = unique id SOAP_TYPE_xsd__byte_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__byte_() { xsd__byte_::soap_default(NULL); }
	virtual ~xsd__byte_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__dateTime
#define SOAP_TYPE_xsd__dateTime (26)
/* Primitive xsd:dateTime schema type: */
class SOAP_CMAC xsd__dateTime : public xsd__anyType
{
public:
	time_t __item;
public:
	virtual int soap_type() const { return 26; } /* = unique id SOAP_TYPE_xsd__dateTime */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__dateTime() { xsd__dateTime::soap_default(NULL); }
	virtual ~xsd__dateTime() { }
};
#endif

#ifndef SOAP_TYPE_xsd__decimal_
#define SOAP_TYPE_xsd__decimal_ (29)
/* Primitive xsd:decimal schema type: */
class SOAP_CMAC xsd__decimal_ : public xsd__anyType
{
public:
	std::wstring __item;
public:
	virtual int soap_type() const { return 29; } /* = unique id SOAP_TYPE_xsd__decimal_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__decimal_() { xsd__decimal_::soap_default(NULL); }
	virtual ~xsd__decimal_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__double
#define SOAP_TYPE_xsd__double (30)
/* Primitive xsd:double schema type: */
class SOAP_CMAC xsd__double : public xsd__anyType
{
public:
	double __item;
public:
	virtual int soap_type() const { return 30; } /* = unique id SOAP_TYPE_xsd__double */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__double() { xsd__double::soap_default(NULL); }
	virtual ~xsd__double() { }
};
#endif

#ifndef SOAP_TYPE_xsd__duration_
#define SOAP_TYPE_xsd__duration_ (33)
/* Primitive xsd:duration schema type: */
class SOAP_CMAC xsd__duration_ : public xsd__anyType
{
public:
	std::wstring __item;
public:
	virtual int soap_type() const { return 33; } /* = unique id SOAP_TYPE_xsd__duration_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__duration_() { xsd__duration_::soap_default(NULL); }
	virtual ~xsd__duration_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__float
#define SOAP_TYPE_xsd__float (34)
/* Primitive xsd:float schema type: */
class SOAP_CMAC xsd__float : public xsd__anyType
{
public:
	float __item;
public:
	virtual int soap_type() const { return 34; } /* = unique id SOAP_TYPE_xsd__float */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__float() { xsd__float::soap_default(NULL); }
	virtual ~xsd__float() { }
};
#endif

#ifndef SOAP_TYPE_xsd__int
#define SOAP_TYPE_xsd__int (36)
/* Primitive xsd:int schema type: */
class SOAP_CMAC xsd__int : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 36; } /* = unique id SOAP_TYPE_xsd__int */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__int() { xsd__int::soap_default(NULL); }
	virtual ~xsd__int() { }
};
#endif

#ifndef SOAP_TYPE_xsd__long
#define SOAP_TYPE_xsd__long (37)
/* Primitive xsd:long schema type: */
class SOAP_CMAC xsd__long : public xsd__anyType
{
public:
	LONG64 __item;
public:
	virtual int soap_type() const { return 37; } /* = unique id SOAP_TYPE_xsd__long */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__long() { xsd__long::soap_default(NULL); }
	virtual ~xsd__long() { }
};
#endif

#ifndef SOAP_TYPE_xsd__short
#define SOAP_TYPE_xsd__short (39)
/* Primitive xsd:short schema type: */
class SOAP_CMAC xsd__short : public xsd__anyType
{
public:
	short __item;
public:
	virtual int soap_type() const { return 39; } /* = unique id SOAP_TYPE_xsd__short */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__short() { xsd__short::soap_default(NULL); }
	virtual ~xsd__short() { }
};
#endif

#ifndef SOAP_TYPE_xsd__string
#define SOAP_TYPE_xsd__string (41)
/* Primitive xsd:string schema type: */
class SOAP_CMAC xsd__string : public xsd__anyType
{
public:
	std::wstring __item;
public:
	virtual int soap_type() const { return 41; } /* = unique id SOAP_TYPE_xsd__string */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__string() { xsd__string::soap_default(NULL); }
	virtual ~xsd__string() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte_
#define SOAP_TYPE_xsd__unsignedByte_ (43)
/* Primitive xsd:unsignedByte schema type: */
class SOAP_CMAC xsd__unsignedByte_ : public xsd__anyType
{
public:
	unsigned char __item;
public:
	virtual int soap_type() const { return 43; } /* = unique id SOAP_TYPE_xsd__unsignedByte_ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedByte_() { xsd__unsignedByte_::soap_default(NULL); }
	virtual ~xsd__unsignedByte_() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedInt
#define SOAP_TYPE_xsd__unsignedInt (44)
/* Primitive xsd:unsignedInt schema type: */
class SOAP_CMAC xsd__unsignedInt : public xsd__anyType
{
public:
	unsigned int __item;
public:
	virtual int soap_type() const { return 44; } /* = unique id SOAP_TYPE_xsd__unsignedInt */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedInt() { xsd__unsignedInt::soap_default(NULL); }
	virtual ~xsd__unsignedInt() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedLong
#define SOAP_TYPE_xsd__unsignedLong (45)
/* Primitive xsd:unsignedLong schema type: */
class SOAP_CMAC xsd__unsignedLong : public xsd__anyType
{
public:
	ULONG64 __item;
public:
	virtual int soap_type() const { return 45; } /* = unique id SOAP_TYPE_xsd__unsignedLong */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedLong() { xsd__unsignedLong::soap_default(NULL); }
	virtual ~xsd__unsignedLong() { }
};
#endif

#ifndef SOAP_TYPE_xsd__unsignedShort
#define SOAP_TYPE_xsd__unsignedShort (47)
/* Primitive xsd:unsignedShort schema type: */
class SOAP_CMAC xsd__unsignedShort : public xsd__anyType
{
public:
	unsigned short __item;
public:
	virtual int soap_type() const { return 47; } /* = unique id SOAP_TYPE_xsd__unsignedShort */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         xsd__unsignedShort() { xsd__unsignedShort::soap_default(NULL); }
	virtual ~xsd__unsignedShort() { }
};
#endif

#ifndef SOAP_TYPE_ns4__char__
#define SOAP_TYPE_ns4__char__ (89)
/* Primitive ns4:char schema type: */
class SOAP_CMAC ns4__char__ : public xsd__anyType
{
public:
	int __item;
public:
	virtual int soap_type() const { return 89; } /* = unique id SOAP_TYPE_ns4__char__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__char__() { ns4__char__::soap_default(NULL); }
	virtual ~ns4__char__() { }
};
#endif

#ifndef SOAP_TYPE_ns4__duration__
#define SOAP_TYPE_ns4__duration__ (91)
/* Primitive ns4:duration schema type: */
class SOAP_CMAC ns4__duration__ : public xsd__anyType
{
public:
	std::wstring __item;
public:
	virtual int soap_type() const { return 91; } /* = unique id SOAP_TYPE_ns4__duration__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__duration__() { ns4__duration__::soap_default(NULL); }
	virtual ~ns4__duration__() { }
};
#endif

#ifndef SOAP_TYPE_ns4__guid__
#define SOAP_TYPE_ns4__guid__ (93)
/* Primitive ns4:guid schema type: */
class SOAP_CMAC ns4__guid__ : public xsd__anyType
{
public:
	std::wstring __item;
public:
	virtual int soap_type() const { return 93; } /* = unique id SOAP_TYPE_ns4__guid__ */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns4__guid__() { ns4__guid__::soap_default(NULL); }
	virtual ~ns4__guid__() { }
};
#endif

#ifndef SOAP_TYPE__ns3__AddTranslation
#define SOAP_TYPE__ns3__AddTranslation (49)
/* ns3:AddTranslation */
class SOAP_CMAC _ns3__AddTranslation
{
public:
	std::wstring *appId;	/* optional element of type xsd:string */
	std::wstring *originalText;	/* optional element of type xsd:string */
	std::wstring *translatedText;	/* optional element of type xsd:string */
	std::wstring *from;	/* optional element of type xsd:string */
	std::wstring *to;	/* optional element of type xsd:string */
	int *rating;	/* optional element of type xsd:int */
	std::wstring *contentType;	/* optional element of type xsd:string */
	std::wstring *category;	/* optional element of type xsd:string */
	std::wstring *user;	/* optional element of type xsd:string */
	std::wstring *uri;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 49; } /* = unique id SOAP_TYPE__ns3__AddTranslation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__AddTranslation(): appId(NULL), originalText(NULL), translatedText(NULL), from(NULL), to(NULL), rating(NULL), contentType(NULL), category(NULL), user(NULL), uri(NULL), soap(NULL) { _ns3__AddTranslation::soap_default(NULL); }
	virtual ~_ns3__AddTranslation() { }
};
#endif

#ifndef SOAP_TYPE__ns3__AddTranslationResponse
#define SOAP_TYPE__ns3__AddTranslationResponse (50)
/* ns3:AddTranslationResponse */
class SOAP_CMAC _ns3__AddTranslationResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 50; } /* = unique id SOAP_TYPE__ns3__AddTranslationResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__AddTranslationResponse(): soap(NULL) { _ns3__AddTranslationResponse::soap_default(NULL); }
	virtual ~_ns3__AddTranslationResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__BreakSentences
#define SOAP_TYPE__ns3__BreakSentences (51)
/* ns3:BreakSentences */
class SOAP_CMAC _ns3__BreakSentences
{
public:
	std::wstring *appId;	/* optional element of type xsd:string */
	std::wstring *text;	/* optional element of type xsd:string */
	std::wstring *language;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 51; } /* = unique id SOAP_TYPE__ns3__BreakSentences */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__BreakSentences(): appId(NULL), text(NULL), language(NULL), soap(NULL) { _ns3__BreakSentences::soap_default(NULL); }
	virtual ~_ns3__BreakSentences() { }
};
#endif

#ifndef SOAP_TYPE__ns3__BreakSentencesResponse
#define SOAP_TYPE__ns3__BreakSentencesResponse (52)
/* ns3:BreakSentencesResponse */
class SOAP_CMAC _ns3__BreakSentencesResponse
{
public:
	class ns5__ArrayOfint *BreakSentencesResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:ArrayOfint */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 52; } /* = unique id SOAP_TYPE__ns3__BreakSentencesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__BreakSentencesResponse(): BreakSentencesResult(NULL), soap(NULL) { _ns3__BreakSentencesResponse::soap_default(NULL); }
	virtual ~_ns3__BreakSentencesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__Detect
#define SOAP_TYPE__ns3__Detect (53)
/* ns3:Detect */
class SOAP_CMAC _ns3__Detect
{
public:
	std::wstring *appId;	/* optional element of type xsd:string */
	std::wstring *text;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 53; } /* = unique id SOAP_TYPE__ns3__Detect */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__Detect(): appId(NULL), text(NULL), soap(NULL) { _ns3__Detect::soap_default(NULL); }
	virtual ~_ns3__Detect() { }
};
#endif

#ifndef SOAP_TYPE__ns3__DetectResponse
#define SOAP_TYPE__ns3__DetectResponse (54)
/* ns3:DetectResponse */
class SOAP_CMAC _ns3__DetectResponse
{
public:
	std::wstring *DetectResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 54; } /* = unique id SOAP_TYPE__ns3__DetectResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__DetectResponse(): DetectResult(NULL), soap(NULL) { _ns3__DetectResponse::soap_default(NULL); }
	virtual ~_ns3__DetectResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__DetectArray
#define SOAP_TYPE__ns3__DetectArray (55)
/* ns3:DetectArray */
class SOAP_CMAC _ns3__DetectArray
{
public:
	std::wstring *appId;	/* optional element of type xsd:string */
	class ns5__ArrayOfstring *texts;	/* optional element of type ns5:ArrayOfstring */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 55; } /* = unique id SOAP_TYPE__ns3__DetectArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__DetectArray(): appId(NULL), texts(NULL), soap(NULL) { _ns3__DetectArray::soap_default(NULL); }
	virtual ~_ns3__DetectArray() { }
};
#endif

#ifndef SOAP_TYPE__ns3__DetectArrayResponse
#define SOAP_TYPE__ns3__DetectArrayResponse (56)
/* ns3:DetectArrayResponse */
class SOAP_CMAC _ns3__DetectArrayResponse
{
public:
	ns5__ArrayOfstring *DetectArrayResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:ArrayOfstring */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 56; } /* = unique id SOAP_TYPE__ns3__DetectArrayResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__DetectArrayResponse(): DetectArrayResult(NULL), soap(NULL) { _ns3__DetectArrayResponse::soap_default(NULL); }
	virtual ~_ns3__DetectArrayResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetAppIdToken
#define SOAP_TYPE__ns3__GetAppIdToken (57)
/* ns3:GetAppIdToken */
class SOAP_CMAC _ns3__GetAppIdToken
{
public:
	std::wstring *appId;	/* optional element of type xsd:string */
	int *minRatingRead;	/* optional element of type xsd:int */
	int *maxRatingWrite;	/* optional element of type xsd:int */
	int *expireSeconds;	/* optional element of type xsd:int */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 57; } /* = unique id SOAP_TYPE__ns3__GetAppIdToken */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetAppIdToken(): appId(NULL), minRatingRead(NULL), maxRatingWrite(NULL), expireSeconds(NULL), soap(NULL) { _ns3__GetAppIdToken::soap_default(NULL); }
	virtual ~_ns3__GetAppIdToken() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetAppIdTokenResponse
#define SOAP_TYPE__ns3__GetAppIdTokenResponse (58)
/* ns3:GetAppIdTokenResponse */
class SOAP_CMAC _ns3__GetAppIdTokenResponse
{
public:
	std::wstring *GetAppIdTokenResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 58; } /* = unique id SOAP_TYPE__ns3__GetAppIdTokenResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetAppIdTokenResponse(): GetAppIdTokenResult(NULL), soap(NULL) { _ns3__GetAppIdTokenResponse::soap_default(NULL); }
	virtual ~_ns3__GetAppIdTokenResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetLanguageNames
#define SOAP_TYPE__ns3__GetLanguageNames (59)
/* ns3:GetLanguageNames */
class SOAP_CMAC _ns3__GetLanguageNames
{
public:
	std::wstring *appId;	/* optional element of type xsd:string */
	std::wstring *locale;	/* optional element of type xsd:string */
	ns5__ArrayOfstring *languageCodes;	/* optional element of type ns5:ArrayOfstring */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 59; } /* = unique id SOAP_TYPE__ns3__GetLanguageNames */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetLanguageNames(): appId(NULL), locale(NULL), languageCodes(NULL), soap(NULL) { _ns3__GetLanguageNames::soap_default(NULL); }
	virtual ~_ns3__GetLanguageNames() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetLanguageNamesResponse
#define SOAP_TYPE__ns3__GetLanguageNamesResponse (60)
/* ns3:GetLanguageNamesResponse */
class SOAP_CMAC _ns3__GetLanguageNamesResponse
{
public:
	ns5__ArrayOfstring *GetLanguageNamesResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:ArrayOfstring */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 60; } /* = unique id SOAP_TYPE__ns3__GetLanguageNamesResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetLanguageNamesResponse(): GetLanguageNamesResult(NULL), soap(NULL) { _ns3__GetLanguageNamesResponse::soap_default(NULL); }
	virtual ~_ns3__GetLanguageNamesResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetLanguagesForSpeak
#define SOAP_TYPE__ns3__GetLanguagesForSpeak (61)
/* ns3:GetLanguagesForSpeak */
class SOAP_CMAC _ns3__GetLanguagesForSpeak
{
public:
	std::wstring *appId;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 61; } /* = unique id SOAP_TYPE__ns3__GetLanguagesForSpeak */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetLanguagesForSpeak(): appId(NULL), soap(NULL) { _ns3__GetLanguagesForSpeak::soap_default(NULL); }
	virtual ~_ns3__GetLanguagesForSpeak() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetLanguagesForSpeakResponse
#define SOAP_TYPE__ns3__GetLanguagesForSpeakResponse (62)
/* ns3:GetLanguagesForSpeakResponse */
class SOAP_CMAC _ns3__GetLanguagesForSpeakResponse
{
public:
	ns5__ArrayOfstring *GetLanguagesForSpeakResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:ArrayOfstring */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 62; } /* = unique id SOAP_TYPE__ns3__GetLanguagesForSpeakResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetLanguagesForSpeakResponse(): GetLanguagesForSpeakResult(NULL), soap(NULL) { _ns3__GetLanguagesForSpeakResponse::soap_default(NULL); }
	virtual ~_ns3__GetLanguagesForSpeakResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetLanguagesForTranslate
#define SOAP_TYPE__ns3__GetLanguagesForTranslate (63)
/* ns3:GetLanguagesForTranslate */
class SOAP_CMAC _ns3__GetLanguagesForTranslate
{
public:
	std::wstring *appId;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 63; } /* = unique id SOAP_TYPE__ns3__GetLanguagesForTranslate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetLanguagesForTranslate(): appId(NULL), soap(NULL) { _ns3__GetLanguagesForTranslate::soap_default(NULL); }
	virtual ~_ns3__GetLanguagesForTranslate() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetLanguagesForTranslateResponse
#define SOAP_TYPE__ns3__GetLanguagesForTranslateResponse (64)
/* ns3:GetLanguagesForTranslateResponse */
class SOAP_CMAC _ns3__GetLanguagesForTranslateResponse
{
public:
	ns5__ArrayOfstring *GetLanguagesForTranslateResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns5:ArrayOfstring */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 64; } /* = unique id SOAP_TYPE__ns3__GetLanguagesForTranslateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetLanguagesForTranslateResponse(): GetLanguagesForTranslateResult(NULL), soap(NULL) { _ns3__GetLanguagesForTranslateResponse::soap_default(NULL); }
	virtual ~_ns3__GetLanguagesForTranslateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetTranslations
#define SOAP_TYPE__ns3__GetTranslations (65)
/* ns3:GetTranslations */
class SOAP_CMAC _ns3__GetTranslations
{
public:
	std::wstring *appId;	/* optional element of type xsd:string */
	std::wstring *text;	/* optional element of type xsd:string */
	std::wstring *from;	/* optional element of type xsd:string */
	std::wstring *to;	/* optional element of type xsd:string */
	int *maxTranslations;	/* optional element of type xsd:int */
	class ns6__TranslateOptions *options;	/* optional element of type ns6:TranslateOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 65; } /* = unique id SOAP_TYPE__ns3__GetTranslations */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetTranslations(): appId(NULL), text(NULL), from(NULL), to(NULL), maxTranslations(NULL), options(NULL), soap(NULL) { _ns3__GetTranslations::soap_default(NULL); }
	virtual ~_ns3__GetTranslations() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetTranslationsResponse
#define SOAP_TYPE__ns3__GetTranslationsResponse (66)
/* ns3:GetTranslationsResponse */
class SOAP_CMAC _ns3__GetTranslationsResponse
{
public:
	class ns6__GetTranslationsResponse *GetTranslationsResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns6:GetTranslationsResponse */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 66; } /* = unique id SOAP_TYPE__ns3__GetTranslationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetTranslationsResponse(): GetTranslationsResult(NULL), soap(NULL) { _ns3__GetTranslationsResponse::soap_default(NULL); }
	virtual ~_ns3__GetTranslationsResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__Translate
#define SOAP_TYPE__ns3__Translate (67)
/* ns3:Translate */
class SOAP_CMAC _ns3__Translate
{
public:
	std::wstring *appId;	/* optional element of type xsd:string */
	std::wstring *text;	/* optional element of type xsd:string */
	std::wstring *from;	/* optional element of type xsd:string */
	std::wstring *to;	/* optional element of type xsd:string */
	std::wstring *contentType;	/* optional element of type xsd:string */
	std::wstring *category;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 67; } /* = unique id SOAP_TYPE__ns3__Translate */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__Translate(): appId(NULL), text(NULL), from(NULL), to(NULL), contentType(NULL), category(NULL), soap(NULL) { _ns3__Translate::soap_default(NULL); }
	virtual ~_ns3__Translate() { }
};
#endif

#ifndef SOAP_TYPE__ns3__TranslateResponse
#define SOAP_TYPE__ns3__TranslateResponse (68)
/* ns3:TranslateResponse */
class SOAP_CMAC _ns3__TranslateResponse
{
public:
	std::wstring *TranslateResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 68; } /* = unique id SOAP_TYPE__ns3__TranslateResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__TranslateResponse(): TranslateResult(NULL), soap(NULL) { _ns3__TranslateResponse::soap_default(NULL); }
	virtual ~_ns3__TranslateResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__AddTranslationArray
#define SOAP_TYPE__ns3__AddTranslationArray (69)
/* ns3:AddTranslationArray */
class SOAP_CMAC _ns3__AddTranslationArray
{
public:
	std::wstring *appId;	/* optional element of type xsd:string */
	class ns6__ArrayOfTranslation *translations;	/* optional element of type ns6:ArrayOfTranslation */
	std::wstring *from;	/* optional element of type xsd:string */
	std::wstring *to;	/* optional element of type xsd:string */
	ns6__TranslateOptions *options;	/* optional element of type ns6:TranslateOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 69; } /* = unique id SOAP_TYPE__ns3__AddTranslationArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__AddTranslationArray(): appId(NULL), translations(NULL), from(NULL), to(NULL), options(NULL), soap(NULL) { _ns3__AddTranslationArray::soap_default(NULL); }
	virtual ~_ns3__AddTranslationArray() { }
};
#endif

#ifndef SOAP_TYPE__ns3__AddTranslationArrayResponse
#define SOAP_TYPE__ns3__AddTranslationArrayResponse (70)
/* ns3:AddTranslationArrayResponse */
class SOAP_CMAC _ns3__AddTranslationArrayResponse
{
public:
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 70; } /* = unique id SOAP_TYPE__ns3__AddTranslationArrayResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__AddTranslationArrayResponse(): soap(NULL) { _ns3__AddTranslationArrayResponse::soap_default(NULL); }
	virtual ~_ns3__AddTranslationArrayResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetTranslationsArray
#define SOAP_TYPE__ns3__GetTranslationsArray (71)
/* ns3:GetTranslationsArray */
class SOAP_CMAC _ns3__GetTranslationsArray
{
public:
	std::wstring *appId;	/* optional element of type xsd:string */
	ns5__ArrayOfstring *texts;	/* optional element of type ns5:ArrayOfstring */
	std::wstring *from;	/* optional element of type xsd:string */
	std::wstring *to;	/* optional element of type xsd:string */
	int *maxTranslations;	/* optional element of type xsd:int */
	ns6__TranslateOptions *options;	/* optional element of type ns6:TranslateOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 71; } /* = unique id SOAP_TYPE__ns3__GetTranslationsArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetTranslationsArray(): appId(NULL), texts(NULL), from(NULL), to(NULL), maxTranslations(NULL), options(NULL), soap(NULL) { _ns3__GetTranslationsArray::soap_default(NULL); }
	virtual ~_ns3__GetTranslationsArray() { }
};
#endif

#ifndef SOAP_TYPE__ns3__GetTranslationsArrayResponse
#define SOAP_TYPE__ns3__GetTranslationsArrayResponse (72)
/* ns3:GetTranslationsArrayResponse */
class SOAP_CMAC _ns3__GetTranslationsArrayResponse
{
public:
	class ns6__ArrayOfGetTranslationsResponse *GetTranslationsArrayResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns6:ArrayOfGetTranslationsResponse */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 72; } /* = unique id SOAP_TYPE__ns3__GetTranslationsArrayResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__GetTranslationsArrayResponse(): GetTranslationsArrayResult(NULL), soap(NULL) { _ns3__GetTranslationsArrayResponse::soap_default(NULL); }
	virtual ~_ns3__GetTranslationsArrayResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__Speak
#define SOAP_TYPE__ns3__Speak (73)
/* ns3:Speak */
class SOAP_CMAC _ns3__Speak
{
public:
	std::wstring *appId;	/* optional element of type xsd:string */
	std::wstring *text;	/* optional element of type xsd:string */
	std::wstring *language;	/* optional element of type xsd:string */
	std::wstring *format;	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 73; } /* = unique id SOAP_TYPE__ns3__Speak */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__Speak(): appId(NULL), text(NULL), language(NULL), format(NULL), soap(NULL) { _ns3__Speak::soap_default(NULL); }
	virtual ~_ns3__Speak() { }
};
#endif

#ifndef SOAP_TYPE__ns3__SpeakResponse
#define SOAP_TYPE__ns3__SpeakResponse (74)
/* ns3:SpeakResponse */
class SOAP_CMAC _ns3__SpeakResponse
{
public:
	std::wstring *SpeakResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type xsd:string */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 74; } /* = unique id SOAP_TYPE__ns3__SpeakResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__SpeakResponse(): SpeakResult(NULL), soap(NULL) { _ns3__SpeakResponse::soap_default(NULL); }
	virtual ~_ns3__SpeakResponse() { }
};
#endif

#ifndef SOAP_TYPE__ns3__TranslateArray
#define SOAP_TYPE__ns3__TranslateArray (75)
/* ns3:TranslateArray */
class SOAP_CMAC _ns3__TranslateArray
{
public:
	std::wstring *appId;	/* optional element of type xsd:string */
	ns5__ArrayOfstring *texts;	/* optional element of type ns5:ArrayOfstring */
	std::wstring *from;	/* optional element of type xsd:string */
	std::wstring *to;	/* optional element of type xsd:string */
	ns6__TranslateOptions *options;	/* optional element of type ns6:TranslateOptions */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 75; } /* = unique id SOAP_TYPE__ns3__TranslateArray */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__TranslateArray(): appId(NULL), texts(NULL), from(NULL), to(NULL), options(NULL), soap(NULL) { _ns3__TranslateArray::soap_default(NULL); }
	virtual ~_ns3__TranslateArray() { }
};
#endif

#ifndef SOAP_TYPE__ns3__TranslateArrayResponse
#define SOAP_TYPE__ns3__TranslateArrayResponse (76)
/* ns3:TranslateArrayResponse */
class SOAP_CMAC _ns3__TranslateArrayResponse
{
public:
	class ns6__ArrayOfTranslateArrayResponse *TranslateArrayResult;	/* SOAP 1.2 RPC return element (when namespace qualified) */	/* optional element of type ns6:ArrayOfTranslateArrayResponse */
	struct soap *soap;	/* transient */
public:
	virtual int soap_type() const { return 76; } /* = unique id SOAP_TYPE__ns3__TranslateArrayResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         _ns3__TranslateArrayResponse(): TranslateArrayResult(NULL), soap(NULL) { _ns3__TranslateArrayResponse::soap_default(NULL); }
	virtual ~_ns3__TranslateArrayResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns5__ArrayOfint
#define SOAP_TYPE_ns5__ArrayOfint (77)
/* ns5:ArrayOfint */
class SOAP_CMAC ns5__ArrayOfint : public xsd__anyType
{
public:
	int __sizeint_;	/* sequence of elements <int> */
	int *int_;	/* optional element of type xsd:int */
public:
	virtual int soap_type() const { return 77; } /* = unique id SOAP_TYPE_ns5__ArrayOfint */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__ArrayOfint(): int_(NULL) { ns5__ArrayOfint::soap_default(NULL); }
	virtual ~ns5__ArrayOfint() { }
};
#endif

#ifndef SOAP_TYPE_ns5__ArrayOfstring
#define SOAP_TYPE_ns5__ArrayOfstring (78)
/* ns5:ArrayOfstring */
class SOAP_CMAC ns5__ArrayOfstring : public xsd__anyType
{
public:
	int __sizestring;	/* sequence of elements <string> */
	std::wstring *string;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 78; } /* = unique id SOAP_TYPE_ns5__ArrayOfstring */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns5__ArrayOfstring(): string(NULL) { ns5__ArrayOfstring::soap_default(NULL); }
	virtual ~ns5__ArrayOfstring() { }
};
#endif

#ifndef SOAP_TYPE_ns6__TranslateOptions
#define SOAP_TYPE_ns6__TranslateOptions (79)
/* ns6:TranslateOptions */
class SOAP_CMAC ns6__TranslateOptions : public xsd__anyType
{
public:
	std::wstring *Category;	/* optional element of type xsd:string */
	std::wstring *ContentType;	/* optional element of type xsd:string */
	std::wstring *ReservedFlags;	/* optional element of type xsd:string */
	std::wstring *State;	/* optional element of type xsd:string */
	std::wstring *Uri;	/* optional element of type xsd:string */
	std::wstring *User;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 79; } /* = unique id SOAP_TYPE_ns6__TranslateOptions */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__TranslateOptions(): Category(NULL), ContentType(NULL), ReservedFlags(NULL), State(NULL), Uri(NULL), User(NULL) { ns6__TranslateOptions::soap_default(NULL); }
	virtual ~ns6__TranslateOptions() { }
};
#endif

#ifndef SOAP_TYPE_ns6__GetTranslationsResponse
#define SOAP_TYPE_ns6__GetTranslationsResponse (80)
/* ns6:GetTranslationsResponse */
class SOAP_CMAC ns6__GetTranslationsResponse : public xsd__anyType
{
public:
	std::wstring *From;	/* optional element of type xsd:string */
	std::wstring *State;	/* optional element of type xsd:string */
	class ns6__ArrayOfTranslationMatch *Translations;	/* optional element of type ns6:ArrayOfTranslationMatch */
public:
	virtual int soap_type() const { return 80; } /* = unique id SOAP_TYPE_ns6__GetTranslationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__GetTranslationsResponse(): From(NULL), State(NULL), Translations(NULL) { ns6__GetTranslationsResponse::soap_default(NULL); }
	virtual ~ns6__GetTranslationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns6__ArrayOfTranslationMatch
#define SOAP_TYPE_ns6__ArrayOfTranslationMatch (81)
/* ns6:ArrayOfTranslationMatch */
class SOAP_CMAC ns6__ArrayOfTranslationMatch : public xsd__anyType
{
public:
	int __sizeTranslationMatch;	/* sequence of elements <TranslationMatch> */
	class ns6__TranslationMatch **TranslationMatch;	/* optional element of type ns6:TranslationMatch */
public:
	virtual int soap_type() const { return 81; } /* = unique id SOAP_TYPE_ns6__ArrayOfTranslationMatch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__ArrayOfTranslationMatch(): TranslationMatch(NULL) { ns6__ArrayOfTranslationMatch::soap_default(NULL); }
	virtual ~ns6__ArrayOfTranslationMatch() { }
};
#endif

#ifndef SOAP_TYPE_ns6__TranslationMatch
#define SOAP_TYPE_ns6__TranslationMatch (82)
/* ns6:TranslationMatch */
class SOAP_CMAC ns6__TranslationMatch : public xsd__anyType
{
public:
	int Count;	/* required element of type xsd:int */
	std::wstring *Error;	/* optional element of type xsd:string */
	int MatchDegree;	/* required element of type xsd:int */
	std::wstring *MatchedOriginalText;	/* optional element of type xsd:string */
	int Rating;	/* required element of type xsd:int */
	std::wstring *TranslatedText;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 82; } /* = unique id SOAP_TYPE_ns6__TranslationMatch */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__TranslationMatch(): Error(NULL), MatchedOriginalText(NULL), TranslatedText(NULL) { ns6__TranslationMatch::soap_default(NULL); }
	virtual ~ns6__TranslationMatch() { }
};
#endif

#ifndef SOAP_TYPE_ns6__ArrayOfTranslation
#define SOAP_TYPE_ns6__ArrayOfTranslation (83)
/* ns6:ArrayOfTranslation */
class SOAP_CMAC ns6__ArrayOfTranslation : public xsd__anyType
{
public:
	int __sizeTranslation;	/* sequence of elements <Translation> */
	class ns6__Translation **Translation;	/* optional element of type ns6:Translation */
public:
	virtual int soap_type() const { return 83; } /* = unique id SOAP_TYPE_ns6__ArrayOfTranslation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__ArrayOfTranslation(): Translation(NULL) { ns6__ArrayOfTranslation::soap_default(NULL); }
	virtual ~ns6__ArrayOfTranslation() { }
};
#endif

#ifndef SOAP_TYPE_ns6__Translation
#define SOAP_TYPE_ns6__Translation (84)
/* ns6:Translation */
class SOAP_CMAC ns6__Translation : public xsd__anyType
{
public:
	std::wstring *OriginalText;	/* optional element of type xsd:string */
	int *Rating;	/* optional element of type xsd:int */
	int *Sequence;	/* optional element of type xsd:int */
	std::wstring *TranslatedText;	/* optional element of type xsd:string */
public:
	virtual int soap_type() const { return 84; } /* = unique id SOAP_TYPE_ns6__Translation */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__Translation(): OriginalText(NULL), Rating(NULL), Sequence(NULL), TranslatedText(NULL) { ns6__Translation::soap_default(NULL); }
	virtual ~ns6__Translation() { }
};
#endif

#ifndef SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse
#define SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse (85)
/* ns6:ArrayOfGetTranslationsResponse */
class SOAP_CMAC ns6__ArrayOfGetTranslationsResponse : public xsd__anyType
{
public:
	int __sizeGetTranslationsResponse;	/* sequence of elements <GetTranslationsResponse> */
	ns6__GetTranslationsResponse **GetTranslationsResponse;	/* optional element of type ns6:GetTranslationsResponse */
public:
	virtual int soap_type() const { return 85; } /* = unique id SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__ArrayOfGetTranslationsResponse(): GetTranslationsResponse(NULL) { ns6__ArrayOfGetTranslationsResponse::soap_default(NULL); }
	virtual ~ns6__ArrayOfGetTranslationsResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse
#define SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse (86)
/* ns6:ArrayOfTranslateArrayResponse */
class SOAP_CMAC ns6__ArrayOfTranslateArrayResponse : public xsd__anyType
{
public:
	int __sizeTranslateArrayResponse;	/* sequence of elements <TranslateArrayResponse> */
	class ns6__TranslateArrayResponse **TranslateArrayResponse;	/* optional element of type ns6:TranslateArrayResponse */
public:
	virtual int soap_type() const { return 86; } /* = unique id SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__ArrayOfTranslateArrayResponse(): TranslateArrayResponse(NULL) { ns6__ArrayOfTranslateArrayResponse::soap_default(NULL); }
	virtual ~ns6__ArrayOfTranslateArrayResponse() { }
};
#endif

#ifndef SOAP_TYPE_ns6__TranslateArrayResponse
#define SOAP_TYPE_ns6__TranslateArrayResponse (87)
/* ns6:TranslateArrayResponse */
class SOAP_CMAC ns6__TranslateArrayResponse : public xsd__anyType
{
public:
	std::wstring *Error;	/* optional element of type xsd:string */
	std::wstring *From;	/* optional element of type xsd:string */
	ns5__ArrayOfint *OriginalTextSentenceLengths;	/* optional element of type ns5:ArrayOfint */
	std::wstring *State;	/* optional element of type xsd:string */
	std::wstring *TranslatedText;	/* optional element of type xsd:string */
	ns5__ArrayOfint *TranslatedTextSentenceLengths;	/* optional element of type ns5:ArrayOfint */
public:
	virtual int soap_type() const { return 87; } /* = unique id SOAP_TYPE_ns6__TranslateArrayResponse */
	virtual void soap_default(struct soap*);
	virtual void soap_serialize(struct soap*) const;
	virtual int soap_put(struct soap*, const char*, const char*) const;
	virtual int soap_out(struct soap*, const char*, int, const char*) const;
	virtual void *soap_get(struct soap*, const char*, const char*);
	virtual void *soap_in(struct soap*, const char*, const char*);
	         ns6__TranslateArrayResponse(): Error(NULL), From(NULL), OriginalTextSentenceLengths(NULL), State(NULL), TranslatedText(NULL), TranslatedTextSentenceLengths(NULL) { ns6__TranslateArrayResponse::soap_default(NULL); }
	virtual ~ns6__TranslateArrayResponse() { }
};
#endif

#ifndef SOAP_TYPE___ns1__AddTranslation
#define SOAP_TYPE___ns1__AddTranslation (114)
/* Operation wrapper: */
struct __ns1__AddTranslation
{
public:
	_ns3__AddTranslation *ns3__AddTranslation;	/* optional element of type ns3:AddTranslation */
};
#endif

#ifndef SOAP_TYPE___ns1__BreakSentences
#define SOAP_TYPE___ns1__BreakSentences (118)
/* Operation wrapper: */
struct __ns1__BreakSentences
{
public:
	_ns3__BreakSentences *ns3__BreakSentences;	/* optional element of type ns3:BreakSentences */
};
#endif

#ifndef SOAP_TYPE___ns1__Detect
#define SOAP_TYPE___ns1__Detect (122)
/* Operation wrapper: */
struct __ns1__Detect
{
public:
	_ns3__Detect *ns3__Detect;	/* optional element of type ns3:Detect */
};
#endif

#ifndef SOAP_TYPE___ns1__DetectArray
#define SOAP_TYPE___ns1__DetectArray (126)
/* Operation wrapper: */
struct __ns1__DetectArray
{
public:
	_ns3__DetectArray *ns3__DetectArray;	/* optional element of type ns3:DetectArray */
};
#endif

#ifndef SOAP_TYPE___ns1__GetAppIdToken
#define SOAP_TYPE___ns1__GetAppIdToken (130)
/* Operation wrapper: */
struct __ns1__GetAppIdToken
{
public:
	_ns3__GetAppIdToken *ns3__GetAppIdToken;	/* optional element of type ns3:GetAppIdToken */
};
#endif

#ifndef SOAP_TYPE___ns1__GetLanguageNames
#define SOAP_TYPE___ns1__GetLanguageNames (134)
/* Operation wrapper: */
struct __ns1__GetLanguageNames
{
public:
	_ns3__GetLanguageNames *ns3__GetLanguageNames;	/* optional element of type ns3:GetLanguageNames */
};
#endif

#ifndef SOAP_TYPE___ns1__GetLanguagesForSpeak
#define SOAP_TYPE___ns1__GetLanguagesForSpeak (138)
/* Operation wrapper: */
struct __ns1__GetLanguagesForSpeak
{
public:
	_ns3__GetLanguagesForSpeak *ns3__GetLanguagesForSpeak;	/* optional element of type ns3:GetLanguagesForSpeak */
};
#endif

#ifndef SOAP_TYPE___ns1__GetLanguagesForTranslate
#define SOAP_TYPE___ns1__GetLanguagesForTranslate (142)
/* Operation wrapper: */
struct __ns1__GetLanguagesForTranslate
{
public:
	_ns3__GetLanguagesForTranslate *ns3__GetLanguagesForTranslate;	/* optional element of type ns3:GetLanguagesForTranslate */
};
#endif

#ifndef SOAP_TYPE___ns1__GetTranslations
#define SOAP_TYPE___ns1__GetTranslations (146)
/* Operation wrapper: */
struct __ns1__GetTranslations
{
public:
	_ns3__GetTranslations *ns3__GetTranslations;	/* optional element of type ns3:GetTranslations */
};
#endif

#ifndef SOAP_TYPE___ns1__Translate
#define SOAP_TYPE___ns1__Translate (150)
/* Operation wrapper: */
struct __ns1__Translate
{
public:
	_ns3__Translate *ns3__Translate;	/* optional element of type ns3:Translate */
};
#endif

#ifndef SOAP_TYPE___ns1__AddTranslationArray
#define SOAP_TYPE___ns1__AddTranslationArray (154)
/* Operation wrapper: */
struct __ns1__AddTranslationArray
{
public:
	_ns3__AddTranslationArray *ns3__AddTranslationArray;	/* optional element of type ns3:AddTranslationArray */
};
#endif

#ifndef SOAP_TYPE___ns1__GetTranslationsArray
#define SOAP_TYPE___ns1__GetTranslationsArray (158)
/* Operation wrapper: */
struct __ns1__GetTranslationsArray
{
public:
	_ns3__GetTranslationsArray *ns3__GetTranslationsArray;	/* optional element of type ns3:GetTranslationsArray */
};
#endif

#ifndef SOAP_TYPE___ns1__Speak
#define SOAP_TYPE___ns1__Speak (162)
/* Operation wrapper: */
struct __ns1__Speak
{
public:
	_ns3__Speak *ns3__Speak;	/* optional element of type ns3:Speak */
};
#endif

#ifndef SOAP_TYPE___ns1__TranslateArray
#define SOAP_TYPE___ns1__TranslateArray (166)
/* Operation wrapper: */
struct __ns1__TranslateArray
{
public:
	_ns3__TranslateArray *ns3__TranslateArray;	/* optional element of type ns3:TranslateArray */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Header
#define SOAP_TYPE_SOAP_ENV__Header (167)
/* SOAP Header: */
struct SOAP_ENV__Header
{
#ifdef WITH_NOEMPTYSTRUCT
private:
	char dummy;	/* dummy member to enable compilation */
#endif
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Code
#define SOAP_TYPE_SOAP_ENV__Code (168)
/* SOAP Fault Code: */
struct SOAP_ENV__Code
{
public:
	char *SOAP_ENV__Value;	/* optional element of type xsd:QName */
	struct SOAP_ENV__Code *SOAP_ENV__Subcode;	/* optional element of type SOAP-ENV:Code */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Detail
#define SOAP_TYPE_SOAP_ENV__Detail (170)
/* SOAP-ENV:Detail */
struct SOAP_ENV__Detail
{
public:
	int __type;	/* any type of element <fault> (defined below) */
	void *fault;	/* transient */
	char *__any;
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Reason
#define SOAP_TYPE_SOAP_ENV__Reason (173)
/* SOAP-ENV:Reason */
struct SOAP_ENV__Reason
{
public:
	char *SOAP_ENV__Text;	/* optional element of type xsd:string */
};
#endif

#ifndef SOAP_TYPE_SOAP_ENV__Fault
#define SOAP_TYPE_SOAP_ENV__Fault (174)
/* SOAP Fault: */
struct SOAP_ENV__Fault
{
public:
	char *faultcode;	/* optional element of type xsd:QName */
	char *faultstring;	/* optional element of type xsd:string */
	char *faultactor;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *detail;	/* optional element of type SOAP-ENV:Detail */
	struct SOAP_ENV__Code *SOAP_ENV__Code;	/* optional element of type SOAP-ENV:Code */
	struct SOAP_ENV__Reason *SOAP_ENV__Reason;	/* optional element of type SOAP-ENV:Reason */
	char *SOAP_ENV__Node;	/* optional element of type xsd:string */
	char *SOAP_ENV__Role;	/* optional element of type xsd:string */
	struct SOAP_ENV__Detail *SOAP_ENV__Detail;	/* optional element of type SOAP-ENV:Detail */
};
#endif

/******************************************************************************\
 *                                                                            *
 * Typedefs                                                                   *
 *                                                                            *
\******************************************************************************/

#ifndef SOAP_TYPE__QName
#define SOAP_TYPE__QName (5)
typedef char *_QName;
#endif

#ifndef SOAP_TYPE__XML
#define SOAP_TYPE__XML (6)
typedef char *_XML;
#endif

#ifndef SOAP_TYPE_xsd__ID
#define SOAP_TYPE_xsd__ID (10)
typedef std::wstring xsd__ID;
#endif

#ifndef SOAP_TYPE_xsd__IDREF
#define SOAP_TYPE_xsd__IDREF (12)
typedef std::wstring xsd__IDREF;
#endif

#ifndef SOAP_TYPE_xsd__anyURI
#define SOAP_TYPE_xsd__anyURI (15)
typedef std::wstring xsd__anyURI;
#endif

#ifndef SOAP_TYPE_xsd__byte
#define SOAP_TYPE_xsd__byte (24)
typedef char xsd__byte;
#endif

#ifndef SOAP_TYPE_xsd__decimal
#define SOAP_TYPE_xsd__decimal (28)
typedef std::wstring xsd__decimal;
#endif

#ifndef SOAP_TYPE_xsd__duration
#define SOAP_TYPE_xsd__duration (32)
typedef std::wstring xsd__duration;
#endif

#ifndef SOAP_TYPE_xsd__unsignedByte
#define SOAP_TYPE_xsd__unsignedByte (42)
typedef unsigned char xsd__unsignedByte;
#endif

#ifndef SOAP_TYPE_ns4__char
#define SOAP_TYPE_ns4__char (88)
typedef int ns4__char;
#endif

#ifndef SOAP_TYPE_ns4__duration
#define SOAP_TYPE_ns4__duration (90)
typedef std::wstring ns4__duration;
#endif

#ifndef SOAP_TYPE_ns4__guid
#define SOAP_TYPE_ns4__guid (92)
typedef std::wstring ns4__guid;
#endif


/******************************************************************************\
 *                                                                            *
 * Externals                                                                  *
 *                                                                            *
\******************************************************************************/


/******************************************************************************\
 *                                                                            *
 * Server-Side Operations                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 __ns1__AddTranslation(struct soap*, _ns3__AddTranslation *ns3__AddTranslation, _ns3__AddTranslationResponse *ns3__AddTranslationResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__BreakSentences(struct soap*, _ns3__BreakSentences *ns3__BreakSentences, _ns3__BreakSentencesResponse *ns3__BreakSentencesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__Detect(struct soap*, _ns3__Detect *ns3__Detect, _ns3__DetectResponse *ns3__DetectResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__DetectArray(struct soap*, _ns3__DetectArray *ns3__DetectArray, _ns3__DetectArrayResponse *ns3__DetectArrayResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetAppIdToken(struct soap*, _ns3__GetAppIdToken *ns3__GetAppIdToken, _ns3__GetAppIdTokenResponse *ns3__GetAppIdTokenResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetLanguageNames(struct soap*, _ns3__GetLanguageNames *ns3__GetLanguageNames, _ns3__GetLanguageNamesResponse *ns3__GetLanguageNamesResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetLanguagesForSpeak(struct soap*, _ns3__GetLanguagesForSpeak *ns3__GetLanguagesForSpeak, _ns3__GetLanguagesForSpeakResponse *ns3__GetLanguagesForSpeakResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetLanguagesForTranslate(struct soap*, _ns3__GetLanguagesForTranslate *ns3__GetLanguagesForTranslate, _ns3__GetLanguagesForTranslateResponse *ns3__GetLanguagesForTranslateResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetTranslations(struct soap*, _ns3__GetTranslations *ns3__GetTranslations, _ns3__GetTranslationsResponse *ns3__GetTranslationsResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__Translate(struct soap*, _ns3__Translate *ns3__Translate, _ns3__TranslateResponse *ns3__TranslateResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__AddTranslationArray(struct soap*, _ns3__AddTranslationArray *ns3__AddTranslationArray, _ns3__AddTranslationArrayResponse *ns3__AddTranslationArrayResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__GetTranslationsArray(struct soap*, _ns3__GetTranslationsArray *ns3__GetTranslationsArray, _ns3__GetTranslationsArrayResponse *ns3__GetTranslationsArrayResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__Speak(struct soap*, _ns3__Speak *ns3__Speak, _ns3__SpeakResponse *ns3__SpeakResponse);

SOAP_FMAC5 int SOAP_FMAC6 __ns1__TranslateArray(struct soap*, _ns3__TranslateArray *ns3__TranslateArray, _ns3__TranslateArrayResponse *ns3__TranslateArrayResponse);

/******************************************************************************\
 *                                                                            *
 * Server-Side Skeletons to Invoke Service Operations                         *
 *                                                                            *
\******************************************************************************/

SOAP_FMAC5 int SOAP_FMAC6 soap_serve(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve_request(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AddTranslation(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__BreakSentences(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__Detect(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__DetectArray(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetAppIdToken(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetLanguageNames(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetLanguagesForSpeak(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetLanguagesForTranslate(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetTranslations(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__Translate(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__AddTranslationArray(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__GetTranslationsArray(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__Speak(struct soap*);

SOAP_FMAC5 int SOAP_FMAC6 soap_serve___ns1__TranslateArray(struct soap*);

/******************************************************************************\
 *                                                                            *
 * Client-Side Call Stubs                                                     *
 *                                                                            *
\******************************************************************************/


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddTranslation(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__AddTranslation *ns3__AddTranslation, _ns3__AddTranslationResponse *ns3__AddTranslationResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__BreakSentences(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__BreakSentences *ns3__BreakSentences, _ns3__BreakSentencesResponse *ns3__BreakSentencesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Detect(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__Detect *ns3__Detect, _ns3__DetectResponse *ns3__DetectResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DetectArray(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__DetectArray *ns3__DetectArray, _ns3__DetectArrayResponse *ns3__DetectArrayResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetAppIdToken(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetAppIdToken *ns3__GetAppIdToken, _ns3__GetAppIdTokenResponse *ns3__GetAppIdTokenResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetLanguageNames(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetLanguageNames *ns3__GetLanguageNames, _ns3__GetLanguageNamesResponse *ns3__GetLanguageNamesResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetLanguagesForSpeak(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetLanguagesForSpeak *ns3__GetLanguagesForSpeak, _ns3__GetLanguagesForSpeakResponse *ns3__GetLanguagesForSpeakResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetLanguagesForTranslate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetLanguagesForTranslate *ns3__GetLanguagesForTranslate, _ns3__GetLanguagesForTranslateResponse *ns3__GetLanguagesForTranslateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetTranslations(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetTranslations *ns3__GetTranslations, _ns3__GetTranslationsResponse *ns3__GetTranslationsResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Translate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__Translate *ns3__Translate, _ns3__TranslateResponse *ns3__TranslateResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddTranslationArray(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__AddTranslationArray *ns3__AddTranslationArray, _ns3__AddTranslationArrayResponse *ns3__AddTranslationArrayResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetTranslationsArray(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetTranslationsArray *ns3__GetTranslationsArray, _ns3__GetTranslationsArrayResponse *ns3__GetTranslationsArrayResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Speak(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__Speak *ns3__Speak, _ns3__SpeakResponse *ns3__SpeakResponse);

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__TranslateArray(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__TranslateArray *ns3__TranslateArray, _ns3__TranslateArrayResponse *ns3__TranslateArrayResponse);

#endif

/* End of soapStub.h */
