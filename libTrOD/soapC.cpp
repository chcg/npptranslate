/* soapC.cpp
   Generated by gSOAP 2.8.0 from wsName.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif

#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapC.cpp ver 2.8.0 2011-03-17 08:46:25 GMT")


#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serializeheader(struct soap *soap)
{
	if (soap->header)
		soap_serialize_SOAP_ENV__Header(soap, soap->header);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putheader(struct soap *soap)
{
	if (soap->header)
	{	soap->part = SOAP_IN_HEADER;
		if (soap_out_SOAP_ENV__Header(soap, "SOAP-ENV:Header", 0, soap->header, NULL))
			return soap->error;
		soap->part = SOAP_END_HEADER;
	}
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getheader(struct soap *soap)
{
	soap->part = SOAP_IN_HEADER;
	soap->header = soap_in_SOAP_ENV__Header(soap, "SOAP-ENV:Header", NULL, NULL);
	soap->part = SOAP_END_HEADER;
	return soap->header == NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_header(struct soap *soap)
{
	if (!soap->header)
	{	if ((soap->header = soap_new_SOAP_ENV__Header(soap, -1)))
			soap_default_SOAP_ENV__Header(soap, soap->header);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_fault(struct soap *soap)
{
	if (!soap->fault)
	{	soap->fault = soap_new_SOAP_ENV__Fault(soap, -1);
		if (!soap->fault)
			return;
		soap_default_SOAP_ENV__Fault(soap, soap->fault);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Code)
	{	soap->fault->SOAP_ENV__Code = soap_new_SOAP_ENV__Code(soap, -1);
		soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code);
	}
	if (soap->version == 2 && !soap->fault->SOAP_ENV__Reason)
	{	soap->fault->SOAP_ENV__Reason = soap_new_SOAP_ENV__Reason(soap, -1);
		soap_default_SOAP_ENV__Reason(soap, soap->fault->SOAP_ENV__Reason);
	}
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serializefault(struct soap *soap)
{
	soap_fault(soap);
	if (soap->fault)
		soap_serialize_SOAP_ENV__Fault(soap, soap->fault);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_putfault(struct soap *soap)
{
	if (soap->fault)
		return soap_put_SOAP_ENV__Fault(soap, soap->fault, "SOAP-ENV:Fault", NULL);
	return SOAP_OK;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_getfault(struct soap *soap)
{
	return (soap->fault = soap_get_SOAP_ENV__Fault(soap, NULL, "SOAP-ENV:Fault", NULL)) == NULL;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Value;
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultsubcode(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
	{	if (!soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode)
		{	soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode = soap_new_SOAP_ENV__Code(soap, -1);
			soap_default_SOAP_ENV__Code(soap, soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode);
		}
		return (const char**)&soap->fault->SOAP_ENV__Code->SOAP_ENV__Subcode->SOAP_ENV__Value;
	}
	return (const char**)&soap->fault->faultcode;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultstring(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 2)
		return (const char**)&soap->fault->SOAP_ENV__Reason->SOAP_ENV__Text;
	return (const char**)&soap->fault->faultstring;
}

SOAP_FMAC3 const char ** SOAP_FMAC4 soap_faultdetail(struct soap *soap)
{
	soap_fault(soap);
	if (soap->version == 1)
	{	if (!soap->fault->detail)
		{	soap->fault->detail = (struct SOAP_ENV__Detail*)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail));
			soap_default_SOAP_ENV__Detail(soap, soap->fault->detail);
		}
		return (const char**)&soap->fault->detail->__any;
	}
	if (!soap->fault->SOAP_ENV__Detail)
	{	soap->fault->SOAP_ENV__Detail = soap_new_SOAP_ENV__Detail(soap, -1);
		soap_default_SOAP_ENV__Detail(soap, soap->fault->SOAP_ENV__Detail);
	}
	return (const char**)&soap->fault->SOAP_ENV__Detail->__any;
}

#endif

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_getindependent(struct soap *soap)
{
	int t;
	if (soap->version == 1)
	{	for (;;)
		{	if (!soap_getelement(soap, &t))
				if (soap->error || soap_ignore_element(soap))
					break;
		}
	}
	if (soap->error == SOAP_NO_TAG || soap->error == SOAP_EOF)
		soap->error = SOAP_OK;
	return soap->error;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void * SOAP_FMAC4 soap_getelement(struct soap *soap, int *type)
{
	if (soap_peek_element(soap))
		return NULL;
	if (!*soap->id || !(*type = soap_lookup_type(soap, soap->id)))
		*type = soap_lookup_type(soap, soap->href);
	switch (*type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_in_xsd__byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_in_byte(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_in_short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_ns4__char:
		return soap_in_ns4__char(soap, NULL, NULL, "ns4:char");
	case SOAP_TYPE_int:
		return soap_in_int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_in_LONG64(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_float:
		return soap_in_float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_double:
		return soap_in_double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_in_xsd__unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_in_unsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedShort:
		return soap_in_unsignedShort(soap, NULL, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_in_unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_unsignedLONG64:
		return soap_in_unsignedLONG64(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_time:
		return soap_in_time(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_in_bool(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_ns4__guid__:
		return soap_in_ns4__guid__(soap, NULL, NULL, "ns4:guid");
	case SOAP_TYPE_ns4__guid:
		return soap_in_ns4__guid(soap, NULL, NULL, "ns4:guid");
	case SOAP_TYPE_ns4__duration__:
		return soap_in_ns4__duration__(soap, NULL, NULL, "ns4:duration");
	case SOAP_TYPE_ns4__duration:
		return soap_in_ns4__duration(soap, NULL, NULL, "ns4:duration");
	case SOAP_TYPE_ns4__char__:
		return soap_in_ns4__char__(soap, NULL, NULL, "ns4:char");
	case SOAP_TYPE_ns6__TranslateArrayResponse:
		return soap_in_ns6__TranslateArrayResponse(soap, NULL, NULL, "ns6:TranslateArrayResponse");
	case SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse:
		return soap_in_ns6__ArrayOfTranslateArrayResponse(soap, NULL, NULL, "ns6:ArrayOfTranslateArrayResponse");
	case SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse:
		return soap_in_ns6__ArrayOfGetTranslationsResponse(soap, NULL, NULL, "ns6:ArrayOfGetTranslationsResponse");
	case SOAP_TYPE_ns6__Translation:
		return soap_in_ns6__Translation(soap, NULL, NULL, "ns6:Translation");
	case SOAP_TYPE_ns6__ArrayOfTranslation:
		return soap_in_ns6__ArrayOfTranslation(soap, NULL, NULL, "ns6:ArrayOfTranslation");
	case SOAP_TYPE_ns6__TranslationMatch:
		return soap_in_ns6__TranslationMatch(soap, NULL, NULL, "ns6:TranslationMatch");
	case SOAP_TYPE_ns6__ArrayOfTranslationMatch:
		return soap_in_ns6__ArrayOfTranslationMatch(soap, NULL, NULL, "ns6:ArrayOfTranslationMatch");
	case SOAP_TYPE_ns6__GetTranslationsResponse:
		return soap_in_ns6__GetTranslationsResponse(soap, NULL, NULL, "ns6:GetTranslationsResponse");
	case SOAP_TYPE_ns6__TranslateOptions:
		return soap_in_ns6__TranslateOptions(soap, NULL, NULL, "ns6:TranslateOptions");
	case SOAP_TYPE_ns5__ArrayOfstring:
		return soap_in_ns5__ArrayOfstring(soap, NULL, NULL, "ns5:ArrayOfstring");
	case SOAP_TYPE_ns5__ArrayOfint:
		return soap_in_ns5__ArrayOfint(soap, NULL, NULL, "ns5:ArrayOfint");
	case SOAP_TYPE_xsd__unsignedShort:
		return soap_in_xsd__unsignedShort(soap, NULL, NULL, "xsd:unsignedShort");
	case SOAP_TYPE_xsd__unsignedLong:
		return soap_in_xsd__unsignedLong(soap, NULL, NULL, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__unsignedInt:
		return soap_in_xsd__unsignedInt(soap, NULL, NULL, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__unsignedByte_:
		return soap_in_xsd__unsignedByte_(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__string:
		return soap_in_xsd__string(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__short:
		return soap_in_xsd__short(soap, NULL, NULL, "xsd:short");
	case SOAP_TYPE_xsd__long:
		return soap_in_xsd__long(soap, NULL, NULL, "xsd:long");
	case SOAP_TYPE_xsd__int:
		return soap_in_xsd__int(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_xsd__float:
		return soap_in_xsd__float(soap, NULL, NULL, "xsd:float");
	case SOAP_TYPE_xsd__duration_:
		return soap_in_xsd__duration_(soap, NULL, NULL, "xsd:duration");
	case SOAP_TYPE_xsd__duration:
		return soap_in_xsd__duration(soap, NULL, NULL, "xsd:duration");
	case SOAP_TYPE_xsd__double:
		return soap_in_xsd__double(soap, NULL, NULL, "xsd:double");
	case SOAP_TYPE_xsd__decimal_:
		return soap_in_xsd__decimal_(soap, NULL, NULL, "xsd:decimal");
	case SOAP_TYPE_xsd__decimal:
		return soap_in_xsd__decimal(soap, NULL, NULL, "xsd:decimal");
	case SOAP_TYPE_xsd__dateTime:
		return soap_in_xsd__dateTime(soap, NULL, NULL, "xsd:dateTime");
	case SOAP_TYPE_xsd__byte_:
		return soap_in_xsd__byte_(soap, NULL, NULL, "xsd:byte");
	case SOAP_TYPE_xsd__boolean:
		return soap_in_xsd__boolean(soap, NULL, NULL, "xsd:boolean");
	case SOAP_TYPE_xsd__base64Binary_:
		return soap_in_xsd__base64Binary_(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_xsd__base64Binary:
		return soap_in_xsd__base64Binary(soap, NULL, NULL, "xsd:base64Binary");
	case SOAP_TYPE_xsd__anyURI_:
		return soap_in_xsd__anyURI_(soap, NULL, NULL, "xsd:anyURI");
	case SOAP_TYPE_xsd__anyURI:
		return soap_in_xsd__anyURI(soap, NULL, NULL, "xsd:anyURI");
	case SOAP_TYPE_xsd__QName:
		return soap_in_xsd__QName(soap, NULL, NULL, "xsd:QName");
	case SOAP_TYPE_xsd__IDREF_:
		return soap_in_xsd__IDREF_(soap, NULL, NULL, "xsd:IDREF");
	case SOAP_TYPE_xsd__IDREF:
		return soap_in_xsd__IDREF(soap, NULL, NULL, "xsd:IDREF");
	case SOAP_TYPE_xsd__ID_:
		return soap_in_xsd__ID_(soap, NULL, NULL, "xsd:ID");
	case SOAP_TYPE_xsd__ID:
		return soap_in_xsd__ID(soap, NULL, NULL, "xsd:ID");
	case SOAP_TYPE_std__wstring:
		return soap_in_std__wstring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_xsd__anyType:
		return soap_in_xsd__anyType(soap, NULL, NULL, "xsd:anyType");
	case SOAP_TYPE_PointerTo_ns3__TranslateArrayResponse:
		return soap_in_PointerTo_ns3__TranslateArrayResponse(soap, NULL, NULL, "ns3:TranslateArrayResponse");
	case SOAP_TYPE_PointerTo_ns3__TranslateArray:
		return soap_in_PointerTo_ns3__TranslateArray(soap, NULL, NULL, "ns3:TranslateArray");
	case SOAP_TYPE_PointerTo_ns3__SpeakResponse:
		return soap_in_PointerTo_ns3__SpeakResponse(soap, NULL, NULL, "ns3:SpeakResponse");
	case SOAP_TYPE_PointerTo_ns3__Speak:
		return soap_in_PointerTo_ns3__Speak(soap, NULL, NULL, "ns3:Speak");
	case SOAP_TYPE_PointerTo_ns3__GetTranslationsArrayResponse:
		return soap_in_PointerTo_ns3__GetTranslationsArrayResponse(soap, NULL, NULL, "ns3:GetTranslationsArrayResponse");
	case SOAP_TYPE_PointerTo_ns3__GetTranslationsArray:
		return soap_in_PointerTo_ns3__GetTranslationsArray(soap, NULL, NULL, "ns3:GetTranslationsArray");
	case SOAP_TYPE_PointerTo_ns3__AddTranslationArrayResponse:
		return soap_in_PointerTo_ns3__AddTranslationArrayResponse(soap, NULL, NULL, "ns3:AddTranslationArrayResponse");
	case SOAP_TYPE_PointerTo_ns3__AddTranslationArray:
		return soap_in_PointerTo_ns3__AddTranslationArray(soap, NULL, NULL, "ns3:AddTranslationArray");
	case SOAP_TYPE_PointerTo_ns3__TranslateResponse:
		return soap_in_PointerTo_ns3__TranslateResponse(soap, NULL, NULL, "ns3:TranslateResponse");
	case SOAP_TYPE_PointerTo_ns3__Translate:
		return soap_in_PointerTo_ns3__Translate(soap, NULL, NULL, "ns3:Translate");
	case SOAP_TYPE_PointerTo_ns3__GetTranslationsResponse:
		return soap_in_PointerTo_ns3__GetTranslationsResponse(soap, NULL, NULL, "ns3:GetTranslationsResponse");
	case SOAP_TYPE_PointerTo_ns3__GetTranslations:
		return soap_in_PointerTo_ns3__GetTranslations(soap, NULL, NULL, "ns3:GetTranslations");
	case SOAP_TYPE_PointerTo_ns3__GetLanguagesForTranslateResponse:
		return soap_in_PointerTo_ns3__GetLanguagesForTranslateResponse(soap, NULL, NULL, "ns3:GetLanguagesForTranslateResponse");
	case SOAP_TYPE_PointerTo_ns3__GetLanguagesForTranslate:
		return soap_in_PointerTo_ns3__GetLanguagesForTranslate(soap, NULL, NULL, "ns3:GetLanguagesForTranslate");
	case SOAP_TYPE_PointerTo_ns3__GetLanguagesForSpeakResponse:
		return soap_in_PointerTo_ns3__GetLanguagesForSpeakResponse(soap, NULL, NULL, "ns3:GetLanguagesForSpeakResponse");
	case SOAP_TYPE_PointerTo_ns3__GetLanguagesForSpeak:
		return soap_in_PointerTo_ns3__GetLanguagesForSpeak(soap, NULL, NULL, "ns3:GetLanguagesForSpeak");
	case SOAP_TYPE_PointerTo_ns3__GetLanguageNamesResponse:
		return soap_in_PointerTo_ns3__GetLanguageNamesResponse(soap, NULL, NULL, "ns3:GetLanguageNamesResponse");
	case SOAP_TYPE_PointerTo_ns3__GetLanguageNames:
		return soap_in_PointerTo_ns3__GetLanguageNames(soap, NULL, NULL, "ns3:GetLanguageNames");
	case SOAP_TYPE_PointerTo_ns3__GetAppIdTokenResponse:
		return soap_in_PointerTo_ns3__GetAppIdTokenResponse(soap, NULL, NULL, "ns3:GetAppIdTokenResponse");
	case SOAP_TYPE_PointerTo_ns3__GetAppIdToken:
		return soap_in_PointerTo_ns3__GetAppIdToken(soap, NULL, NULL, "ns3:GetAppIdToken");
	case SOAP_TYPE_PointerTo_ns3__DetectArrayResponse:
		return soap_in_PointerTo_ns3__DetectArrayResponse(soap, NULL, NULL, "ns3:DetectArrayResponse");
	case SOAP_TYPE_PointerTo_ns3__DetectArray:
		return soap_in_PointerTo_ns3__DetectArray(soap, NULL, NULL, "ns3:DetectArray");
	case SOAP_TYPE_PointerTo_ns3__DetectResponse:
		return soap_in_PointerTo_ns3__DetectResponse(soap, NULL, NULL, "ns3:DetectResponse");
	case SOAP_TYPE_PointerTo_ns3__Detect:
		return soap_in_PointerTo_ns3__Detect(soap, NULL, NULL, "ns3:Detect");
	case SOAP_TYPE_PointerTo_ns3__BreakSentencesResponse:
		return soap_in_PointerTo_ns3__BreakSentencesResponse(soap, NULL, NULL, "ns3:BreakSentencesResponse");
	case SOAP_TYPE_PointerTo_ns3__BreakSentences:
		return soap_in_PointerTo_ns3__BreakSentences(soap, NULL, NULL, "ns3:BreakSentences");
	case SOAP_TYPE_PointerTo_ns3__AddTranslationResponse:
		return soap_in_PointerTo_ns3__AddTranslationResponse(soap, NULL, NULL, "ns3:AddTranslationResponse");
	case SOAP_TYPE_PointerTo_ns3__AddTranslation:
		return soap_in_PointerTo_ns3__AddTranslation(soap, NULL, NULL, "ns3:AddTranslation");
	case SOAP_TYPE_PointerToPointerTons6__TranslateArrayResponse:
		return soap_in_PointerToPointerTons6__TranslateArrayResponse(soap, NULL, NULL, "ns6:TranslateArrayResponse");
	case SOAP_TYPE_PointerTons6__TranslateArrayResponse:
		return soap_in_PointerTons6__TranslateArrayResponse(soap, NULL, NULL, "ns6:TranslateArrayResponse");
	case SOAP_TYPE_PointerToPointerTons6__GetTranslationsResponse:
		return soap_in_PointerToPointerTons6__GetTranslationsResponse(soap, NULL, NULL, "ns6:GetTranslationsResponse");
	case SOAP_TYPE_PointerToPointerTons6__Translation:
		return soap_in_PointerToPointerTons6__Translation(soap, NULL, NULL, "ns6:Translation");
	case SOAP_TYPE_PointerTons6__Translation:
		return soap_in_PointerTons6__Translation(soap, NULL, NULL, "ns6:Translation");
	case SOAP_TYPE_PointerToPointerTons6__TranslationMatch:
		return soap_in_PointerToPointerTons6__TranslationMatch(soap, NULL, NULL, "ns6:TranslationMatch");
	case SOAP_TYPE_PointerTons6__TranslationMatch:
		return soap_in_PointerTons6__TranslationMatch(soap, NULL, NULL, "ns6:TranslationMatch");
	case SOAP_TYPE_PointerTons6__ArrayOfTranslationMatch:
		return soap_in_PointerTons6__ArrayOfTranslationMatch(soap, NULL, NULL, "ns6:ArrayOfTranslationMatch");
	case SOAP_TYPE_PointerTons6__ArrayOfTranslateArrayResponse:
		return soap_in_PointerTons6__ArrayOfTranslateArrayResponse(soap, NULL, NULL, "ns6:ArrayOfTranslateArrayResponse");
	case SOAP_TYPE_PointerTons6__ArrayOfGetTranslationsResponse:
		return soap_in_PointerTons6__ArrayOfGetTranslationsResponse(soap, NULL, NULL, "ns6:ArrayOfGetTranslationsResponse");
	case SOAP_TYPE_PointerTons6__ArrayOfTranslation:
		return soap_in_PointerTons6__ArrayOfTranslation(soap, NULL, NULL, "ns6:ArrayOfTranslation");
	case SOAP_TYPE_PointerTons6__GetTranslationsResponse:
		return soap_in_PointerTons6__GetTranslationsResponse(soap, NULL, NULL, "ns6:GetTranslationsResponse");
	case SOAP_TYPE_PointerTons6__TranslateOptions:
		return soap_in_PointerTons6__TranslateOptions(soap, NULL, NULL, "ns6:TranslateOptions");
	case SOAP_TYPE_PointerTons5__ArrayOfstring:
		return soap_in_PointerTons5__ArrayOfstring(soap, NULL, NULL, "ns5:ArrayOfstring");
	case SOAP_TYPE_PointerTons5__ArrayOfint:
		return soap_in_PointerTons5__ArrayOfint(soap, NULL, NULL, "ns5:ArrayOfint");
	case SOAP_TYPE_PointerToint:
		return soap_in_PointerToint(soap, NULL, NULL, "xsd:int");
	case SOAP_TYPE_PointerTostd__wstring:
		return soap_in_PointerTostd__wstring(soap, NULL, NULL, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_in_PointerTounsignedByte(soap, NULL, NULL, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
	{	char **s;
		s = soap_in__QName(soap, NULL, NULL, "xsd:QName");
		return s ? *s : NULL;
	}
	case SOAP_TYPE_string:
	{	char **s;
		s = soap_in_string(soap, NULL, NULL, "xsd:string");
		return s ? *s : NULL;
	}
	default:
	{	const char *t = soap->type;
		if (!*t)
			t = soap->tag;
		if (!soap_match_tag(soap, t, "ns4:guid"))
		{	*type = SOAP_TYPE_ns4__guid__;
			return soap_in_ns4__guid__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:guid"))
		{	*type = SOAP_TYPE_ns4__guid;
			return soap_in_ns4__guid(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:duration"))
		{	*type = SOAP_TYPE_ns4__duration__;
			return soap_in_ns4__duration__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:duration"))
		{	*type = SOAP_TYPE_ns4__duration;
			return soap_in_ns4__duration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:char"))
		{	*type = SOAP_TYPE_ns4__char__;
			return soap_in_ns4__char__(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns6:TranslateArrayResponse"))
		{	*type = SOAP_TYPE_ns6__TranslateArrayResponse;
			return soap_in_ns6__TranslateArrayResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns6:ArrayOfTranslateArrayResponse"))
		{	*type = SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse;
			return soap_in_ns6__ArrayOfTranslateArrayResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns6:ArrayOfGetTranslationsResponse"))
		{	*type = SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse;
			return soap_in_ns6__ArrayOfGetTranslationsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns6:Translation"))
		{	*type = SOAP_TYPE_ns6__Translation;
			return soap_in_ns6__Translation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns6:ArrayOfTranslation"))
		{	*type = SOAP_TYPE_ns6__ArrayOfTranslation;
			return soap_in_ns6__ArrayOfTranslation(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns6:TranslationMatch"))
		{	*type = SOAP_TYPE_ns6__TranslationMatch;
			return soap_in_ns6__TranslationMatch(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns6:ArrayOfTranslationMatch"))
		{	*type = SOAP_TYPE_ns6__ArrayOfTranslationMatch;
			return soap_in_ns6__ArrayOfTranslationMatch(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns6:GetTranslationsResponse"))
		{	*type = SOAP_TYPE_ns6__GetTranslationsResponse;
			return soap_in_ns6__GetTranslationsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns6:TranslateOptions"))
		{	*type = SOAP_TYPE_ns6__TranslateOptions;
			return soap_in_ns6__TranslateOptions(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:ArrayOfstring"))
		{	*type = SOAP_TYPE_ns5__ArrayOfstring;
			return soap_in_ns5__ArrayOfstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns5:ArrayOfint"))
		{	*type = SOAP_TYPE_ns5__ArrayOfint;
			return soap_in_ns5__ArrayOfint(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_xsd__unsignedShort;
			return soap_in_xsd__unsignedShort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_xsd__unsignedLong;
			return soap_in_xsd__unsignedLong(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_xsd__unsignedInt;
			return soap_in_xsd__unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte_;
			return soap_in_xsd__unsignedByte_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_xsd__string;
			return soap_in_xsd__string(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_xsd__short;
			return soap_in_xsd__short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_xsd__long;
			return soap_in_xsd__long(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_xsd__int;
			return soap_in_xsd__int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_xsd__float;
			return soap_in_xsd__float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_xsd__duration_;
			return soap_in_xsd__duration_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:duration"))
		{	*type = SOAP_TYPE_xsd__duration;
			return soap_in_xsd__duration(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_xsd__double;
			return soap_in_xsd__double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_xsd__decimal_;
			return soap_in_xsd__decimal_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:decimal"))
		{	*type = SOAP_TYPE_xsd__decimal;
			return soap_in_xsd__decimal(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_xsd__dateTime;
			return soap_in_xsd__dateTime(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_xsd__byte_;
			return soap_in_xsd__byte_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_xsd__boolean;
			return soap_in_xsd__boolean(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary_;
			return soap_in_xsd__base64Binary_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:base64Binary"))
		{	*type = SOAP_TYPE_xsd__base64Binary;
			return soap_in_xsd__base64Binary(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI_;
			return soap_in_xsd__anyURI_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyURI"))
		{	*type = SOAP_TYPE_xsd__anyURI;
			return soap_in_xsd__anyURI(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	*type = SOAP_TYPE_xsd__QName;
			return soap_in_xsd__QName(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:IDREF"))
		{	*type = SOAP_TYPE_xsd__IDREF_;
			return soap_in_xsd__IDREF_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:IDREF"))
		{	*type = SOAP_TYPE_xsd__IDREF;
			return soap_in_xsd__IDREF(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	*type = SOAP_TYPE_xsd__ID_;
			return soap_in_xsd__ID_(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:ID"))
		{	*type = SOAP_TYPE_xsd__ID;
			return soap_in_xsd__ID(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	*type = SOAP_TYPE_std__wstring;
			return soap_in_std__wstring(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:anyType"))
		{	*type = SOAP_TYPE_xsd__anyType;
			return soap_in_xsd__anyType(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_xsd__byte;
			return soap_in_xsd__byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:byte"))
		{	*type = SOAP_TYPE_byte;
			return soap_in_byte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:short"))
		{	*type = SOAP_TYPE_short;
			return soap_in_short(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns4:char"))
		{	*type = SOAP_TYPE_ns4__char;
			return soap_in_ns4__char(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:int"))
		{	*type = SOAP_TYPE_int;
			return soap_in_int(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:long"))
		{	*type = SOAP_TYPE_LONG64;
			return soap_in_LONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:float"))
		{	*type = SOAP_TYPE_float;
			return soap_in_float(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:double"))
		{	*type = SOAP_TYPE_double;
			return soap_in_double(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_xsd__unsignedByte;
			return soap_in_xsd__unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedByte"))
		{	*type = SOAP_TYPE_unsignedByte;
			return soap_in_unsignedByte(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedShort"))
		{	*type = SOAP_TYPE_unsignedShort;
			return soap_in_unsignedShort(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedInt"))
		{	*type = SOAP_TYPE_unsignedInt;
			return soap_in_unsignedInt(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:unsignedLong"))
		{	*type = SOAP_TYPE_unsignedLONG64;
			return soap_in_unsignedLONG64(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:dateTime"))
		{	*type = SOAP_TYPE_time;
			return soap_in_time(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:boolean"))
		{	*type = SOAP_TYPE_bool;
			return soap_in_bool(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "xsd:QName"))
		{	char **s;
			*type = SOAP_TYPE__QName;
			s = soap_in__QName(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		if (!soap_match_tag(soap, t, "xsd:string"))
		{	char **s;
			*type = SOAP_TYPE_string;
			s = soap_in_string(soap, NULL, NULL, NULL);
			return s ? *s : NULL;
		}
		t = soap->tag;
		if (!soap_match_tag(soap, t, "ns3:TranslateArrayResponse"))
		{	*type = SOAP_TYPE__ns3__TranslateArrayResponse;
			return soap_in__ns3__TranslateArrayResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:TranslateArray"))
		{	*type = SOAP_TYPE__ns3__TranslateArray;
			return soap_in__ns3__TranslateArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:SpeakResponse"))
		{	*type = SOAP_TYPE__ns3__SpeakResponse;
			return soap_in__ns3__SpeakResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:Speak"))
		{	*type = SOAP_TYPE__ns3__Speak;
			return soap_in__ns3__Speak(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:GetTranslationsArrayResponse"))
		{	*type = SOAP_TYPE__ns3__GetTranslationsArrayResponse;
			return soap_in__ns3__GetTranslationsArrayResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:GetTranslationsArray"))
		{	*type = SOAP_TYPE__ns3__GetTranslationsArray;
			return soap_in__ns3__GetTranslationsArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:AddTranslationArrayResponse"))
		{	*type = SOAP_TYPE__ns3__AddTranslationArrayResponse;
			return soap_in__ns3__AddTranslationArrayResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:AddTranslationArray"))
		{	*type = SOAP_TYPE__ns3__AddTranslationArray;
			return soap_in__ns3__AddTranslationArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:TranslateResponse"))
		{	*type = SOAP_TYPE__ns3__TranslateResponse;
			return soap_in__ns3__TranslateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:Translate"))
		{	*type = SOAP_TYPE__ns3__Translate;
			return soap_in__ns3__Translate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:GetTranslationsResponse"))
		{	*type = SOAP_TYPE__ns3__GetTranslationsResponse;
			return soap_in__ns3__GetTranslationsResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:GetTranslations"))
		{	*type = SOAP_TYPE__ns3__GetTranslations;
			return soap_in__ns3__GetTranslations(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:GetLanguagesForTranslateResponse"))
		{	*type = SOAP_TYPE__ns3__GetLanguagesForTranslateResponse;
			return soap_in__ns3__GetLanguagesForTranslateResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:GetLanguagesForTranslate"))
		{	*type = SOAP_TYPE__ns3__GetLanguagesForTranslate;
			return soap_in__ns3__GetLanguagesForTranslate(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:GetLanguagesForSpeakResponse"))
		{	*type = SOAP_TYPE__ns3__GetLanguagesForSpeakResponse;
			return soap_in__ns3__GetLanguagesForSpeakResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:GetLanguagesForSpeak"))
		{	*type = SOAP_TYPE__ns3__GetLanguagesForSpeak;
			return soap_in__ns3__GetLanguagesForSpeak(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:GetLanguageNamesResponse"))
		{	*type = SOAP_TYPE__ns3__GetLanguageNamesResponse;
			return soap_in__ns3__GetLanguageNamesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:GetLanguageNames"))
		{	*type = SOAP_TYPE__ns3__GetLanguageNames;
			return soap_in__ns3__GetLanguageNames(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:GetAppIdTokenResponse"))
		{	*type = SOAP_TYPE__ns3__GetAppIdTokenResponse;
			return soap_in__ns3__GetAppIdTokenResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:GetAppIdToken"))
		{	*type = SOAP_TYPE__ns3__GetAppIdToken;
			return soap_in__ns3__GetAppIdToken(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:DetectArrayResponse"))
		{	*type = SOAP_TYPE__ns3__DetectArrayResponse;
			return soap_in__ns3__DetectArrayResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:DetectArray"))
		{	*type = SOAP_TYPE__ns3__DetectArray;
			return soap_in__ns3__DetectArray(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:DetectResponse"))
		{	*type = SOAP_TYPE__ns3__DetectResponse;
			return soap_in__ns3__DetectResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:Detect"))
		{	*type = SOAP_TYPE__ns3__Detect;
			return soap_in__ns3__Detect(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:BreakSentencesResponse"))
		{	*type = SOAP_TYPE__ns3__BreakSentencesResponse;
			return soap_in__ns3__BreakSentencesResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:BreakSentences"))
		{	*type = SOAP_TYPE__ns3__BreakSentences;
			return soap_in__ns3__BreakSentences(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:AddTranslationResponse"))
		{	*type = SOAP_TYPE__ns3__AddTranslationResponse;
			return soap_in__ns3__AddTranslationResponse(soap, NULL, NULL, NULL);
		}
		if (!soap_match_tag(soap, t, "ns3:AddTranslation"))
		{	*type = SOAP_TYPE__ns3__AddTranslation;
			return soap_in__ns3__AddTranslation(soap, NULL, NULL, NULL);
		}
	}
	}
	soap->error = SOAP_TAG_MISMATCH;
	return NULL;
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 int SOAP_FMAC4 soap_ignore_element(struct soap *soap)
{
	if (!soap_peek_element(soap))
	{	int t;
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Unexpected element '%s' in input (level=%u, %d)\n", soap->tag, soap->level, soap->body));
		if (soap->mustUnderstand && !soap->other)
			return soap->error = SOAP_MUSTUNDERSTAND;
		if (((soap->mode & SOAP_XML_STRICT) && soap->part != SOAP_IN_HEADER) || !soap_match_tag(soap, soap->tag, "SOAP-ENV:"))
		{	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "REJECTING element '%s'\n", soap->tag));
			return soap->error = SOAP_TAG_MISMATCH;
		}
		if (!*soap->id || !soap_getelement(soap, &t))
		{	soap->peeked = 0;
			if (soap->fignore)
				soap->error = soap->fignore(soap, soap->tag);
			else
				soap->error = SOAP_OK;
			DBGLOG(TEST, if (!soap->error) SOAP_MESSAGE(fdebug, "IGNORING element '%s'\n", soap->tag));
			if (!soap->error && soap->body)
			{	soap->level++;
				while (!soap_ignore_element(soap))
					;
				if (soap->error == SOAP_NO_TAG)
					soap->error = soap_element_end_in(soap, NULL);
			}
		}
	}
	return soap->error;
}

#ifndef WITH_NOIDREF
SOAP_FMAC3 int SOAP_FMAC4 soap_putindependent(struct soap *soap)
{
	int i;
	struct soap_plist *pp;
	if (soap->version == 1 && soap->encodingStyle && !(soap->mode & (SOAP_XML_TREE | SOAP_XML_GRAPH)))
		for (i = 0; i < SOAP_PTRHASH; i++)
			for (pp = soap->pht[i]; pp; pp = pp->next)
				if (pp->mark1 == 2 || pp->mark2 == 2)
					if (soap_putelement(soap, pp->ptr, "id", pp->id, pp->type))
						return soap->error;
	return SOAP_OK;
}
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 int SOAP_FMAC4 soap_putelement(struct soap *soap, const void *ptr, const char *tag, int id, int type)
{
	switch (type)
	{
	case SOAP_TYPE_xsd__byte:
		return soap_out_xsd__byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_byte:
		return soap_out_byte(soap, tag, id, (const char *)ptr, "xsd:byte");
	case SOAP_TYPE_short:
		return soap_out_short(soap, tag, id, (const short *)ptr, "xsd:short");
	case SOAP_TYPE_ns4__char:
		return soap_out_ns4__char(soap, tag, id, (const int *)ptr, "ns4:char");
	case SOAP_TYPE_int:
		return soap_out_int(soap, tag, id, (const int *)ptr, "xsd:int");
	case SOAP_TYPE_LONG64:
		return soap_out_LONG64(soap, tag, id, (const LONG64 *)ptr, "xsd:long");
	case SOAP_TYPE_float:
		return soap_out_float(soap, tag, id, (const float *)ptr, "xsd:float");
	case SOAP_TYPE_double:
		return soap_out_double(soap, tag, id, (const double *)ptr, "xsd:double");
	case SOAP_TYPE_xsd__unsignedByte:
		return soap_out_xsd__unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedByte:
		return soap_out_unsignedByte(soap, tag, id, (const unsigned char *)ptr, "xsd:unsignedByte");
	case SOAP_TYPE_unsignedShort:
		return soap_out_unsignedShort(soap, tag, id, (const unsigned short *)ptr, "xsd:unsignedShort");
	case SOAP_TYPE_unsignedInt:
		return soap_out_unsignedInt(soap, tag, id, (const unsigned int *)ptr, "xsd:unsignedInt");
	case SOAP_TYPE_unsignedLONG64:
		return soap_out_unsignedLONG64(soap, tag, id, (const ULONG64 *)ptr, "xsd:unsignedLong");
	case SOAP_TYPE_time:
		return soap_out_time(soap, tag, id, (const time_t *)ptr, "xsd:dateTime");
	case SOAP_TYPE_bool:
		return soap_out_bool(soap, tag, id, (const bool *)ptr, "xsd:boolean");
	case SOAP_TYPE_ns4__guid__:
		return ((ns4__guid__ *)ptr)->soap_out(soap, tag, id, "ns4:guid");
	case SOAP_TYPE_ns4__guid:
		return soap_out_ns4__guid(soap, tag, id, (const std::wstring *)ptr, "ns4:guid");
	case SOAP_TYPE_ns4__duration__:
		return ((ns4__duration__ *)ptr)->soap_out(soap, tag, id, "ns4:duration");
	case SOAP_TYPE_ns4__duration:
		return soap_out_ns4__duration(soap, tag, id, (const std::wstring *)ptr, "ns4:duration");
	case SOAP_TYPE_ns4__char__:
		return ((ns4__char__ *)ptr)->soap_out(soap, tag, id, "ns4:char");
	case SOAP_TYPE_ns6__TranslateArrayResponse:
		return ((ns6__TranslateArrayResponse *)ptr)->soap_out(soap, tag, id, "ns6:TranslateArrayResponse");
	case SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse:
		return ((ns6__ArrayOfTranslateArrayResponse *)ptr)->soap_out(soap, tag, id, "ns6:ArrayOfTranslateArrayResponse");
	case SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse:
		return ((ns6__ArrayOfGetTranslationsResponse *)ptr)->soap_out(soap, tag, id, "ns6:ArrayOfGetTranslationsResponse");
	case SOAP_TYPE_ns6__Translation:
		return ((ns6__Translation *)ptr)->soap_out(soap, tag, id, "ns6:Translation");
	case SOAP_TYPE_ns6__ArrayOfTranslation:
		return ((ns6__ArrayOfTranslation *)ptr)->soap_out(soap, tag, id, "ns6:ArrayOfTranslation");
	case SOAP_TYPE_ns6__TranslationMatch:
		return ((ns6__TranslationMatch *)ptr)->soap_out(soap, tag, id, "ns6:TranslationMatch");
	case SOAP_TYPE_ns6__ArrayOfTranslationMatch:
		return ((ns6__ArrayOfTranslationMatch *)ptr)->soap_out(soap, tag, id, "ns6:ArrayOfTranslationMatch");
	case SOAP_TYPE_ns6__GetTranslationsResponse:
		return ((ns6__GetTranslationsResponse *)ptr)->soap_out(soap, tag, id, "ns6:GetTranslationsResponse");
	case SOAP_TYPE_ns6__TranslateOptions:
		return ((ns6__TranslateOptions *)ptr)->soap_out(soap, tag, id, "ns6:TranslateOptions");
	case SOAP_TYPE_ns5__ArrayOfstring:
		return ((ns5__ArrayOfstring *)ptr)->soap_out(soap, tag, id, "ns5:ArrayOfstring");
	case SOAP_TYPE_ns5__ArrayOfint:
		return ((ns5__ArrayOfint *)ptr)->soap_out(soap, tag, id, "ns5:ArrayOfint");
	case SOAP_TYPE__ns3__TranslateArrayResponse:
		return ((_ns3__TranslateArrayResponse *)ptr)->soap_out(soap, "ns3:TranslateArrayResponse", id, NULL);
	case SOAP_TYPE__ns3__TranslateArray:
		return ((_ns3__TranslateArray *)ptr)->soap_out(soap, "ns3:TranslateArray", id, NULL);
	case SOAP_TYPE__ns3__SpeakResponse:
		return ((_ns3__SpeakResponse *)ptr)->soap_out(soap, "ns3:SpeakResponse", id, NULL);
	case SOAP_TYPE__ns3__Speak:
		return ((_ns3__Speak *)ptr)->soap_out(soap, "ns3:Speak", id, NULL);
	case SOAP_TYPE__ns3__GetTranslationsArrayResponse:
		return ((_ns3__GetTranslationsArrayResponse *)ptr)->soap_out(soap, "ns3:GetTranslationsArrayResponse", id, NULL);
	case SOAP_TYPE__ns3__GetTranslationsArray:
		return ((_ns3__GetTranslationsArray *)ptr)->soap_out(soap, "ns3:GetTranslationsArray", id, NULL);
	case SOAP_TYPE__ns3__AddTranslationArrayResponse:
		return ((_ns3__AddTranslationArrayResponse *)ptr)->soap_out(soap, "ns3:AddTranslationArrayResponse", id, NULL);
	case SOAP_TYPE__ns3__AddTranslationArray:
		return ((_ns3__AddTranslationArray *)ptr)->soap_out(soap, "ns3:AddTranslationArray", id, NULL);
	case SOAP_TYPE__ns3__TranslateResponse:
		return ((_ns3__TranslateResponse *)ptr)->soap_out(soap, "ns3:TranslateResponse", id, NULL);
	case SOAP_TYPE__ns3__Translate:
		return ((_ns3__Translate *)ptr)->soap_out(soap, "ns3:Translate", id, NULL);
	case SOAP_TYPE__ns3__GetTranslationsResponse:
		return ((_ns3__GetTranslationsResponse *)ptr)->soap_out(soap, "ns3:GetTranslationsResponse", id, NULL);
	case SOAP_TYPE__ns3__GetTranslations:
		return ((_ns3__GetTranslations *)ptr)->soap_out(soap, "ns3:GetTranslations", id, NULL);
	case SOAP_TYPE__ns3__GetLanguagesForTranslateResponse:
		return ((_ns3__GetLanguagesForTranslateResponse *)ptr)->soap_out(soap, "ns3:GetLanguagesForTranslateResponse", id, NULL);
	case SOAP_TYPE__ns3__GetLanguagesForTranslate:
		return ((_ns3__GetLanguagesForTranslate *)ptr)->soap_out(soap, "ns3:GetLanguagesForTranslate", id, NULL);
	case SOAP_TYPE__ns3__GetLanguagesForSpeakResponse:
		return ((_ns3__GetLanguagesForSpeakResponse *)ptr)->soap_out(soap, "ns3:GetLanguagesForSpeakResponse", id, NULL);
	case SOAP_TYPE__ns3__GetLanguagesForSpeak:
		return ((_ns3__GetLanguagesForSpeak *)ptr)->soap_out(soap, "ns3:GetLanguagesForSpeak", id, NULL);
	case SOAP_TYPE__ns3__GetLanguageNamesResponse:
		return ((_ns3__GetLanguageNamesResponse *)ptr)->soap_out(soap, "ns3:GetLanguageNamesResponse", id, NULL);
	case SOAP_TYPE__ns3__GetLanguageNames:
		return ((_ns3__GetLanguageNames *)ptr)->soap_out(soap, "ns3:GetLanguageNames", id, NULL);
	case SOAP_TYPE__ns3__GetAppIdTokenResponse:
		return ((_ns3__GetAppIdTokenResponse *)ptr)->soap_out(soap, "ns3:GetAppIdTokenResponse", id, NULL);
	case SOAP_TYPE__ns3__GetAppIdToken:
		return ((_ns3__GetAppIdToken *)ptr)->soap_out(soap, "ns3:GetAppIdToken", id, NULL);
	case SOAP_TYPE__ns3__DetectArrayResponse:
		return ((_ns3__DetectArrayResponse *)ptr)->soap_out(soap, "ns3:DetectArrayResponse", id, NULL);
	case SOAP_TYPE__ns3__DetectArray:
		return ((_ns3__DetectArray *)ptr)->soap_out(soap, "ns3:DetectArray", id, NULL);
	case SOAP_TYPE__ns3__DetectResponse:
		return ((_ns3__DetectResponse *)ptr)->soap_out(soap, "ns3:DetectResponse", id, NULL);
	case SOAP_TYPE__ns3__Detect:
		return ((_ns3__Detect *)ptr)->soap_out(soap, "ns3:Detect", id, NULL);
	case SOAP_TYPE__ns3__BreakSentencesResponse:
		return ((_ns3__BreakSentencesResponse *)ptr)->soap_out(soap, "ns3:BreakSentencesResponse", id, NULL);
	case SOAP_TYPE__ns3__BreakSentences:
		return ((_ns3__BreakSentences *)ptr)->soap_out(soap, "ns3:BreakSentences", id, NULL);
	case SOAP_TYPE__ns3__AddTranslationResponse:
		return ((_ns3__AddTranslationResponse *)ptr)->soap_out(soap, "ns3:AddTranslationResponse", id, NULL);
	case SOAP_TYPE__ns3__AddTranslation:
		return ((_ns3__AddTranslation *)ptr)->soap_out(soap, "ns3:AddTranslation", id, NULL);
	case SOAP_TYPE_xsd__unsignedShort:
		return ((xsd__unsignedShort *)ptr)->soap_out(soap, tag, id, "xsd:unsignedShort");
	case SOAP_TYPE_xsd__unsignedLong:
		return ((xsd__unsignedLong *)ptr)->soap_out(soap, tag, id, "xsd:unsignedLong");
	case SOAP_TYPE_xsd__unsignedInt:
		return ((xsd__unsignedInt *)ptr)->soap_out(soap, tag, id, "xsd:unsignedInt");
	case SOAP_TYPE_xsd__unsignedByte_:
		return ((xsd__unsignedByte_ *)ptr)->soap_out(soap, tag, id, "xsd:unsignedByte");
	case SOAP_TYPE_xsd__string:
		return ((xsd__string *)ptr)->soap_out(soap, tag, id, "xsd:string");
	case SOAP_TYPE_xsd__short:
		return ((xsd__short *)ptr)->soap_out(soap, tag, id, "xsd:short");
	case SOAP_TYPE_xsd__long:
		return ((xsd__long *)ptr)->soap_out(soap, tag, id, "xsd:long");
	case SOAP_TYPE_xsd__int:
		return ((xsd__int *)ptr)->soap_out(soap, tag, id, "xsd:int");
	case SOAP_TYPE_xsd__float:
		return ((xsd__float *)ptr)->soap_out(soap, tag, id, "xsd:float");
	case SOAP_TYPE_xsd__duration_:
		return ((xsd__duration_ *)ptr)->soap_out(soap, tag, id, "xsd:duration");
	case SOAP_TYPE_xsd__duration:
		return soap_out_xsd__duration(soap, tag, id, (const std::wstring *)ptr, "xsd:duration");
	case SOAP_TYPE_xsd__double:
		return ((xsd__double *)ptr)->soap_out(soap, tag, id, "xsd:double");
	case SOAP_TYPE_xsd__decimal_:
		return ((xsd__decimal_ *)ptr)->soap_out(soap, tag, id, "xsd:decimal");
	case SOAP_TYPE_xsd__decimal:
		return soap_out_xsd__decimal(soap, tag, id, (const std::wstring *)ptr, "xsd:decimal");
	case SOAP_TYPE_xsd__dateTime:
		return ((xsd__dateTime *)ptr)->soap_out(soap, tag, id, "xsd:dateTime");
	case SOAP_TYPE_xsd__byte_:
		return ((xsd__byte_ *)ptr)->soap_out(soap, tag, id, "xsd:byte");
	case SOAP_TYPE_xsd__boolean:
		return ((xsd__boolean *)ptr)->soap_out(soap, tag, id, "xsd:boolean");
	case SOAP_TYPE_xsd__base64Binary_:
		return ((xsd__base64Binary_ *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_xsd__base64Binary:
		return ((xsd__base64Binary *)ptr)->soap_out(soap, tag, id, "xsd:base64Binary");
	case SOAP_TYPE_xsd__anyURI_:
		return ((xsd__anyURI_ *)ptr)->soap_out(soap, tag, id, "xsd:anyURI");
	case SOAP_TYPE_xsd__anyURI:
		return soap_out_xsd__anyURI(soap, tag, id, (const std::wstring *)ptr, "xsd:anyURI");
	case SOAP_TYPE_xsd__QName:
		return ((xsd__QName *)ptr)->soap_out(soap, tag, id, "xsd:QName");
	case SOAP_TYPE_xsd__IDREF_:
		return ((xsd__IDREF_ *)ptr)->soap_out(soap, tag, id, "xsd:IDREF");
	case SOAP_TYPE_xsd__IDREF:
		return soap_out_xsd__IDREF(soap, tag, id, (const std::wstring *)ptr, "xsd:IDREF");
	case SOAP_TYPE_xsd__ID_:
		return ((xsd__ID_ *)ptr)->soap_out(soap, tag, id, "xsd:ID");
	case SOAP_TYPE_xsd__ID:
		return soap_out_xsd__ID(soap, tag, id, (const std::wstring *)ptr, "xsd:ID");
	case SOAP_TYPE_std__wstring:
		return soap_out_std__wstring(soap, tag, id, (const std::wstring *)ptr, "xsd:string");
	case SOAP_TYPE_xsd__anyType:
		return ((xsd__anyType *)ptr)->soap_out(soap, tag, id, "xsd:anyType");
	case SOAP_TYPE_PointerTo_ns3__TranslateArrayResponse:
		return soap_out_PointerTo_ns3__TranslateArrayResponse(soap, tag, id, (_ns3__TranslateArrayResponse *const*)ptr, "ns3:TranslateArrayResponse");
	case SOAP_TYPE_PointerTo_ns3__TranslateArray:
		return soap_out_PointerTo_ns3__TranslateArray(soap, tag, id, (_ns3__TranslateArray *const*)ptr, "ns3:TranslateArray");
	case SOAP_TYPE_PointerTo_ns3__SpeakResponse:
		return soap_out_PointerTo_ns3__SpeakResponse(soap, tag, id, (_ns3__SpeakResponse *const*)ptr, "ns3:SpeakResponse");
	case SOAP_TYPE_PointerTo_ns3__Speak:
		return soap_out_PointerTo_ns3__Speak(soap, tag, id, (_ns3__Speak *const*)ptr, "ns3:Speak");
	case SOAP_TYPE_PointerTo_ns3__GetTranslationsArrayResponse:
		return soap_out_PointerTo_ns3__GetTranslationsArrayResponse(soap, tag, id, (_ns3__GetTranslationsArrayResponse *const*)ptr, "ns3:GetTranslationsArrayResponse");
	case SOAP_TYPE_PointerTo_ns3__GetTranslationsArray:
		return soap_out_PointerTo_ns3__GetTranslationsArray(soap, tag, id, (_ns3__GetTranslationsArray *const*)ptr, "ns3:GetTranslationsArray");
	case SOAP_TYPE_PointerTo_ns3__AddTranslationArrayResponse:
		return soap_out_PointerTo_ns3__AddTranslationArrayResponse(soap, tag, id, (_ns3__AddTranslationArrayResponse *const*)ptr, "ns3:AddTranslationArrayResponse");
	case SOAP_TYPE_PointerTo_ns3__AddTranslationArray:
		return soap_out_PointerTo_ns3__AddTranslationArray(soap, tag, id, (_ns3__AddTranslationArray *const*)ptr, "ns3:AddTranslationArray");
	case SOAP_TYPE_PointerTo_ns3__TranslateResponse:
		return soap_out_PointerTo_ns3__TranslateResponse(soap, tag, id, (_ns3__TranslateResponse *const*)ptr, "ns3:TranslateResponse");
	case SOAP_TYPE_PointerTo_ns3__Translate:
		return soap_out_PointerTo_ns3__Translate(soap, tag, id, (_ns3__Translate *const*)ptr, "ns3:Translate");
	case SOAP_TYPE_PointerTo_ns3__GetTranslationsResponse:
		return soap_out_PointerTo_ns3__GetTranslationsResponse(soap, tag, id, (_ns3__GetTranslationsResponse *const*)ptr, "ns3:GetTranslationsResponse");
	case SOAP_TYPE_PointerTo_ns3__GetTranslations:
		return soap_out_PointerTo_ns3__GetTranslations(soap, tag, id, (_ns3__GetTranslations *const*)ptr, "ns3:GetTranslations");
	case SOAP_TYPE_PointerTo_ns3__GetLanguagesForTranslateResponse:
		return soap_out_PointerTo_ns3__GetLanguagesForTranslateResponse(soap, tag, id, (_ns3__GetLanguagesForTranslateResponse *const*)ptr, "ns3:GetLanguagesForTranslateResponse");
	case SOAP_TYPE_PointerTo_ns3__GetLanguagesForTranslate:
		return soap_out_PointerTo_ns3__GetLanguagesForTranslate(soap, tag, id, (_ns3__GetLanguagesForTranslate *const*)ptr, "ns3:GetLanguagesForTranslate");
	case SOAP_TYPE_PointerTo_ns3__GetLanguagesForSpeakResponse:
		return soap_out_PointerTo_ns3__GetLanguagesForSpeakResponse(soap, tag, id, (_ns3__GetLanguagesForSpeakResponse *const*)ptr, "ns3:GetLanguagesForSpeakResponse");
	case SOAP_TYPE_PointerTo_ns3__GetLanguagesForSpeak:
		return soap_out_PointerTo_ns3__GetLanguagesForSpeak(soap, tag, id, (_ns3__GetLanguagesForSpeak *const*)ptr, "ns3:GetLanguagesForSpeak");
	case SOAP_TYPE_PointerTo_ns3__GetLanguageNamesResponse:
		return soap_out_PointerTo_ns3__GetLanguageNamesResponse(soap, tag, id, (_ns3__GetLanguageNamesResponse *const*)ptr, "ns3:GetLanguageNamesResponse");
	case SOAP_TYPE_PointerTo_ns3__GetLanguageNames:
		return soap_out_PointerTo_ns3__GetLanguageNames(soap, tag, id, (_ns3__GetLanguageNames *const*)ptr, "ns3:GetLanguageNames");
	case SOAP_TYPE_PointerTo_ns3__GetAppIdTokenResponse:
		return soap_out_PointerTo_ns3__GetAppIdTokenResponse(soap, tag, id, (_ns3__GetAppIdTokenResponse *const*)ptr, "ns3:GetAppIdTokenResponse");
	case SOAP_TYPE_PointerTo_ns3__GetAppIdToken:
		return soap_out_PointerTo_ns3__GetAppIdToken(soap, tag, id, (_ns3__GetAppIdToken *const*)ptr, "ns3:GetAppIdToken");
	case SOAP_TYPE_PointerTo_ns3__DetectArrayResponse:
		return soap_out_PointerTo_ns3__DetectArrayResponse(soap, tag, id, (_ns3__DetectArrayResponse *const*)ptr, "ns3:DetectArrayResponse");
	case SOAP_TYPE_PointerTo_ns3__DetectArray:
		return soap_out_PointerTo_ns3__DetectArray(soap, tag, id, (_ns3__DetectArray *const*)ptr, "ns3:DetectArray");
	case SOAP_TYPE_PointerTo_ns3__DetectResponse:
		return soap_out_PointerTo_ns3__DetectResponse(soap, tag, id, (_ns3__DetectResponse *const*)ptr, "ns3:DetectResponse");
	case SOAP_TYPE_PointerTo_ns3__Detect:
		return soap_out_PointerTo_ns3__Detect(soap, tag, id, (_ns3__Detect *const*)ptr, "ns3:Detect");
	case SOAP_TYPE_PointerTo_ns3__BreakSentencesResponse:
		return soap_out_PointerTo_ns3__BreakSentencesResponse(soap, tag, id, (_ns3__BreakSentencesResponse *const*)ptr, "ns3:BreakSentencesResponse");
	case SOAP_TYPE_PointerTo_ns3__BreakSentences:
		return soap_out_PointerTo_ns3__BreakSentences(soap, tag, id, (_ns3__BreakSentences *const*)ptr, "ns3:BreakSentences");
	case SOAP_TYPE_PointerTo_ns3__AddTranslationResponse:
		return soap_out_PointerTo_ns3__AddTranslationResponse(soap, tag, id, (_ns3__AddTranslationResponse *const*)ptr, "ns3:AddTranslationResponse");
	case SOAP_TYPE_PointerTo_ns3__AddTranslation:
		return soap_out_PointerTo_ns3__AddTranslation(soap, tag, id, (_ns3__AddTranslation *const*)ptr, "ns3:AddTranslation");
	case SOAP_TYPE_PointerToPointerTons6__TranslateArrayResponse:
		return soap_out_PointerToPointerTons6__TranslateArrayResponse(soap, tag, id, (ns6__TranslateArrayResponse **const*)ptr, "ns6:TranslateArrayResponse");
	case SOAP_TYPE_PointerTons6__TranslateArrayResponse:
		return soap_out_PointerTons6__TranslateArrayResponse(soap, tag, id, (ns6__TranslateArrayResponse *const*)ptr, "ns6:TranslateArrayResponse");
	case SOAP_TYPE_PointerToPointerTons6__GetTranslationsResponse:
		return soap_out_PointerToPointerTons6__GetTranslationsResponse(soap, tag, id, (ns6__GetTranslationsResponse **const*)ptr, "ns6:GetTranslationsResponse");
	case SOAP_TYPE_PointerToPointerTons6__Translation:
		return soap_out_PointerToPointerTons6__Translation(soap, tag, id, (ns6__Translation **const*)ptr, "ns6:Translation");
	case SOAP_TYPE_PointerTons6__Translation:
		return soap_out_PointerTons6__Translation(soap, tag, id, (ns6__Translation *const*)ptr, "ns6:Translation");
	case SOAP_TYPE_PointerToPointerTons6__TranslationMatch:
		return soap_out_PointerToPointerTons6__TranslationMatch(soap, tag, id, (ns6__TranslationMatch **const*)ptr, "ns6:TranslationMatch");
	case SOAP_TYPE_PointerTons6__TranslationMatch:
		return soap_out_PointerTons6__TranslationMatch(soap, tag, id, (ns6__TranslationMatch *const*)ptr, "ns6:TranslationMatch");
	case SOAP_TYPE_PointerTons6__ArrayOfTranslationMatch:
		return soap_out_PointerTons6__ArrayOfTranslationMatch(soap, tag, id, (ns6__ArrayOfTranslationMatch *const*)ptr, "ns6:ArrayOfTranslationMatch");
	case SOAP_TYPE_PointerTons6__ArrayOfTranslateArrayResponse:
		return soap_out_PointerTons6__ArrayOfTranslateArrayResponse(soap, tag, id, (ns6__ArrayOfTranslateArrayResponse *const*)ptr, "ns6:ArrayOfTranslateArrayResponse");
	case SOAP_TYPE_PointerTons6__ArrayOfGetTranslationsResponse:
		return soap_out_PointerTons6__ArrayOfGetTranslationsResponse(soap, tag, id, (ns6__ArrayOfGetTranslationsResponse *const*)ptr, "ns6:ArrayOfGetTranslationsResponse");
	case SOAP_TYPE_PointerTons6__ArrayOfTranslation:
		return soap_out_PointerTons6__ArrayOfTranslation(soap, tag, id, (ns6__ArrayOfTranslation *const*)ptr, "ns6:ArrayOfTranslation");
	case SOAP_TYPE_PointerTons6__GetTranslationsResponse:
		return soap_out_PointerTons6__GetTranslationsResponse(soap, tag, id, (ns6__GetTranslationsResponse *const*)ptr, "ns6:GetTranslationsResponse");
	case SOAP_TYPE_PointerTons6__TranslateOptions:
		return soap_out_PointerTons6__TranslateOptions(soap, tag, id, (ns6__TranslateOptions *const*)ptr, "ns6:TranslateOptions");
	case SOAP_TYPE_PointerTons5__ArrayOfstring:
		return soap_out_PointerTons5__ArrayOfstring(soap, tag, id, (ns5__ArrayOfstring *const*)ptr, "ns5:ArrayOfstring");
	case SOAP_TYPE_PointerTons5__ArrayOfint:
		return soap_out_PointerTons5__ArrayOfint(soap, tag, id, (ns5__ArrayOfint *const*)ptr, "ns5:ArrayOfint");
	case SOAP_TYPE_PointerToint:
		return soap_out_PointerToint(soap, tag, id, (int *const*)ptr, "xsd:int");
	case SOAP_TYPE_PointerTostd__wstring:
		return soap_out_PointerTostd__wstring(soap, tag, id, (std::wstring *const*)ptr, "xsd:string");
	case SOAP_TYPE_PointerTounsignedByte:
		return soap_out_PointerTounsignedByte(soap, tag, id, (unsigned char *const*)ptr, "xsd:unsignedByte");
	case SOAP_TYPE__QName:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:QName");
	case SOAP_TYPE_string:
		return soap_out_string(soap, tag, id, (char*const*)&ptr, "xsd:string");
	}
	return SOAP_OK;
}

#ifdef __cplusplus
}
#endif
#endif

#ifndef WITH_NOIDREF

#ifdef __cplusplus
extern "C" {
#endif
SOAP_FMAC3 void SOAP_FMAC4 soap_markelement(struct soap *soap, const void *ptr, int type)
{
	(void)soap; (void)ptr; (void)type; /* appease -Wall -Werror */
	switch (type)
	{
	case SOAP_TYPE_ns4__guid__:
		((ns4__guid__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__guid:
		soap_serialize_ns4__guid(soap, (const std::wstring *)ptr);
		break;
	case SOAP_TYPE_ns4__duration__:
		((ns4__duration__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns4__duration:
		soap_serialize_ns4__duration(soap, (const std::wstring *)ptr);
		break;
	case SOAP_TYPE_ns4__char__:
		((ns4__char__ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns6__TranslateArrayResponse:
		((ns6__TranslateArrayResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse:
		((ns6__ArrayOfTranslateArrayResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse:
		((ns6__ArrayOfGetTranslationsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns6__Translation:
		((ns6__Translation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns6__ArrayOfTranslation:
		((ns6__ArrayOfTranslation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns6__TranslationMatch:
		((ns6__TranslationMatch *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns6__ArrayOfTranslationMatch:
		((ns6__ArrayOfTranslationMatch *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns6__GetTranslationsResponse:
		((ns6__GetTranslationsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns6__TranslateOptions:
		((ns6__TranslateOptions *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__ArrayOfstring:
		((ns5__ArrayOfstring *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_ns5__ArrayOfint:
		((ns5__ArrayOfint *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__TranslateArrayResponse:
		((_ns3__TranslateArrayResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__TranslateArray:
		((_ns3__TranslateArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__SpeakResponse:
		((_ns3__SpeakResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__Speak:
		((_ns3__Speak *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__GetTranslationsArrayResponse:
		((_ns3__GetTranslationsArrayResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__GetTranslationsArray:
		((_ns3__GetTranslationsArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__AddTranslationArrayResponse:
		((_ns3__AddTranslationArrayResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__AddTranslationArray:
		((_ns3__AddTranslationArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__TranslateResponse:
		((_ns3__TranslateResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__Translate:
		((_ns3__Translate *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__GetTranslationsResponse:
		((_ns3__GetTranslationsResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__GetTranslations:
		((_ns3__GetTranslations *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__GetLanguagesForTranslateResponse:
		((_ns3__GetLanguagesForTranslateResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__GetLanguagesForTranslate:
		((_ns3__GetLanguagesForTranslate *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__GetLanguagesForSpeakResponse:
		((_ns3__GetLanguagesForSpeakResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__GetLanguagesForSpeak:
		((_ns3__GetLanguagesForSpeak *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__GetLanguageNamesResponse:
		((_ns3__GetLanguageNamesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__GetLanguageNames:
		((_ns3__GetLanguageNames *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__GetAppIdTokenResponse:
		((_ns3__GetAppIdTokenResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__GetAppIdToken:
		((_ns3__GetAppIdToken *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__DetectArrayResponse:
		((_ns3__DetectArrayResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__DetectArray:
		((_ns3__DetectArray *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__DetectResponse:
		((_ns3__DetectResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__Detect:
		((_ns3__Detect *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__BreakSentencesResponse:
		((_ns3__BreakSentencesResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__BreakSentences:
		((_ns3__BreakSentences *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__AddTranslationResponse:
		((_ns3__AddTranslationResponse *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE__ns3__AddTranslation:
		((_ns3__AddTranslation *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedShort:
		((xsd__unsignedShort *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedLong:
		((xsd__unsignedLong *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedInt:
		((xsd__unsignedInt *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__unsignedByte_:
		((xsd__unsignedByte_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__string:
		((xsd__string *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__short:
		((xsd__short *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__long:
		((xsd__long *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__int:
		((xsd__int *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__float:
		((xsd__float *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__duration_:
		((xsd__duration_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__duration:
		soap_serialize_xsd__duration(soap, (const std::wstring *)ptr);
		break;
	case SOAP_TYPE_xsd__double:
		((xsd__double *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__decimal_:
		((xsd__decimal_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__decimal:
		soap_serialize_xsd__decimal(soap, (const std::wstring *)ptr);
		break;
	case SOAP_TYPE_xsd__dateTime:
		((xsd__dateTime *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__byte_:
		((xsd__byte_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__boolean:
		((xsd__boolean *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary_:
		((xsd__base64Binary_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		((xsd__base64Binary *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyURI_:
		((xsd__anyURI_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__anyURI:
		soap_serialize_xsd__anyURI(soap, (const std::wstring *)ptr);
		break;
	case SOAP_TYPE_xsd__QName:
		((xsd__QName *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__IDREF_:
		((xsd__IDREF_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__IDREF:
		soap_serialize_xsd__IDREF(soap, (const std::wstring *)ptr);
		break;
	case SOAP_TYPE_xsd__ID_:
		((xsd__ID_ *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE_xsd__ID:
		soap_serialize_xsd__ID(soap, (const std::wstring *)ptr);
		break;
	case SOAP_TYPE_std__wstring:
		soap_serialize_std__wstring(soap, (const std::wstring *)ptr);
		break;
	case SOAP_TYPE_xsd__anyType:
		((xsd__anyType *)ptr)->soap_serialize(soap);
		break;
	case SOAP_TYPE___ns1__TranslateArray:
		soap_serialize___ns1__TranslateArray(soap, (const struct __ns1__TranslateArray *)ptr);
		break;
	case SOAP_TYPE___ns1__Speak:
		soap_serialize___ns1__Speak(soap, (const struct __ns1__Speak *)ptr);
		break;
	case SOAP_TYPE___ns1__GetTranslationsArray:
		soap_serialize___ns1__GetTranslationsArray(soap, (const struct __ns1__GetTranslationsArray *)ptr);
		break;
	case SOAP_TYPE___ns1__AddTranslationArray:
		soap_serialize___ns1__AddTranslationArray(soap, (const struct __ns1__AddTranslationArray *)ptr);
		break;
	case SOAP_TYPE___ns1__Translate:
		soap_serialize___ns1__Translate(soap, (const struct __ns1__Translate *)ptr);
		break;
	case SOAP_TYPE___ns1__GetTranslations:
		soap_serialize___ns1__GetTranslations(soap, (const struct __ns1__GetTranslations *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLanguagesForTranslate:
		soap_serialize___ns1__GetLanguagesForTranslate(soap, (const struct __ns1__GetLanguagesForTranslate *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLanguagesForSpeak:
		soap_serialize___ns1__GetLanguagesForSpeak(soap, (const struct __ns1__GetLanguagesForSpeak *)ptr);
		break;
	case SOAP_TYPE___ns1__GetLanguageNames:
		soap_serialize___ns1__GetLanguageNames(soap, (const struct __ns1__GetLanguageNames *)ptr);
		break;
	case SOAP_TYPE___ns1__GetAppIdToken:
		soap_serialize___ns1__GetAppIdToken(soap, (const struct __ns1__GetAppIdToken *)ptr);
		break;
	case SOAP_TYPE___ns1__DetectArray:
		soap_serialize___ns1__DetectArray(soap, (const struct __ns1__DetectArray *)ptr);
		break;
	case SOAP_TYPE___ns1__Detect:
		soap_serialize___ns1__Detect(soap, (const struct __ns1__Detect *)ptr);
		break;
	case SOAP_TYPE___ns1__BreakSentences:
		soap_serialize___ns1__BreakSentences(soap, (const struct __ns1__BreakSentences *)ptr);
		break;
	case SOAP_TYPE___ns1__AddTranslation:
		soap_serialize___ns1__AddTranslation(soap, (const struct __ns1__AddTranslation *)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__TranslateArrayResponse:
		soap_serialize_PointerTo_ns3__TranslateArrayResponse(soap, (_ns3__TranslateArrayResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__TranslateArray:
		soap_serialize_PointerTo_ns3__TranslateArray(soap, (_ns3__TranslateArray *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__SpeakResponse:
		soap_serialize_PointerTo_ns3__SpeakResponse(soap, (_ns3__SpeakResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__Speak:
		soap_serialize_PointerTo_ns3__Speak(soap, (_ns3__Speak *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__GetTranslationsArrayResponse:
		soap_serialize_PointerTo_ns3__GetTranslationsArrayResponse(soap, (_ns3__GetTranslationsArrayResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__GetTranslationsArray:
		soap_serialize_PointerTo_ns3__GetTranslationsArray(soap, (_ns3__GetTranslationsArray *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__AddTranslationArrayResponse:
		soap_serialize_PointerTo_ns3__AddTranslationArrayResponse(soap, (_ns3__AddTranslationArrayResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__AddTranslationArray:
		soap_serialize_PointerTo_ns3__AddTranslationArray(soap, (_ns3__AddTranslationArray *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__TranslateResponse:
		soap_serialize_PointerTo_ns3__TranslateResponse(soap, (_ns3__TranslateResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__Translate:
		soap_serialize_PointerTo_ns3__Translate(soap, (_ns3__Translate *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__GetTranslationsResponse:
		soap_serialize_PointerTo_ns3__GetTranslationsResponse(soap, (_ns3__GetTranslationsResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__GetTranslations:
		soap_serialize_PointerTo_ns3__GetTranslations(soap, (_ns3__GetTranslations *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__GetLanguagesForTranslateResponse:
		soap_serialize_PointerTo_ns3__GetLanguagesForTranslateResponse(soap, (_ns3__GetLanguagesForTranslateResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__GetLanguagesForTranslate:
		soap_serialize_PointerTo_ns3__GetLanguagesForTranslate(soap, (_ns3__GetLanguagesForTranslate *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__GetLanguagesForSpeakResponse:
		soap_serialize_PointerTo_ns3__GetLanguagesForSpeakResponse(soap, (_ns3__GetLanguagesForSpeakResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__GetLanguagesForSpeak:
		soap_serialize_PointerTo_ns3__GetLanguagesForSpeak(soap, (_ns3__GetLanguagesForSpeak *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__GetLanguageNamesResponse:
		soap_serialize_PointerTo_ns3__GetLanguageNamesResponse(soap, (_ns3__GetLanguageNamesResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__GetLanguageNames:
		soap_serialize_PointerTo_ns3__GetLanguageNames(soap, (_ns3__GetLanguageNames *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__GetAppIdTokenResponse:
		soap_serialize_PointerTo_ns3__GetAppIdTokenResponse(soap, (_ns3__GetAppIdTokenResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__GetAppIdToken:
		soap_serialize_PointerTo_ns3__GetAppIdToken(soap, (_ns3__GetAppIdToken *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__DetectArrayResponse:
		soap_serialize_PointerTo_ns3__DetectArrayResponse(soap, (_ns3__DetectArrayResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__DetectArray:
		soap_serialize_PointerTo_ns3__DetectArray(soap, (_ns3__DetectArray *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__DetectResponse:
		soap_serialize_PointerTo_ns3__DetectResponse(soap, (_ns3__DetectResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__Detect:
		soap_serialize_PointerTo_ns3__Detect(soap, (_ns3__Detect *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__BreakSentencesResponse:
		soap_serialize_PointerTo_ns3__BreakSentencesResponse(soap, (_ns3__BreakSentencesResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__BreakSentences:
		soap_serialize_PointerTo_ns3__BreakSentences(soap, (_ns3__BreakSentences *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__AddTranslationResponse:
		soap_serialize_PointerTo_ns3__AddTranslationResponse(soap, (_ns3__AddTranslationResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTo_ns3__AddTranslation:
		soap_serialize_PointerTo_ns3__AddTranslation(soap, (_ns3__AddTranslation *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons6__TranslateArrayResponse:
		soap_serialize_PointerToPointerTons6__TranslateArrayResponse(soap, (ns6__TranslateArrayResponse **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons6__TranslateArrayResponse:
		soap_serialize_PointerTons6__TranslateArrayResponse(soap, (ns6__TranslateArrayResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons6__GetTranslationsResponse:
		soap_serialize_PointerToPointerTons6__GetTranslationsResponse(soap, (ns6__GetTranslationsResponse **const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons6__Translation:
		soap_serialize_PointerToPointerTons6__Translation(soap, (ns6__Translation **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons6__Translation:
		soap_serialize_PointerTons6__Translation(soap, (ns6__Translation *const*)ptr);
		break;
	case SOAP_TYPE_PointerToPointerTons6__TranslationMatch:
		soap_serialize_PointerToPointerTons6__TranslationMatch(soap, (ns6__TranslationMatch **const*)ptr);
		break;
	case SOAP_TYPE_PointerTons6__TranslationMatch:
		soap_serialize_PointerTons6__TranslationMatch(soap, (ns6__TranslationMatch *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons6__ArrayOfTranslationMatch:
		soap_serialize_PointerTons6__ArrayOfTranslationMatch(soap, (ns6__ArrayOfTranslationMatch *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons6__ArrayOfTranslateArrayResponse:
		soap_serialize_PointerTons6__ArrayOfTranslateArrayResponse(soap, (ns6__ArrayOfTranslateArrayResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons6__ArrayOfGetTranslationsResponse:
		soap_serialize_PointerTons6__ArrayOfGetTranslationsResponse(soap, (ns6__ArrayOfGetTranslationsResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons6__ArrayOfTranslation:
		soap_serialize_PointerTons6__ArrayOfTranslation(soap, (ns6__ArrayOfTranslation *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons6__GetTranslationsResponse:
		soap_serialize_PointerTons6__GetTranslationsResponse(soap, (ns6__GetTranslationsResponse *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons6__TranslateOptions:
		soap_serialize_PointerTons6__TranslateOptions(soap, (ns6__TranslateOptions *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__ArrayOfstring:
		soap_serialize_PointerTons5__ArrayOfstring(soap, (ns5__ArrayOfstring *const*)ptr);
		break;
	case SOAP_TYPE_PointerTons5__ArrayOfint:
		soap_serialize_PointerTons5__ArrayOfint(soap, (ns5__ArrayOfint *const*)ptr);
		break;
	case SOAP_TYPE_PointerToint:
		soap_serialize_PointerToint(soap, (int *const*)ptr);
		break;
	case SOAP_TYPE_PointerTostd__wstring:
		soap_serialize_PointerTostd__wstring(soap, (std::wstring *const*)ptr);
		break;
	case SOAP_TYPE_PointerTounsignedByte:
		soap_serialize_PointerTounsignedByte(soap, (unsigned char *const*)ptr);
		break;
	case SOAP_TYPE__QName:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	case SOAP_TYPE_string:
		soap_serialize_string(soap, (char*const*)&ptr);
		break;
	}
}

#ifdef __cplusplus
}
#endif
#endif

SOAP_FMAC3 void * SOAP_FMAC4 soap_instantiate(struct soap *soap, int t, const char *type, const char *arrayType, size_t *n)
{
	switch (t)
	{
	case SOAP_TYPE_xsd__anyType:
		return (void*)soap_instantiate_xsd__anyType(soap, -1, type, arrayType, n);
	case SOAP_TYPE_std__wstring:
		return (void*)soap_instantiate_std__wstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__ID_:
		return (void*)soap_instantiate_xsd__ID_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__IDREF_:
		return (void*)soap_instantiate_xsd__IDREF_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__QName:
		return (void*)soap_instantiate_xsd__QName(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyURI_:
		return (void*)soap_instantiate_xsd__anyURI_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__base64Binary:
		return (void*)soap_instantiate_xsd__base64Binary(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__base64Binary_:
		return (void*)soap_instantiate_xsd__base64Binary_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__boolean:
		return (void*)soap_instantiate_xsd__boolean(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__byte_:
		return (void*)soap_instantiate_xsd__byte_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__dateTime:
		return (void*)soap_instantiate_xsd__dateTime(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__decimal_:
		return (void*)soap_instantiate_xsd__decimal_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__double:
		return (void*)soap_instantiate_xsd__double(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__duration_:
		return (void*)soap_instantiate_xsd__duration_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__float:
		return (void*)soap_instantiate_xsd__float(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__int:
		return (void*)soap_instantiate_xsd__int(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__long:
		return (void*)soap_instantiate_xsd__long(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__short:
		return (void*)soap_instantiate_xsd__short(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__string:
		return (void*)soap_instantiate_xsd__string(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedByte_:
		return (void*)soap_instantiate_xsd__unsignedByte_(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedInt:
		return (void*)soap_instantiate_xsd__unsignedInt(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedLong:
		return (void*)soap_instantiate_xsd__unsignedLong(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__unsignedShort:
		return (void*)soap_instantiate_xsd__unsignedShort(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__char__:
		return (void*)soap_instantiate_ns4__char__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__duration__:
		return (void*)soap_instantiate_ns4__duration__(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__guid__:
		return (void*)soap_instantiate_ns4__guid__(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__AddTranslation:
		return (void*)soap_instantiate__ns3__AddTranslation(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__AddTranslationResponse:
		return (void*)soap_instantiate__ns3__AddTranslationResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__BreakSentences:
		return (void*)soap_instantiate__ns3__BreakSentences(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__BreakSentencesResponse:
		return (void*)soap_instantiate__ns3__BreakSentencesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__Detect:
		return (void*)soap_instantiate__ns3__Detect(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__DetectResponse:
		return (void*)soap_instantiate__ns3__DetectResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__DetectArray:
		return (void*)soap_instantiate__ns3__DetectArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__DetectArrayResponse:
		return (void*)soap_instantiate__ns3__DetectArrayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__GetAppIdToken:
		return (void*)soap_instantiate__ns3__GetAppIdToken(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__GetAppIdTokenResponse:
		return (void*)soap_instantiate__ns3__GetAppIdTokenResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__GetLanguageNames:
		return (void*)soap_instantiate__ns3__GetLanguageNames(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__GetLanguageNamesResponse:
		return (void*)soap_instantiate__ns3__GetLanguageNamesResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__GetLanguagesForSpeak:
		return (void*)soap_instantiate__ns3__GetLanguagesForSpeak(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__GetLanguagesForSpeakResponse:
		return (void*)soap_instantiate__ns3__GetLanguagesForSpeakResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__GetLanguagesForTranslate:
		return (void*)soap_instantiate__ns3__GetLanguagesForTranslate(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__GetLanguagesForTranslateResponse:
		return (void*)soap_instantiate__ns3__GetLanguagesForTranslateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__GetTranslations:
		return (void*)soap_instantiate__ns3__GetTranslations(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__GetTranslationsResponse:
		return (void*)soap_instantiate__ns3__GetTranslationsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__Translate:
		return (void*)soap_instantiate__ns3__Translate(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__TranslateResponse:
		return (void*)soap_instantiate__ns3__TranslateResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__AddTranslationArray:
		return (void*)soap_instantiate__ns3__AddTranslationArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__AddTranslationArrayResponse:
		return (void*)soap_instantiate__ns3__AddTranslationArrayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__GetTranslationsArray:
		return (void*)soap_instantiate__ns3__GetTranslationsArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__GetTranslationsArrayResponse:
		return (void*)soap_instantiate__ns3__GetTranslationsArrayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__Speak:
		return (void*)soap_instantiate__ns3__Speak(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__SpeakResponse:
		return (void*)soap_instantiate__ns3__SpeakResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__TranslateArray:
		return (void*)soap_instantiate__ns3__TranslateArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE__ns3__TranslateArrayResponse:
		return (void*)soap_instantiate__ns3__TranslateArrayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__ArrayOfint:
		return (void*)soap_instantiate_ns5__ArrayOfint(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns5__ArrayOfstring:
		return (void*)soap_instantiate_ns5__ArrayOfstring(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns6__TranslateOptions:
		return (void*)soap_instantiate_ns6__TranslateOptions(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns6__GetTranslationsResponse:
		return (void*)soap_instantiate_ns6__GetTranslationsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns6__ArrayOfTranslationMatch:
		return (void*)soap_instantiate_ns6__ArrayOfTranslationMatch(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns6__TranslationMatch:
		return (void*)soap_instantiate_ns6__TranslationMatch(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns6__ArrayOfTranslation:
		return (void*)soap_instantiate_ns6__ArrayOfTranslation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns6__Translation:
		return (void*)soap_instantiate_ns6__Translation(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse:
		return (void*)soap_instantiate_ns6__ArrayOfGetTranslationsResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse:
		return (void*)soap_instantiate_ns6__ArrayOfTranslateArrayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns6__TranslateArrayResponse:
		return (void*)soap_instantiate_ns6__TranslateArrayResponse(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AddTranslation:
		return (void*)soap_instantiate___ns1__AddTranslation(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__BreakSentences:
		return (void*)soap_instantiate___ns1__BreakSentences(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Detect:
		return (void*)soap_instantiate___ns1__Detect(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__DetectArray:
		return (void*)soap_instantiate___ns1__DetectArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetAppIdToken:
		return (void*)soap_instantiate___ns1__GetAppIdToken(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLanguageNames:
		return (void*)soap_instantiate___ns1__GetLanguageNames(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLanguagesForSpeak:
		return (void*)soap_instantiate___ns1__GetLanguagesForSpeak(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetLanguagesForTranslate:
		return (void*)soap_instantiate___ns1__GetLanguagesForTranslate(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetTranslations:
		return (void*)soap_instantiate___ns1__GetTranslations(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Translate:
		return (void*)soap_instantiate___ns1__Translate(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__AddTranslationArray:
		return (void*)soap_instantiate___ns1__AddTranslationArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__GetTranslationsArray:
		return (void*)soap_instantiate___ns1__GetTranslationsArray(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__Speak:
		return (void*)soap_instantiate___ns1__Speak(soap, -1, type, arrayType, n);
	case SOAP_TYPE___ns1__TranslateArray:
		return (void*)soap_instantiate___ns1__TranslateArray(soap, -1, type, arrayType, n);
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Header:
		return (void*)soap_instantiate_SOAP_ENV__Header(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Code:
		return (void*)soap_instantiate_SOAP_ENV__Code(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Detail:
		return (void*)soap_instantiate_SOAP_ENV__Detail(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Reason:
		return (void*)soap_instantiate_SOAP_ENV__Reason(soap, -1, type, arrayType, n);
#endif
#ifndef WITH_NOGLOBAL
	case SOAP_TYPE_SOAP_ENV__Fault:
		return (void*)soap_instantiate_SOAP_ENV__Fault(soap, -1, type, arrayType, n);
#endif
	case SOAP_TYPE_xsd__ID:
		return (void*)soap_instantiate_xsd__ID(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__IDREF:
		return (void*)soap_instantiate_xsd__IDREF(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__anyURI:
		return (void*)soap_instantiate_xsd__anyURI(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__decimal:
		return (void*)soap_instantiate_xsd__decimal(soap, -1, type, arrayType, n);
	case SOAP_TYPE_xsd__duration:
		return (void*)soap_instantiate_xsd__duration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__duration:
		return (void*)soap_instantiate_ns4__duration(soap, -1, type, arrayType, n);
	case SOAP_TYPE_ns4__guid:
		return (void*)soap_instantiate_ns4__guid(soap, -1, type, arrayType, n);
	}
	return NULL;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_fdelete(struct soap_clist *p)
{	switch (p->type)
	{
	case SOAP_TYPE_xsd__anyType:
		if (p->size < 0)
			SOAP_DELETE((xsd__anyType*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__anyType*)p->ptr);
		break;
	case SOAP_TYPE_std__wstring:
		if (p->size < 0)
			SOAP_DELETE((std::wstring*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::wstring*)p->ptr);
		break;
	case SOAP_TYPE_xsd__ID_:
		if (p->size < 0)
			SOAP_DELETE((xsd__ID_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__ID_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__IDREF_:
		if (p->size < 0)
			SOAP_DELETE((xsd__IDREF_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__IDREF_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__QName:
		if (p->size < 0)
			SOAP_DELETE((xsd__QName*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__QName*)p->ptr);
		break;
	case SOAP_TYPE_xsd__anyURI_:
		if (p->size < 0)
			SOAP_DELETE((xsd__anyURI_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__anyURI_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__base64Binary:
		if (p->size < 0)
			SOAP_DELETE((xsd__base64Binary*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__base64Binary*)p->ptr);
		break;
	case SOAP_TYPE_xsd__base64Binary_:
		if (p->size < 0)
			SOAP_DELETE((xsd__base64Binary_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__base64Binary_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__boolean:
		if (p->size < 0)
			SOAP_DELETE((xsd__boolean*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__boolean*)p->ptr);
		break;
	case SOAP_TYPE_xsd__byte_:
		if (p->size < 0)
			SOAP_DELETE((xsd__byte_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__byte_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__dateTime:
		if (p->size < 0)
			SOAP_DELETE((xsd__dateTime*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__dateTime*)p->ptr);
		break;
	case SOAP_TYPE_xsd__decimal_:
		if (p->size < 0)
			SOAP_DELETE((xsd__decimal_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__decimal_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__double:
		if (p->size < 0)
			SOAP_DELETE((xsd__double*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__double*)p->ptr);
		break;
	case SOAP_TYPE_xsd__duration_:
		if (p->size < 0)
			SOAP_DELETE((xsd__duration_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__duration_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__float:
		if (p->size < 0)
			SOAP_DELETE((xsd__float*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__float*)p->ptr);
		break;
	case SOAP_TYPE_xsd__int:
		if (p->size < 0)
			SOAP_DELETE((xsd__int*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__int*)p->ptr);
		break;
	case SOAP_TYPE_xsd__long:
		if (p->size < 0)
			SOAP_DELETE((xsd__long*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__long*)p->ptr);
		break;
	case SOAP_TYPE_xsd__short:
		if (p->size < 0)
			SOAP_DELETE((xsd__short*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__short*)p->ptr);
		break;
	case SOAP_TYPE_xsd__string:
		if (p->size < 0)
			SOAP_DELETE((xsd__string*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__string*)p->ptr);
		break;
	case SOAP_TYPE_xsd__unsignedByte_:
		if (p->size < 0)
			SOAP_DELETE((xsd__unsignedByte_*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__unsignedByte_*)p->ptr);
		break;
	case SOAP_TYPE_xsd__unsignedInt:
		if (p->size < 0)
			SOAP_DELETE((xsd__unsignedInt*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__unsignedInt*)p->ptr);
		break;
	case SOAP_TYPE_xsd__unsignedLong:
		if (p->size < 0)
			SOAP_DELETE((xsd__unsignedLong*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__unsignedLong*)p->ptr);
		break;
	case SOAP_TYPE_xsd__unsignedShort:
		if (p->size < 0)
			SOAP_DELETE((xsd__unsignedShort*)p->ptr);
		else
			SOAP_DELETE_ARRAY((xsd__unsignedShort*)p->ptr);
		break;
	case SOAP_TYPE_ns4__char__:
		if (p->size < 0)
			SOAP_DELETE((ns4__char__*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns4__char__*)p->ptr);
		break;
	case SOAP_TYPE_ns4__duration__:
		if (p->size < 0)
			SOAP_DELETE((ns4__duration__*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns4__duration__*)p->ptr);
		break;
	case SOAP_TYPE_ns4__guid__:
		if (p->size < 0)
			SOAP_DELETE((ns4__guid__*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns4__guid__*)p->ptr);
		break;
	case SOAP_TYPE__ns3__AddTranslation:
		if (p->size < 0)
			SOAP_DELETE((_ns3__AddTranslation*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__AddTranslation*)p->ptr);
		break;
	case SOAP_TYPE__ns3__AddTranslationResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns3__AddTranslationResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__AddTranslationResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns3__BreakSentences:
		if (p->size < 0)
			SOAP_DELETE((_ns3__BreakSentences*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__BreakSentences*)p->ptr);
		break;
	case SOAP_TYPE__ns3__BreakSentencesResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns3__BreakSentencesResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__BreakSentencesResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns3__Detect:
		if (p->size < 0)
			SOAP_DELETE((_ns3__Detect*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__Detect*)p->ptr);
		break;
	case SOAP_TYPE__ns3__DetectResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns3__DetectResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__DetectResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns3__DetectArray:
		if (p->size < 0)
			SOAP_DELETE((_ns3__DetectArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__DetectArray*)p->ptr);
		break;
	case SOAP_TYPE__ns3__DetectArrayResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns3__DetectArrayResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__DetectArrayResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns3__GetAppIdToken:
		if (p->size < 0)
			SOAP_DELETE((_ns3__GetAppIdToken*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__GetAppIdToken*)p->ptr);
		break;
	case SOAP_TYPE__ns3__GetAppIdTokenResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns3__GetAppIdTokenResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__GetAppIdTokenResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns3__GetLanguageNames:
		if (p->size < 0)
			SOAP_DELETE((_ns3__GetLanguageNames*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__GetLanguageNames*)p->ptr);
		break;
	case SOAP_TYPE__ns3__GetLanguageNamesResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns3__GetLanguageNamesResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__GetLanguageNamesResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns3__GetLanguagesForSpeak:
		if (p->size < 0)
			SOAP_DELETE((_ns3__GetLanguagesForSpeak*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__GetLanguagesForSpeak*)p->ptr);
		break;
	case SOAP_TYPE__ns3__GetLanguagesForSpeakResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns3__GetLanguagesForSpeakResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__GetLanguagesForSpeakResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns3__GetLanguagesForTranslate:
		if (p->size < 0)
			SOAP_DELETE((_ns3__GetLanguagesForTranslate*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__GetLanguagesForTranslate*)p->ptr);
		break;
	case SOAP_TYPE__ns3__GetLanguagesForTranslateResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns3__GetLanguagesForTranslateResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__GetLanguagesForTranslateResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns3__GetTranslations:
		if (p->size < 0)
			SOAP_DELETE((_ns3__GetTranslations*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__GetTranslations*)p->ptr);
		break;
	case SOAP_TYPE__ns3__GetTranslationsResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns3__GetTranslationsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__GetTranslationsResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns3__Translate:
		if (p->size < 0)
			SOAP_DELETE((_ns3__Translate*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__Translate*)p->ptr);
		break;
	case SOAP_TYPE__ns3__TranslateResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns3__TranslateResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__TranslateResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns3__AddTranslationArray:
		if (p->size < 0)
			SOAP_DELETE((_ns3__AddTranslationArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__AddTranslationArray*)p->ptr);
		break;
	case SOAP_TYPE__ns3__AddTranslationArrayResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns3__AddTranslationArrayResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__AddTranslationArrayResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns3__GetTranslationsArray:
		if (p->size < 0)
			SOAP_DELETE((_ns3__GetTranslationsArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__GetTranslationsArray*)p->ptr);
		break;
	case SOAP_TYPE__ns3__GetTranslationsArrayResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns3__GetTranslationsArrayResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__GetTranslationsArrayResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns3__Speak:
		if (p->size < 0)
			SOAP_DELETE((_ns3__Speak*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__Speak*)p->ptr);
		break;
	case SOAP_TYPE__ns3__SpeakResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns3__SpeakResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__SpeakResponse*)p->ptr);
		break;
	case SOAP_TYPE__ns3__TranslateArray:
		if (p->size < 0)
			SOAP_DELETE((_ns3__TranslateArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__TranslateArray*)p->ptr);
		break;
	case SOAP_TYPE__ns3__TranslateArrayResponse:
		if (p->size < 0)
			SOAP_DELETE((_ns3__TranslateArrayResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((_ns3__TranslateArrayResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns5__ArrayOfint:
		if (p->size < 0)
			SOAP_DELETE((ns5__ArrayOfint*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns5__ArrayOfint*)p->ptr);
		break;
	case SOAP_TYPE_ns5__ArrayOfstring:
		if (p->size < 0)
			SOAP_DELETE((ns5__ArrayOfstring*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns5__ArrayOfstring*)p->ptr);
		break;
	case SOAP_TYPE_ns6__TranslateOptions:
		if (p->size < 0)
			SOAP_DELETE((ns6__TranslateOptions*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns6__TranslateOptions*)p->ptr);
		break;
	case SOAP_TYPE_ns6__GetTranslationsResponse:
		if (p->size < 0)
			SOAP_DELETE((ns6__GetTranslationsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns6__GetTranslationsResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns6__ArrayOfTranslationMatch:
		if (p->size < 0)
			SOAP_DELETE((ns6__ArrayOfTranslationMatch*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns6__ArrayOfTranslationMatch*)p->ptr);
		break;
	case SOAP_TYPE_ns6__TranslationMatch:
		if (p->size < 0)
			SOAP_DELETE((ns6__TranslationMatch*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns6__TranslationMatch*)p->ptr);
		break;
	case SOAP_TYPE_ns6__ArrayOfTranslation:
		if (p->size < 0)
			SOAP_DELETE((ns6__ArrayOfTranslation*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns6__ArrayOfTranslation*)p->ptr);
		break;
	case SOAP_TYPE_ns6__Translation:
		if (p->size < 0)
			SOAP_DELETE((ns6__Translation*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns6__Translation*)p->ptr);
		break;
	case SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse:
		if (p->size < 0)
			SOAP_DELETE((ns6__ArrayOfGetTranslationsResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns6__ArrayOfGetTranslationsResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse:
		if (p->size < 0)
			SOAP_DELETE((ns6__ArrayOfTranslateArrayResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns6__ArrayOfTranslateArrayResponse*)p->ptr);
		break;
	case SOAP_TYPE_ns6__TranslateArrayResponse:
		if (p->size < 0)
			SOAP_DELETE((ns6__TranslateArrayResponse*)p->ptr);
		else
			SOAP_DELETE_ARRAY((ns6__TranslateArrayResponse*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AddTranslation:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AddTranslation*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AddTranslation*)p->ptr);
		break;
	case SOAP_TYPE___ns1__BreakSentences:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__BreakSentences*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__BreakSentences*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Detect:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Detect*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Detect*)p->ptr);
		break;
	case SOAP_TYPE___ns1__DetectArray:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__DetectArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__DetectArray*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetAppIdToken:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetAppIdToken*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetAppIdToken*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLanguageNames:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLanguageNames*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLanguageNames*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLanguagesForSpeak:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLanguagesForSpeak*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLanguagesForSpeak*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetLanguagesForTranslate:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetLanguagesForTranslate*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetLanguagesForTranslate*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetTranslations:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetTranslations*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetTranslations*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Translate:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Translate*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Translate*)p->ptr);
		break;
	case SOAP_TYPE___ns1__AddTranslationArray:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__AddTranslationArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__AddTranslationArray*)p->ptr);
		break;
	case SOAP_TYPE___ns1__GetTranslationsArray:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__GetTranslationsArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__GetTranslationsArray*)p->ptr);
		break;
	case SOAP_TYPE___ns1__Speak:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__Speak*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__Speak*)p->ptr);
		break;
	case SOAP_TYPE___ns1__TranslateArray:
		if (p->size < 0)
			SOAP_DELETE((struct __ns1__TranslateArray*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct __ns1__TranslateArray*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Header:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Header*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Header*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Code:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Code*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Code*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Detail:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Detail*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Detail*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Reason:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Reason*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Reason*)p->ptr);
		break;
	case SOAP_TYPE_SOAP_ENV__Fault:
		if (p->size < 0)
			SOAP_DELETE((struct SOAP_ENV__Fault*)p->ptr);
		else
			SOAP_DELETE_ARRAY((struct SOAP_ENV__Fault*)p->ptr);
		break;
	case SOAP_TYPE_xsd__ID:
		if (p->size < 0)
			SOAP_DELETE((std::wstring*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::wstring*)p->ptr);
		break;
	case SOAP_TYPE_xsd__IDREF:
		if (p->size < 0)
			SOAP_DELETE((std::wstring*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::wstring*)p->ptr);
		break;
	case SOAP_TYPE_xsd__anyURI:
		if (p->size < 0)
			SOAP_DELETE((std::wstring*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::wstring*)p->ptr);
		break;
	case SOAP_TYPE_xsd__decimal:
		if (p->size < 0)
			SOAP_DELETE((std::wstring*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::wstring*)p->ptr);
		break;
	case SOAP_TYPE_xsd__duration:
		if (p->size < 0)
			SOAP_DELETE((std::wstring*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::wstring*)p->ptr);
		break;
	case SOAP_TYPE_ns4__duration:
		if (p->size < 0)
			SOAP_DELETE((std::wstring*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::wstring*)p->ptr);
		break;
	case SOAP_TYPE_ns4__guid:
		if (p->size < 0)
			SOAP_DELETE((std::wstring*)p->ptr);
		else
			SOAP_DELETE_ARRAY((std::wstring*)p->ptr);
		break;
	default:	return SOAP_ERR;
	}
	return SOAP_OK;
}

SOAP_FMAC3 void* SOAP_FMAC4 soap_class_id_enter(struct soap *soap, const char *id, void *p, int t, size_t n, const char *type, const char *arrayType)
{	return soap_id_enter(soap, id, p, t, n, 0, type, arrayType, soap_instantiate);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_xsd__byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_xsd__byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_xsd__byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__byte);
	if (soap_out_xsd__byte(soap, tag?tag:"xsd:byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_xsd__byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_byte(struct soap *soap, char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_byte
	*a = SOAP_DEFAULT_byte;
#else
	*a = (char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_byte(struct soap *soap, const char *tag, int id, const char *a, const char *type)
{
	return soap_outbyte(soap, tag, id, a, type, SOAP_TYPE_byte);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_in_byte(struct soap *soap, const char *tag, char *a, const char *type)
{	char *p;
	p = soap_inbyte(soap, tag, a, type, SOAP_TYPE_byte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_byte(struct soap *soap, const char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_byte);
	if (soap_out_byte(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char * SOAP_FMAC4 soap_get_byte(struct soap *soap, char *p, const char *tag, const char *type)
{
	if ((p = soap_in_byte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_short(struct soap *soap, short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_short
	*a = SOAP_DEFAULT_short;
#else
	*a = (short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_short(struct soap *soap, const char *tag, int id, const short *a, const char *type)
{
	return soap_outshort(soap, tag, id, a, type, SOAP_TYPE_short);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_in_short(struct soap *soap, const char *tag, short *a, const char *type)
{	short *p;
	p = soap_inshort(soap, tag, a, type, SOAP_TYPE_short);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_short(struct soap *soap, const short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_short);
	if (soap_out_short(soap, tag?tag:"short", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 short * SOAP_FMAC4 soap_get_short(struct soap *soap, short *p, const char *tag, const char *type)
{
	if ((p = soap_in_short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__char(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_ns4__char);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_ns4__char(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_ns4__char);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__char(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns4__char);
	if (soap_out_ns4__char(soap, tag?tag:"ns4:char", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_ns4__char(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__char(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_int(struct soap *soap, int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_int
	*a = SOAP_DEFAULT_int;
#else
	*a = (int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_int(struct soap *soap, const char *tag, int id, const int *a, const char *type)
{
	return soap_outint(soap, tag, id, a, type, SOAP_TYPE_int);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_in_int(struct soap *soap, const char *tag, int *a, const char *type)
{	int *p;
	p = soap_inint(soap, tag, a, type, SOAP_TYPE_int);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_int(struct soap *soap, const int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_int);
	if (soap_out_int(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int * SOAP_FMAC4 soap_get_int(struct soap *soap, int *p, const char *tag, const char *type)
{
	if ((p = soap_in_int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_LONG64(struct soap *soap, LONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_LONG64
	*a = SOAP_DEFAULT_LONG64;
#else
	*a = (LONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_LONG64(struct soap *soap, const char *tag, int id, const LONG64 *a, const char *type)
{
	return soap_outLONG64(soap, tag, id, a, type, SOAP_TYPE_LONG64);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_in_LONG64(struct soap *soap, const char *tag, LONG64 *a, const char *type)
{	LONG64 *p;
	p = soap_inLONG64(soap, tag, a, type, SOAP_TYPE_LONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_LONG64(struct soap *soap, const LONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_LONG64);
	if (soap_out_LONG64(soap, tag?tag:"long", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 LONG64 * SOAP_FMAC4 soap_get_LONG64(struct soap *soap, LONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_LONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_float(struct soap *soap, float *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_float
	*a = SOAP_DEFAULT_float;
#else
	*a = (float)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_float(struct soap *soap, const char *tag, int id, const float *a, const char *type)
{
	return soap_outfloat(soap, tag, id, a, type, SOAP_TYPE_float);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_in_float(struct soap *soap, const char *tag, float *a, const char *type)
{	float *p;
	p = soap_infloat(soap, tag, a, type, SOAP_TYPE_float);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_float(struct soap *soap, const float *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_float);
	if (soap_out_float(soap, tag?tag:"float", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 float * SOAP_FMAC4 soap_get_float(struct soap *soap, float *p, const char *tag, const char *type)
{
	if ((p = soap_in_float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_double(struct soap *soap, double *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_double
	*a = SOAP_DEFAULT_double;
#else
	*a = (double)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_double(struct soap *soap, const char *tag, int id, const double *a, const char *type)
{
	return soap_outdouble(soap, tag, id, a, type, SOAP_TYPE_double);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_in_double(struct soap *soap, const char *tag, double *a, const char *type)
{	double *p;
	p = soap_indouble(soap, tag, a, type, SOAP_TYPE_double);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_double(struct soap *soap, const double *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_double);
	if (soap_out_double(soap, tag?tag:"double", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 double * SOAP_FMAC4 soap_get_double(struct soap *soap, double *p, const char *tag, const char *type)
{
	if ((p = soap_in_double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_xsd__unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_xsd__unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_xsd__unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__unsignedByte);
	if (soap_out_xsd__unsignedByte(soap, tag?tag:"xsd:unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_xsd__unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedByte(struct soap *soap, unsigned char *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedByte
	*a = SOAP_DEFAULT_unsignedByte;
#else
	*a = (unsigned char)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedByte(struct soap *soap, const char *tag, int id, const unsigned char *a, const char *type)
{
	return soap_outunsignedByte(soap, tag, id, a, type, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_in_unsignedByte(struct soap *soap, const char *tag, unsigned char *a, const char *type)
{	unsigned char *p;
	p = soap_inunsignedByte(soap, tag, a, type, SOAP_TYPE_unsignedByte);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedByte(struct soap *soap, const unsigned char *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedByte);
	if (soap_out_unsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char * SOAP_FMAC4 soap_get_unsignedByte(struct soap *soap, unsigned char *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedShort(struct soap *soap, unsigned short *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedShort
	*a = SOAP_DEFAULT_unsignedShort;
#else
	*a = (unsigned short)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedShort(struct soap *soap, const char *tag, int id, const unsigned short *a, const char *type)
{
	return soap_outunsignedShort(soap, tag, id, a, type, SOAP_TYPE_unsignedShort);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_in_unsignedShort(struct soap *soap, const char *tag, unsigned short *a, const char *type)
{	unsigned short *p;
	p = soap_inunsignedShort(soap, tag, a, type, SOAP_TYPE_unsignedShort);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedShort(struct soap *soap, const unsigned short *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedShort);
	if (soap_out_unsignedShort(soap, tag?tag:"unsignedShort", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned short * SOAP_FMAC4 soap_get_unsignedShort(struct soap *soap, unsigned short *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedInt(struct soap *soap, unsigned int *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedInt
	*a = SOAP_DEFAULT_unsignedInt;
#else
	*a = (unsigned int)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedInt(struct soap *soap, const char *tag, int id, const unsigned int *a, const char *type)
{
	return soap_outunsignedInt(soap, tag, id, a, type, SOAP_TYPE_unsignedInt);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_in_unsignedInt(struct soap *soap, const char *tag, unsigned int *a, const char *type)
{	unsigned int *p;
	p = soap_inunsignedInt(soap, tag, a, type, SOAP_TYPE_unsignedInt);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedInt(struct soap *soap, const unsigned int *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedInt);
	if (soap_out_unsignedInt(soap, tag?tag:"unsignedInt", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned int * SOAP_FMAC4 soap_get_unsignedInt(struct soap *soap, unsigned int *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_unsignedLONG64(struct soap *soap, ULONG64 *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_unsignedLONG64
	*a = SOAP_DEFAULT_unsignedLONG64;
#else
	*a = (ULONG64)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_unsignedLONG64(struct soap *soap, const char *tag, int id, const ULONG64 *a, const char *type)
{
	return soap_outULONG64(soap, tag, id, a, type, SOAP_TYPE_unsignedLONG64);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_in_unsignedLONG64(struct soap *soap, const char *tag, ULONG64 *a, const char *type)
{	ULONG64 *p;
	p = soap_inULONG64(soap, tag, a, type, SOAP_TYPE_unsignedLONG64);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_unsignedLONG64(struct soap *soap, const ULONG64 *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_unsignedLONG64);
	if (soap_out_unsignedLONG64(soap, tag?tag:"unsignedLong", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ULONG64 * SOAP_FMAC4 soap_get_unsignedLONG64(struct soap *soap, ULONG64 *p, const char *tag, const char *type)
{
	if ((p = soap_in_unsignedLONG64(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_time(struct soap *soap, time_t *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_time
	*a = SOAP_DEFAULT_time;
#else
	*a = (time_t)0;
#endif
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_time(struct soap *soap, const char *tag, int id, const time_t *a, const char *type)
{
	return soap_outdateTime(soap, tag, id, a, type, SOAP_TYPE_time);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_in_time(struct soap *soap, const char *tag, time_t *a, const char *type)
{	time_t *p;
	p = soap_indateTime(soap, tag, a, type, SOAP_TYPE_time);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_time(struct soap *soap, const time_t *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_time);
	if (soap_out_time(soap, tag?tag:"dateTime", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 time_t * SOAP_FMAC4 soap_get_time(struct soap *soap, time_t *p, const char *tag, const char *type)
{
	if ((p = soap_in_time(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_bool(struct soap *soap, bool *a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_bool
	*a = SOAP_DEFAULT_bool;
#else
	*a = (bool)0;
#endif
}

static const struct soap_code_map soap_codes_bool[] =
{	{ (long)false, "false" },
	{ (long)true, "true" },
	{ 0, NULL }
};

SOAP_FMAC3S const char* SOAP_FMAC4S soap_bool2s(struct soap *soap, bool n)
{
	(void)soap; /* appease -Wall -Werror */
return soap_code_str(soap_codes_bool, n!=0);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_bool(struct soap *soap, const char *tag, int id, const bool *a, const char *type)
{	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_bool), type) || soap_send(soap, soap_bool2s(soap, *a)))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3S int SOAP_FMAC4S soap_s2bool(struct soap *soap, const char *s, bool *a)
{
	const struct soap_code_map *map;
	if (!s)
		return soap->error;
	map = soap_code(soap_codes_bool, s);
	if (map)
		*a = (bool)(map->code != 0);
	else
	{	long n;
		if (soap_s2long(soap, s, &n) || n < 0 || n > 1)
			return soap->error = SOAP_TYPE;
		*a = (bool)(n != 0);
	}
	return SOAP_OK;
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_in_bool(struct soap *soap, const char *tag, bool *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":boolean"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (bool *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_bool, sizeof(bool), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	if (soap->body && !*soap->href)
	{	if (!a || soap_s2bool(soap, soap_value(soap), a) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (bool *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_bool, 0, sizeof(bool), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_bool(struct soap *soap, const bool *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_bool);
	if (soap_out_bool(soap, tag?tag:"boolean", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 bool * SOAP_FMAC4 soap_get_bool(struct soap *soap, bool *p, const char *tag, const char *type)
{
	if ((p = soap_in_bool(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns4__guid__::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns4__guid(soap, &this->ns4__guid__::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns4__guid__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_ns4__guid(soap, &this->ns4__guid__::__item);
	/* transient soap skipped */
}

int ns4__guid__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__guid__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__guid__(struct soap *soap, const char *tag, int id, const ns4__guid__ *a, const char *type)
{
	return soap_out_ns4__guid(soap, tag, id, &(a->ns4__guid__::__item), "ns4:guid");
}

void *ns4__guid__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__guid__(soap, tag, this, type);
}

SOAP_FMAC3 ns4__guid__ * SOAP_FMAC4 soap_in_ns4__guid__(struct soap *soap, const char *tag, ns4__guid__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns4__guid__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__guid__, sizeof(ns4__guid__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns4__guid__)
			return (ns4__guid__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_ns4__guid(soap, tag, &(a->ns4__guid__::__item), "ns4:guid"))
		return NULL;
	return a;
}

int ns4__guid__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns4__guid__);
	if (this->soap_out(soap, tag?tag:"ns4:guid", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__guid__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__guid__(soap, this, tag, type);
}

SOAP_FMAC3 ns4__guid__ * SOAP_FMAC4 soap_get_ns4__guid__(struct soap *soap, ns4__guid__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__guid__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns4__guid__ * SOAP_FMAC2 soap_instantiate_ns4__guid__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__guid__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns4__guid__, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns4__guid__);
		if (size)
			*size = sizeof(ns4__guid__);
		((ns4__guid__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns4__guid__[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns4__guid__);
		for (int i = 0; i < n; i++)
			((ns4__guid__*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns4__guid__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__guid__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns4__guid__ %p -> %p\n", q, p));
	*(ns4__guid__*)p = *(ns4__guid__*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__guid(struct soap *soap, const char *tag, int id, const std::wstring *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns4__guid), type) || soap_wstring_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_ns4__guid(struct soap *soap, const char *tag, std::wstring *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__wstring(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	wchar_t *t;
		s = (std::wstring*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns4__guid, sizeof(std::wstring), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_wstring_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::wstring*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns4__guid, sizeof(std::wstring), soap->type, soap->arrayType), 0, SOAP_TYPE_ns4__guid, 0, sizeof(std::wstring), 0, soap_copy_ns4__guid);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__guid(struct soap *soap, const std::wstring *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns4__guid);
	if (soap_out_ns4__guid(soap, tag?tag:"ns4:guid", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_ns4__guid(struct soap *soap, std::wstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__guid(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns4__duration__::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns4__duration(soap, &this->ns4__duration__::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns4__duration__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_ns4__duration(soap, &this->ns4__duration__::__item);
	/* transient soap skipped */
}

int ns4__duration__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__duration__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__duration__(struct soap *soap, const char *tag, int id, const ns4__duration__ *a, const char *type)
{
	return soap_out_ns4__duration(soap, tag, id, &(a->ns4__duration__::__item), "ns4:duration");
}

void *ns4__duration__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__duration__(soap, tag, this, type);
}

SOAP_FMAC3 ns4__duration__ * SOAP_FMAC4 soap_in_ns4__duration__(struct soap *soap, const char *tag, ns4__duration__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns4__duration__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__duration__, sizeof(ns4__duration__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns4__duration__)
			return (ns4__duration__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_ns4__duration(soap, tag, &(a->ns4__duration__::__item), "ns4:duration"))
		return NULL;
	return a;
}

int ns4__duration__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns4__duration__);
	if (this->soap_out(soap, tag?tag:"ns4:duration", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__duration__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__duration__(soap, this, tag, type);
}

SOAP_FMAC3 ns4__duration__ * SOAP_FMAC4 soap_get_ns4__duration__(struct soap *soap, ns4__duration__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__duration__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns4__duration__ * SOAP_FMAC2 soap_instantiate_ns4__duration__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__duration__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns4__duration__, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns4__duration__);
		if (size)
			*size = sizeof(ns4__duration__);
		((ns4__duration__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns4__duration__[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns4__duration__);
		for (int i = 0; i < n; i++)
			((ns4__duration__*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns4__duration__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__duration__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns4__duration__ %p -> %p\n", q, p));
	*(ns4__duration__*)p = *(ns4__duration__*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__duration(struct soap *soap, const char *tag, int id, const std::wstring *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_ns4__duration), type) || soap_wstring_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_ns4__duration(struct soap *soap, const char *tag, std::wstring *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__wstring(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	wchar_t *t;
		s = (std::wstring*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns4__duration, sizeof(std::wstring), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_wstring_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::wstring*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_ns4__duration, sizeof(std::wstring), soap->type, soap->arrayType), 0, SOAP_TYPE_ns4__duration, 0, sizeof(std::wstring), 0, soap_copy_ns4__duration);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_ns4__duration(struct soap *soap, const std::wstring *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_ns4__duration);
	if (soap_out_ns4__duration(soap, tag?tag:"ns4:duration", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_ns4__duration(struct soap *soap, std::wstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__duration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void ns4__char__::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_ns4__char(soap, &this->ns4__char__::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns4__char__::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int ns4__char__::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns4__char__(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns4__char__(struct soap *soap, const char *tag, int id, const ns4__char__ *a, const char *type)
{
	return soap_out_ns4__char(soap, tag, id, &(a->ns4__char__::__item), "ns4:char");
}

void *ns4__char__::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns4__char__(soap, tag, this, type);
}

SOAP_FMAC3 ns4__char__ * SOAP_FMAC4 soap_in_ns4__char__(struct soap *soap, const char *tag, ns4__char__ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (ns4__char__ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns4__char__, sizeof(ns4__char__), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns4__char__)
			return (ns4__char__ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_ns4__char(soap, tag, &(a->ns4__char__::__item), "ns4:char"))
		return NULL;
	return a;
}

int ns4__char__::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns4__char__);
	if (this->soap_out(soap, tag?tag:"ns4:char", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns4__char__::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns4__char__(soap, this, tag, type);
}

SOAP_FMAC3 ns4__char__ * SOAP_FMAC4 soap_get_ns4__char__(struct soap *soap, ns4__char__ *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns4__char__(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns4__char__ * SOAP_FMAC2 soap_instantiate_ns4__char__(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns4__char__(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns4__char__, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns4__char__);
		if (size)
			*size = sizeof(ns4__char__);
		((ns4__char__*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns4__char__[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns4__char__);
		for (int i = 0; i < n; i++)
			((ns4__char__*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns4__char__*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns4__char__(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns4__char__ %p -> %p\n", q, p));
	*(ns4__char__*)p = *(ns4__char__*)q;
}

void ns6__TranslateArrayResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns6__TranslateArrayResponse::Error = NULL;
	this->ns6__TranslateArrayResponse::From = NULL;
	this->ns6__TranslateArrayResponse::OriginalTextSentenceLengths = NULL;
	this->ns6__TranslateArrayResponse::State = NULL;
	this->ns6__TranslateArrayResponse::TranslatedText = NULL;
	this->ns6__TranslateArrayResponse::TranslatedTextSentenceLengths = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns6__TranslateArrayResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->ns6__TranslateArrayResponse::Error);
	soap_serialize_PointerTostd__wstring(soap, &this->ns6__TranslateArrayResponse::From);
	soap_serialize_PointerTons5__ArrayOfint(soap, &this->ns6__TranslateArrayResponse::OriginalTextSentenceLengths);
	soap_serialize_PointerTostd__wstring(soap, &this->ns6__TranslateArrayResponse::State);
	soap_serialize_PointerTostd__wstring(soap, &this->ns6__TranslateArrayResponse::TranslatedText);
	soap_serialize_PointerTons5__ArrayOfint(soap, &this->ns6__TranslateArrayResponse::TranslatedTextSentenceLengths);
	/* transient soap skipped */
}

int ns6__TranslateArrayResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns6__TranslateArrayResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__TranslateArrayResponse(struct soap *soap, const char *tag, int id, const ns6__TranslateArrayResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns6__TranslateArrayResponse), "ns6:TranslateArrayResponse"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTostd__wstring(soap, "ns6:Error", -1, &(a->ns6__TranslateArrayResponse::Error), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns6:From", -1, &(a->ns6__TranslateArrayResponse::From), ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfint(soap, "ns6:OriginalTextSentenceLengths", -1, &(a->ns6__TranslateArrayResponse::OriginalTextSentenceLengths), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns6:State", -1, &(a->ns6__TranslateArrayResponse::State), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns6:TranslatedText", -1, &(a->ns6__TranslateArrayResponse::TranslatedText), ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfint(soap, "ns6:TranslatedTextSentenceLengths", -1, &(a->ns6__TranslateArrayResponse::TranslatedTextSentenceLengths), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns6__TranslateArrayResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns6__TranslateArrayResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns6__TranslateArrayResponse * SOAP_FMAC4 soap_in_ns6__TranslateArrayResponse(struct soap *soap, const char *tag, ns6__TranslateArrayResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns6__TranslateArrayResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns6__TranslateArrayResponse, sizeof(ns6__TranslateArrayResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns6__TranslateArrayResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns6__TranslateArrayResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	size_t soap_flag_Error1 = 1;
	size_t soap_flag_From1 = 1;
	size_t soap_flag_OriginalTextSentenceLengths1 = 1;
	size_t soap_flag_State1 = 1;
	size_t soap_flag_TranslatedText1 = 1;
	size_t soap_flag_TranslatedTextSentenceLengths1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Error1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns6:Error", &(a->ns6__TranslateArrayResponse::Error), "xsd:string"))
				{	soap_flag_Error1--;
					continue;
				}
			if (soap_flag_From1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns6:From", &(a->ns6__TranslateArrayResponse::From), "xsd:string"))
				{	soap_flag_From1--;
					continue;
				}
			if (soap_flag_OriginalTextSentenceLengths1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfint(soap, "ns6:OriginalTextSentenceLengths", &(a->ns6__TranslateArrayResponse::OriginalTextSentenceLengths), "ns5:ArrayOfint"))
				{	soap_flag_OriginalTextSentenceLengths1--;
					continue;
				}
			if (soap_flag_State1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns6:State", &(a->ns6__TranslateArrayResponse::State), "xsd:string"))
				{	soap_flag_State1--;
					continue;
				}
			if (soap_flag_TranslatedText1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns6:TranslatedText", &(a->ns6__TranslateArrayResponse::TranslatedText), "xsd:string"))
				{	soap_flag_TranslatedText1--;
					continue;
				}
			if (soap_flag_TranslatedTextSentenceLengths1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfint(soap, "ns6:TranslatedTextSentenceLengths", &(a->ns6__TranslateArrayResponse::TranslatedTextSentenceLengths), "ns5:ArrayOfint"))
				{	soap_flag_TranslatedTextSentenceLengths1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns6__TranslateArrayResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns6__TranslateArrayResponse, 0, sizeof(ns6__TranslateArrayResponse), 0, soap_copy_ns6__TranslateArrayResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns6__TranslateArrayResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns6__TranslateArrayResponse);
	if (this->soap_out(soap, tag?tag:"ns6:TranslateArrayResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns6__TranslateArrayResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns6__TranslateArrayResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns6__TranslateArrayResponse * SOAP_FMAC4 soap_get_ns6__TranslateArrayResponse(struct soap *soap, ns6__TranslateArrayResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns6__TranslateArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns6__TranslateArrayResponse * SOAP_FMAC2 soap_instantiate_ns6__TranslateArrayResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns6__TranslateArrayResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns6__TranslateArrayResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns6__TranslateArrayResponse);
		if (size)
			*size = sizeof(ns6__TranslateArrayResponse);
		((ns6__TranslateArrayResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns6__TranslateArrayResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns6__TranslateArrayResponse);
		for (int i = 0; i < n; i++)
			((ns6__TranslateArrayResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns6__TranslateArrayResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__TranslateArrayResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns6__TranslateArrayResponse %p -> %p\n", q, p));
	*(ns6__TranslateArrayResponse*)p = *(ns6__TranslateArrayResponse*)q;
}

void ns6__ArrayOfTranslateArrayResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns6__ArrayOfTranslateArrayResponse::__sizeTranslateArrayResponse = 0;
	this->ns6__ArrayOfTranslateArrayResponse::TranslateArrayResponse = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns6__ArrayOfTranslateArrayResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->ns6__ArrayOfTranslateArrayResponse::TranslateArrayResponse)
	{	int i;
		for (i = 0; i < this->ns6__ArrayOfTranslateArrayResponse::__sizeTranslateArrayResponse; i++)
		{
			soap_serialize_PointerTons6__TranslateArrayResponse(soap, this->ns6__ArrayOfTranslateArrayResponse::TranslateArrayResponse + i);
		}
	}
	/* transient soap skipped */
}

int ns6__ArrayOfTranslateArrayResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns6__ArrayOfTranslateArrayResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__ArrayOfTranslateArrayResponse(struct soap *soap, const char *tag, int id, const ns6__ArrayOfTranslateArrayResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse), "ns6:ArrayOfTranslateArrayResponse"))
		return soap->error;
	/* transient soap skipped */
	if (a->ns6__ArrayOfTranslateArrayResponse::TranslateArrayResponse)
	{	int i;
		for (i = 0; i < a->ns6__ArrayOfTranslateArrayResponse::__sizeTranslateArrayResponse; i++)
			if (soap_out_PointerTons6__TranslateArrayResponse(soap, "ns6:TranslateArrayResponse", -1, a->ns6__ArrayOfTranslateArrayResponse::TranslateArrayResponse + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

void *ns6__ArrayOfTranslateArrayResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns6__ArrayOfTranslateArrayResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns6__ArrayOfTranslateArrayResponse * SOAP_FMAC4 soap_in_ns6__ArrayOfTranslateArrayResponse(struct soap *soap, const char *tag, ns6__ArrayOfTranslateArrayResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns6__ArrayOfTranslateArrayResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse, sizeof(ns6__ArrayOfTranslateArrayResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns6__ArrayOfTranslateArrayResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	struct soap_blist *soap_blist_TranslateArrayResponse1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ns6:TranslateArrayResponse", 1, NULL))
			{	if (a->ns6__ArrayOfTranslateArrayResponse::TranslateArrayResponse == NULL)
				{	if (soap_blist_TranslateArrayResponse1 == NULL)
						soap_blist_TranslateArrayResponse1 = soap_new_block(soap);
					a->ns6__ArrayOfTranslateArrayResponse::TranslateArrayResponse = (ns6__TranslateArrayResponse **)soap_push_block(soap, soap_blist_TranslateArrayResponse1, sizeof(ns6__TranslateArrayResponse *));
					if (a->ns6__ArrayOfTranslateArrayResponse::TranslateArrayResponse == NULL)
						return NULL;
					*a->ns6__ArrayOfTranslateArrayResponse::TranslateArrayResponse = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons6__TranslateArrayResponse(soap, "ns6:TranslateArrayResponse", a->ns6__ArrayOfTranslateArrayResponse::TranslateArrayResponse, "ns6:TranslateArrayResponse"))
				{	a->ns6__ArrayOfTranslateArrayResponse::__sizeTranslateArrayResponse++;
					a->ns6__ArrayOfTranslateArrayResponse::TranslateArrayResponse = NULL;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns6__ArrayOfTranslateArrayResponse::TranslateArrayResponse)
			soap_pop_block(soap, soap_blist_TranslateArrayResponse1);
		if (a->ns6__ArrayOfTranslateArrayResponse::__sizeTranslateArrayResponse)
			a->ns6__ArrayOfTranslateArrayResponse::TranslateArrayResponse = (ns6__TranslateArrayResponse **)soap_save_block(soap, soap_blist_TranslateArrayResponse1, NULL, 1);
		else
		{	a->ns6__ArrayOfTranslateArrayResponse::TranslateArrayResponse = NULL;
			if (soap_blist_TranslateArrayResponse1)
				soap_end_block(soap, soap_blist_TranslateArrayResponse1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns6__ArrayOfTranslateArrayResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse, 0, sizeof(ns6__ArrayOfTranslateArrayResponse), 0, soap_copy_ns6__ArrayOfTranslateArrayResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns6__ArrayOfTranslateArrayResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse);
	if (this->soap_out(soap, tag?tag:"ns6:ArrayOfTranslateArrayResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns6__ArrayOfTranslateArrayResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns6__ArrayOfTranslateArrayResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns6__ArrayOfTranslateArrayResponse * SOAP_FMAC4 soap_get_ns6__ArrayOfTranslateArrayResponse(struct soap *soap, ns6__ArrayOfTranslateArrayResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns6__ArrayOfTranslateArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns6__ArrayOfTranslateArrayResponse * SOAP_FMAC2 soap_instantiate_ns6__ArrayOfTranslateArrayResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns6__ArrayOfTranslateArrayResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns6__ArrayOfTranslateArrayResponse);
		if (size)
			*size = sizeof(ns6__ArrayOfTranslateArrayResponse);
		((ns6__ArrayOfTranslateArrayResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns6__ArrayOfTranslateArrayResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns6__ArrayOfTranslateArrayResponse);
		for (int i = 0; i < n; i++)
			((ns6__ArrayOfTranslateArrayResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns6__ArrayOfTranslateArrayResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__ArrayOfTranslateArrayResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns6__ArrayOfTranslateArrayResponse %p -> %p\n", q, p));
	*(ns6__ArrayOfTranslateArrayResponse*)p = *(ns6__ArrayOfTranslateArrayResponse*)q;
}

void ns6__ArrayOfGetTranslationsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns6__ArrayOfGetTranslationsResponse::__sizeGetTranslationsResponse = 0;
	this->ns6__ArrayOfGetTranslationsResponse::GetTranslationsResponse = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns6__ArrayOfGetTranslationsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->ns6__ArrayOfGetTranslationsResponse::GetTranslationsResponse)
	{	int i;
		for (i = 0; i < this->ns6__ArrayOfGetTranslationsResponse::__sizeGetTranslationsResponse; i++)
		{
			soap_serialize_PointerTons6__GetTranslationsResponse(soap, this->ns6__ArrayOfGetTranslationsResponse::GetTranslationsResponse + i);
		}
	}
	/* transient soap skipped */
}

int ns6__ArrayOfGetTranslationsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns6__ArrayOfGetTranslationsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__ArrayOfGetTranslationsResponse(struct soap *soap, const char *tag, int id, const ns6__ArrayOfGetTranslationsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse), "ns6:ArrayOfGetTranslationsResponse"))
		return soap->error;
	/* transient soap skipped */
	if (a->ns6__ArrayOfGetTranslationsResponse::GetTranslationsResponse)
	{	int i;
		for (i = 0; i < a->ns6__ArrayOfGetTranslationsResponse::__sizeGetTranslationsResponse; i++)
			if (soap_out_PointerTons6__GetTranslationsResponse(soap, "ns6:GetTranslationsResponse", -1, a->ns6__ArrayOfGetTranslationsResponse::GetTranslationsResponse + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

void *ns6__ArrayOfGetTranslationsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns6__ArrayOfGetTranslationsResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns6__ArrayOfGetTranslationsResponse * SOAP_FMAC4 soap_in_ns6__ArrayOfGetTranslationsResponse(struct soap *soap, const char *tag, ns6__ArrayOfGetTranslationsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns6__ArrayOfGetTranslationsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse, sizeof(ns6__ArrayOfGetTranslationsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns6__ArrayOfGetTranslationsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	struct soap_blist *soap_blist_GetTranslationsResponse1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ns6:GetTranslationsResponse", 1, NULL))
			{	if (a->ns6__ArrayOfGetTranslationsResponse::GetTranslationsResponse == NULL)
				{	if (soap_blist_GetTranslationsResponse1 == NULL)
						soap_blist_GetTranslationsResponse1 = soap_new_block(soap);
					a->ns6__ArrayOfGetTranslationsResponse::GetTranslationsResponse = (ns6__GetTranslationsResponse **)soap_push_block(soap, soap_blist_GetTranslationsResponse1, sizeof(ns6__GetTranslationsResponse *));
					if (a->ns6__ArrayOfGetTranslationsResponse::GetTranslationsResponse == NULL)
						return NULL;
					*a->ns6__ArrayOfGetTranslationsResponse::GetTranslationsResponse = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons6__GetTranslationsResponse(soap, "ns6:GetTranslationsResponse", a->ns6__ArrayOfGetTranslationsResponse::GetTranslationsResponse, "ns6:GetTranslationsResponse"))
				{	a->ns6__ArrayOfGetTranslationsResponse::__sizeGetTranslationsResponse++;
					a->ns6__ArrayOfGetTranslationsResponse::GetTranslationsResponse = NULL;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns6__ArrayOfGetTranslationsResponse::GetTranslationsResponse)
			soap_pop_block(soap, soap_blist_GetTranslationsResponse1);
		if (a->ns6__ArrayOfGetTranslationsResponse::__sizeGetTranslationsResponse)
			a->ns6__ArrayOfGetTranslationsResponse::GetTranslationsResponse = (ns6__GetTranslationsResponse **)soap_save_block(soap, soap_blist_GetTranslationsResponse1, NULL, 1);
		else
		{	a->ns6__ArrayOfGetTranslationsResponse::GetTranslationsResponse = NULL;
			if (soap_blist_GetTranslationsResponse1)
				soap_end_block(soap, soap_blist_GetTranslationsResponse1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns6__ArrayOfGetTranslationsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse, 0, sizeof(ns6__ArrayOfGetTranslationsResponse), 0, soap_copy_ns6__ArrayOfGetTranslationsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns6__ArrayOfGetTranslationsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse);
	if (this->soap_out(soap, tag?tag:"ns6:ArrayOfGetTranslationsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns6__ArrayOfGetTranslationsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns6__ArrayOfGetTranslationsResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns6__ArrayOfGetTranslationsResponse * SOAP_FMAC4 soap_get_ns6__ArrayOfGetTranslationsResponse(struct soap *soap, ns6__ArrayOfGetTranslationsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns6__ArrayOfGetTranslationsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns6__ArrayOfGetTranslationsResponse * SOAP_FMAC2 soap_instantiate_ns6__ArrayOfGetTranslationsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns6__ArrayOfGetTranslationsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns6__ArrayOfGetTranslationsResponse);
		if (size)
			*size = sizeof(ns6__ArrayOfGetTranslationsResponse);
		((ns6__ArrayOfGetTranslationsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns6__ArrayOfGetTranslationsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns6__ArrayOfGetTranslationsResponse);
		for (int i = 0; i < n; i++)
			((ns6__ArrayOfGetTranslationsResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns6__ArrayOfGetTranslationsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__ArrayOfGetTranslationsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns6__ArrayOfGetTranslationsResponse %p -> %p\n", q, p));
	*(ns6__ArrayOfGetTranslationsResponse*)p = *(ns6__ArrayOfGetTranslationsResponse*)q;
}

void ns6__Translation::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns6__Translation::OriginalText = NULL;
	this->ns6__Translation::Rating = NULL;
	this->ns6__Translation::Sequence = NULL;
	this->ns6__Translation::TranslatedText = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns6__Translation::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->ns6__Translation::OriginalText);
	soap_serialize_PointerToint(soap, &this->ns6__Translation::Rating);
	soap_serialize_PointerToint(soap, &this->ns6__Translation::Sequence);
	soap_serialize_PointerTostd__wstring(soap, &this->ns6__Translation::TranslatedText);
	/* transient soap skipped */
}

int ns6__Translation::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns6__Translation(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__Translation(struct soap *soap, const char *tag, int id, const ns6__Translation *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns6__Translation), "ns6:Translation"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTostd__wstring(soap, "ns6:OriginalText", -1, &(a->ns6__Translation::OriginalText), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns6:Rating", -1, &(a->ns6__Translation::Rating), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns6:Sequence", -1, &(a->ns6__Translation::Sequence), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns6:TranslatedText", -1, &(a->ns6__Translation::TranslatedText), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns6__Translation::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns6__Translation(soap, tag, this, type);
}

SOAP_FMAC3 ns6__Translation * SOAP_FMAC4 soap_in_ns6__Translation(struct soap *soap, const char *tag, ns6__Translation *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns6__Translation *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns6__Translation, sizeof(ns6__Translation), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns6__Translation)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns6__Translation *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	size_t soap_flag_OriginalText1 = 1;
	size_t soap_flag_Rating1 = 1;
	size_t soap_flag_Sequence1 = 1;
	size_t soap_flag_TranslatedText1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_OriginalText1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns6:OriginalText", &(a->ns6__Translation::OriginalText), "xsd:string"))
				{	soap_flag_OriginalText1--;
					continue;
				}
			if (soap_flag_Rating1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns6:Rating", &(a->ns6__Translation::Rating), "xsd:int"))
				{	soap_flag_Rating1--;
					continue;
				}
			if (soap_flag_Sequence1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns6:Sequence", &(a->ns6__Translation::Sequence), "xsd:int"))
				{	soap_flag_Sequence1--;
					continue;
				}
			if (soap_flag_TranslatedText1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns6:TranslatedText", &(a->ns6__Translation::TranslatedText), "xsd:string"))
				{	soap_flag_TranslatedText1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns6__Translation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns6__Translation, 0, sizeof(ns6__Translation), 0, soap_copy_ns6__Translation);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns6__Translation::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns6__Translation);
	if (this->soap_out(soap, tag?tag:"ns6:Translation", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns6__Translation::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns6__Translation(soap, this, tag, type);
}

SOAP_FMAC3 ns6__Translation * SOAP_FMAC4 soap_get_ns6__Translation(struct soap *soap, ns6__Translation *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns6__Translation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns6__Translation * SOAP_FMAC2 soap_instantiate_ns6__Translation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns6__Translation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns6__Translation, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns6__Translation);
		if (size)
			*size = sizeof(ns6__Translation);
		((ns6__Translation*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns6__Translation[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns6__Translation);
		for (int i = 0; i < n; i++)
			((ns6__Translation*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns6__Translation*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__Translation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns6__Translation %p -> %p\n", q, p));
	*(ns6__Translation*)p = *(ns6__Translation*)q;
}

void ns6__ArrayOfTranslation::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns6__ArrayOfTranslation::__sizeTranslation = 0;
	this->ns6__ArrayOfTranslation::Translation = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns6__ArrayOfTranslation::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->ns6__ArrayOfTranslation::Translation)
	{	int i;
		for (i = 0; i < this->ns6__ArrayOfTranslation::__sizeTranslation; i++)
		{
			soap_serialize_PointerTons6__Translation(soap, this->ns6__ArrayOfTranslation::Translation + i);
		}
	}
	/* transient soap skipped */
}

int ns6__ArrayOfTranslation::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns6__ArrayOfTranslation(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__ArrayOfTranslation(struct soap *soap, const char *tag, int id, const ns6__ArrayOfTranslation *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns6__ArrayOfTranslation), "ns6:ArrayOfTranslation"))
		return soap->error;
	/* transient soap skipped */
	if (a->ns6__ArrayOfTranslation::Translation)
	{	int i;
		for (i = 0; i < a->ns6__ArrayOfTranslation::__sizeTranslation; i++)
			if (soap_out_PointerTons6__Translation(soap, "ns6:Translation", -1, a->ns6__ArrayOfTranslation::Translation + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

void *ns6__ArrayOfTranslation::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns6__ArrayOfTranslation(soap, tag, this, type);
}

SOAP_FMAC3 ns6__ArrayOfTranslation * SOAP_FMAC4 soap_in_ns6__ArrayOfTranslation(struct soap *soap, const char *tag, ns6__ArrayOfTranslation *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns6__ArrayOfTranslation *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns6__ArrayOfTranslation, sizeof(ns6__ArrayOfTranslation), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns6__ArrayOfTranslation)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns6__ArrayOfTranslation *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	struct soap_blist *soap_blist_Translation1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ns6:Translation", 1, NULL))
			{	if (a->ns6__ArrayOfTranslation::Translation == NULL)
				{	if (soap_blist_Translation1 == NULL)
						soap_blist_Translation1 = soap_new_block(soap);
					a->ns6__ArrayOfTranslation::Translation = (ns6__Translation **)soap_push_block(soap, soap_blist_Translation1, sizeof(ns6__Translation *));
					if (a->ns6__ArrayOfTranslation::Translation == NULL)
						return NULL;
					*a->ns6__ArrayOfTranslation::Translation = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons6__Translation(soap, "ns6:Translation", a->ns6__ArrayOfTranslation::Translation, "ns6:Translation"))
				{	a->ns6__ArrayOfTranslation::__sizeTranslation++;
					a->ns6__ArrayOfTranslation::Translation = NULL;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns6__ArrayOfTranslation::Translation)
			soap_pop_block(soap, soap_blist_Translation1);
		if (a->ns6__ArrayOfTranslation::__sizeTranslation)
			a->ns6__ArrayOfTranslation::Translation = (ns6__Translation **)soap_save_block(soap, soap_blist_Translation1, NULL, 1);
		else
		{	a->ns6__ArrayOfTranslation::Translation = NULL;
			if (soap_blist_Translation1)
				soap_end_block(soap, soap_blist_Translation1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns6__ArrayOfTranslation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns6__ArrayOfTranslation, 0, sizeof(ns6__ArrayOfTranslation), 0, soap_copy_ns6__ArrayOfTranslation);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns6__ArrayOfTranslation::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns6__ArrayOfTranslation);
	if (this->soap_out(soap, tag?tag:"ns6:ArrayOfTranslation", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns6__ArrayOfTranslation::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns6__ArrayOfTranslation(soap, this, tag, type);
}

SOAP_FMAC3 ns6__ArrayOfTranslation * SOAP_FMAC4 soap_get_ns6__ArrayOfTranslation(struct soap *soap, ns6__ArrayOfTranslation *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns6__ArrayOfTranslation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns6__ArrayOfTranslation * SOAP_FMAC2 soap_instantiate_ns6__ArrayOfTranslation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns6__ArrayOfTranslation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns6__ArrayOfTranslation, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns6__ArrayOfTranslation);
		if (size)
			*size = sizeof(ns6__ArrayOfTranslation);
		((ns6__ArrayOfTranslation*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns6__ArrayOfTranslation[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns6__ArrayOfTranslation);
		for (int i = 0; i < n; i++)
			((ns6__ArrayOfTranslation*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns6__ArrayOfTranslation*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__ArrayOfTranslation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns6__ArrayOfTranslation %p -> %p\n", q, p));
	*(ns6__ArrayOfTranslation*)p = *(ns6__ArrayOfTranslation*)q;
}

void ns6__TranslationMatch::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->ns6__TranslationMatch::Count);
	this->ns6__TranslationMatch::Error = NULL;
	soap_default_int(soap, &this->ns6__TranslationMatch::MatchDegree);
	this->ns6__TranslationMatch::MatchedOriginalText = NULL;
	soap_default_int(soap, &this->ns6__TranslationMatch::Rating);
	this->ns6__TranslationMatch::TranslatedText = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns6__TranslationMatch::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->ns6__TranslationMatch::Count, SOAP_TYPE_int);
	soap_serialize_PointerTostd__wstring(soap, &this->ns6__TranslationMatch::Error);
	soap_embedded(soap, &this->ns6__TranslationMatch::MatchDegree, SOAP_TYPE_int);
	soap_serialize_PointerTostd__wstring(soap, &this->ns6__TranslationMatch::MatchedOriginalText);
	soap_embedded(soap, &this->ns6__TranslationMatch::Rating, SOAP_TYPE_int);
	soap_serialize_PointerTostd__wstring(soap, &this->ns6__TranslationMatch::TranslatedText);
	/* transient soap skipped */
}

int ns6__TranslationMatch::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns6__TranslationMatch(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__TranslationMatch(struct soap *soap, const char *tag, int id, const ns6__TranslationMatch *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns6__TranslationMatch), "ns6:TranslationMatch"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_int(soap, "ns6:Count", -1, &(a->ns6__TranslationMatch::Count), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns6:Error", -1, &(a->ns6__TranslationMatch::Error), ""))
		return soap->error;
	if (soap_out_int(soap, "ns6:MatchDegree", -1, &(a->ns6__TranslationMatch::MatchDegree), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns6:MatchedOriginalText", -1, &(a->ns6__TranslationMatch::MatchedOriginalText), ""))
		return soap->error;
	if (soap_out_int(soap, "ns6:Rating", -1, &(a->ns6__TranslationMatch::Rating), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns6:TranslatedText", -1, &(a->ns6__TranslationMatch::TranslatedText), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns6__TranslationMatch::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns6__TranslationMatch(soap, tag, this, type);
}

SOAP_FMAC3 ns6__TranslationMatch * SOAP_FMAC4 soap_in_ns6__TranslationMatch(struct soap *soap, const char *tag, ns6__TranslationMatch *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns6__TranslationMatch *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns6__TranslationMatch, sizeof(ns6__TranslationMatch), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns6__TranslationMatch)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns6__TranslationMatch *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	size_t soap_flag_Count1 = 1;
	size_t soap_flag_Error1 = 1;
	size_t soap_flag_MatchDegree1 = 1;
	size_t soap_flag_MatchedOriginalText1 = 1;
	size_t soap_flag_Rating1 = 1;
	size_t soap_flag_TranslatedText1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Count1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns6:Count", &(a->ns6__TranslationMatch::Count), "xsd:int"))
				{	soap_flag_Count1--;
					continue;
				}
			if (soap_flag_Error1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns6:Error", &(a->ns6__TranslationMatch::Error), "xsd:string"))
				{	soap_flag_Error1--;
					continue;
				}
			if (soap_flag_MatchDegree1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns6:MatchDegree", &(a->ns6__TranslationMatch::MatchDegree), "xsd:int"))
				{	soap_flag_MatchDegree1--;
					continue;
				}
			if (soap_flag_MatchedOriginalText1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns6:MatchedOriginalText", &(a->ns6__TranslationMatch::MatchedOriginalText), "xsd:string"))
				{	soap_flag_MatchedOriginalText1--;
					continue;
				}
			if (soap_flag_Rating1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_int(soap, "ns6:Rating", &(a->ns6__TranslationMatch::Rating), "xsd:int"))
				{	soap_flag_Rating1--;
					continue;
				}
			if (soap_flag_TranslatedText1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns6:TranslatedText", &(a->ns6__TranslationMatch::TranslatedText), "xsd:string"))
				{	soap_flag_TranslatedText1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns6__TranslationMatch *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns6__TranslationMatch, 0, sizeof(ns6__TranslationMatch), 0, soap_copy_ns6__TranslationMatch);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	if ((soap->mode & SOAP_XML_STRICT) && (soap_flag_Count1 > 0 || soap_flag_MatchDegree1 > 0 || soap_flag_Rating1 > 0))
	{	soap->error = SOAP_OCCURS;
		return NULL;
	}
	return a;
}

int ns6__TranslationMatch::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns6__TranslationMatch);
	if (this->soap_out(soap, tag?tag:"ns6:TranslationMatch", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns6__TranslationMatch::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns6__TranslationMatch(soap, this, tag, type);
}

SOAP_FMAC3 ns6__TranslationMatch * SOAP_FMAC4 soap_get_ns6__TranslationMatch(struct soap *soap, ns6__TranslationMatch *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns6__TranslationMatch(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns6__TranslationMatch * SOAP_FMAC2 soap_instantiate_ns6__TranslationMatch(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns6__TranslationMatch(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns6__TranslationMatch, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns6__TranslationMatch);
		if (size)
			*size = sizeof(ns6__TranslationMatch);
		((ns6__TranslationMatch*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns6__TranslationMatch[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns6__TranslationMatch);
		for (int i = 0; i < n; i++)
			((ns6__TranslationMatch*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns6__TranslationMatch*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__TranslationMatch(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns6__TranslationMatch %p -> %p\n", q, p));
	*(ns6__TranslationMatch*)p = *(ns6__TranslationMatch*)q;
}

void ns6__ArrayOfTranslationMatch::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns6__ArrayOfTranslationMatch::__sizeTranslationMatch = 0;
	this->ns6__ArrayOfTranslationMatch::TranslationMatch = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns6__ArrayOfTranslationMatch::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->ns6__ArrayOfTranslationMatch::TranslationMatch)
	{	int i;
		for (i = 0; i < this->ns6__ArrayOfTranslationMatch::__sizeTranslationMatch; i++)
		{
			soap_serialize_PointerTons6__TranslationMatch(soap, this->ns6__ArrayOfTranslationMatch::TranslationMatch + i);
		}
	}
	/* transient soap skipped */
}

int ns6__ArrayOfTranslationMatch::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns6__ArrayOfTranslationMatch(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__ArrayOfTranslationMatch(struct soap *soap, const char *tag, int id, const ns6__ArrayOfTranslationMatch *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns6__ArrayOfTranslationMatch), "ns6:ArrayOfTranslationMatch"))
		return soap->error;
	/* transient soap skipped */
	if (a->ns6__ArrayOfTranslationMatch::TranslationMatch)
	{	int i;
		for (i = 0; i < a->ns6__ArrayOfTranslationMatch::__sizeTranslationMatch; i++)
			if (soap_out_PointerTons6__TranslationMatch(soap, "ns6:TranslationMatch", -1, a->ns6__ArrayOfTranslationMatch::TranslationMatch + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

void *ns6__ArrayOfTranslationMatch::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns6__ArrayOfTranslationMatch(soap, tag, this, type);
}

SOAP_FMAC3 ns6__ArrayOfTranslationMatch * SOAP_FMAC4 soap_in_ns6__ArrayOfTranslationMatch(struct soap *soap, const char *tag, ns6__ArrayOfTranslationMatch *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns6__ArrayOfTranslationMatch *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns6__ArrayOfTranslationMatch, sizeof(ns6__ArrayOfTranslationMatch), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns6__ArrayOfTranslationMatch)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns6__ArrayOfTranslationMatch *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	struct soap_blist *soap_blist_TranslationMatch1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ns6:TranslationMatch", 1, NULL))
			{	if (a->ns6__ArrayOfTranslationMatch::TranslationMatch == NULL)
				{	if (soap_blist_TranslationMatch1 == NULL)
						soap_blist_TranslationMatch1 = soap_new_block(soap);
					a->ns6__ArrayOfTranslationMatch::TranslationMatch = (ns6__TranslationMatch **)soap_push_block(soap, soap_blist_TranslationMatch1, sizeof(ns6__TranslationMatch *));
					if (a->ns6__ArrayOfTranslationMatch::TranslationMatch == NULL)
						return NULL;
					*a->ns6__ArrayOfTranslationMatch::TranslationMatch = NULL;
				}
				soap_revert(soap);
				if (soap_in_PointerTons6__TranslationMatch(soap, "ns6:TranslationMatch", a->ns6__ArrayOfTranslationMatch::TranslationMatch, "ns6:TranslationMatch"))
				{	a->ns6__ArrayOfTranslationMatch::__sizeTranslationMatch++;
					a->ns6__ArrayOfTranslationMatch::TranslationMatch = NULL;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns6__ArrayOfTranslationMatch::TranslationMatch)
			soap_pop_block(soap, soap_blist_TranslationMatch1);
		if (a->ns6__ArrayOfTranslationMatch::__sizeTranslationMatch)
			a->ns6__ArrayOfTranslationMatch::TranslationMatch = (ns6__TranslationMatch **)soap_save_block(soap, soap_blist_TranslationMatch1, NULL, 1);
		else
		{	a->ns6__ArrayOfTranslationMatch::TranslationMatch = NULL;
			if (soap_blist_TranslationMatch1)
				soap_end_block(soap, soap_blist_TranslationMatch1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns6__ArrayOfTranslationMatch *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns6__ArrayOfTranslationMatch, 0, sizeof(ns6__ArrayOfTranslationMatch), 0, soap_copy_ns6__ArrayOfTranslationMatch);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns6__ArrayOfTranslationMatch::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns6__ArrayOfTranslationMatch);
	if (this->soap_out(soap, tag?tag:"ns6:ArrayOfTranslationMatch", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns6__ArrayOfTranslationMatch::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns6__ArrayOfTranslationMatch(soap, this, tag, type);
}

SOAP_FMAC3 ns6__ArrayOfTranslationMatch * SOAP_FMAC4 soap_get_ns6__ArrayOfTranslationMatch(struct soap *soap, ns6__ArrayOfTranslationMatch *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns6__ArrayOfTranslationMatch(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns6__ArrayOfTranslationMatch * SOAP_FMAC2 soap_instantiate_ns6__ArrayOfTranslationMatch(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns6__ArrayOfTranslationMatch(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns6__ArrayOfTranslationMatch, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns6__ArrayOfTranslationMatch);
		if (size)
			*size = sizeof(ns6__ArrayOfTranslationMatch);
		((ns6__ArrayOfTranslationMatch*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns6__ArrayOfTranslationMatch[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns6__ArrayOfTranslationMatch);
		for (int i = 0; i < n; i++)
			((ns6__ArrayOfTranslationMatch*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns6__ArrayOfTranslationMatch*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__ArrayOfTranslationMatch(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns6__ArrayOfTranslationMatch %p -> %p\n", q, p));
	*(ns6__ArrayOfTranslationMatch*)p = *(ns6__ArrayOfTranslationMatch*)q;
}

void ns6__GetTranslationsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns6__GetTranslationsResponse::From = NULL;
	this->ns6__GetTranslationsResponse::State = NULL;
	this->ns6__GetTranslationsResponse::Translations = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns6__GetTranslationsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->ns6__GetTranslationsResponse::From);
	soap_serialize_PointerTostd__wstring(soap, &this->ns6__GetTranslationsResponse::State);
	soap_serialize_PointerTons6__ArrayOfTranslationMatch(soap, &this->ns6__GetTranslationsResponse::Translations);
	/* transient soap skipped */
}

int ns6__GetTranslationsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns6__GetTranslationsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__GetTranslationsResponse(struct soap *soap, const char *tag, int id, const ns6__GetTranslationsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns6__GetTranslationsResponse), "ns6:GetTranslationsResponse"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTostd__wstring(soap, "ns6:From", -1, &(a->ns6__GetTranslationsResponse::From), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns6:State", -1, &(a->ns6__GetTranslationsResponse::State), ""))
		return soap->error;
	if (soap_out_PointerTons6__ArrayOfTranslationMatch(soap, "ns6:Translations", -1, &(a->ns6__GetTranslationsResponse::Translations), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns6__GetTranslationsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns6__GetTranslationsResponse(soap, tag, this, type);
}

SOAP_FMAC3 ns6__GetTranslationsResponse * SOAP_FMAC4 soap_in_ns6__GetTranslationsResponse(struct soap *soap, const char *tag, ns6__GetTranslationsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns6__GetTranslationsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns6__GetTranslationsResponse, sizeof(ns6__GetTranslationsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns6__GetTranslationsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns6__GetTranslationsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	size_t soap_flag_From1 = 1;
	size_t soap_flag_State1 = 1;
	size_t soap_flag_Translations1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_From1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns6:From", &(a->ns6__GetTranslationsResponse::From), "xsd:string"))
				{	soap_flag_From1--;
					continue;
				}
			if (soap_flag_State1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns6:State", &(a->ns6__GetTranslationsResponse::State), "xsd:string"))
				{	soap_flag_State1--;
					continue;
				}
			if (soap_flag_Translations1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons6__ArrayOfTranslationMatch(soap, "ns6:Translations", &(a->ns6__GetTranslationsResponse::Translations), "ns6:ArrayOfTranslationMatch"))
				{	soap_flag_Translations1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns6__GetTranslationsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns6__GetTranslationsResponse, 0, sizeof(ns6__GetTranslationsResponse), 0, soap_copy_ns6__GetTranslationsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns6__GetTranslationsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns6__GetTranslationsResponse);
	if (this->soap_out(soap, tag?tag:"ns6:GetTranslationsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns6__GetTranslationsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns6__GetTranslationsResponse(soap, this, tag, type);
}

SOAP_FMAC3 ns6__GetTranslationsResponse * SOAP_FMAC4 soap_get_ns6__GetTranslationsResponse(struct soap *soap, ns6__GetTranslationsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns6__GetTranslationsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns6__GetTranslationsResponse * SOAP_FMAC2 soap_instantiate_ns6__GetTranslationsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns6__GetTranslationsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns6__GetTranslationsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns6__GetTranslationsResponse);
		if (size)
			*size = sizeof(ns6__GetTranslationsResponse);
		((ns6__GetTranslationsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns6__GetTranslationsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns6__GetTranslationsResponse);
		for (int i = 0; i < n; i++)
			((ns6__GetTranslationsResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns6__GetTranslationsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__GetTranslationsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns6__GetTranslationsResponse %p -> %p\n", q, p));
	*(ns6__GetTranslationsResponse*)p = *(ns6__GetTranslationsResponse*)q;
}

void ns6__TranslateOptions::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns6__TranslateOptions::Category = NULL;
	this->ns6__TranslateOptions::ContentType = NULL;
	this->ns6__TranslateOptions::ReservedFlags = NULL;
	this->ns6__TranslateOptions::State = NULL;
	this->ns6__TranslateOptions::Uri = NULL;
	this->ns6__TranslateOptions::User = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns6__TranslateOptions::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->ns6__TranslateOptions::Category);
	soap_serialize_PointerTostd__wstring(soap, &this->ns6__TranslateOptions::ContentType);
	soap_serialize_PointerTostd__wstring(soap, &this->ns6__TranslateOptions::ReservedFlags);
	soap_serialize_PointerTostd__wstring(soap, &this->ns6__TranslateOptions::State);
	soap_serialize_PointerTostd__wstring(soap, &this->ns6__TranslateOptions::Uri);
	soap_serialize_PointerTostd__wstring(soap, &this->ns6__TranslateOptions::User);
	/* transient soap skipped */
}

int ns6__TranslateOptions::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns6__TranslateOptions(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns6__TranslateOptions(struct soap *soap, const char *tag, int id, const ns6__TranslateOptions *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns6__TranslateOptions), "ns6:TranslateOptions"))
		return soap->error;
	/* transient soap skipped */
	if (soap_out_PointerTostd__wstring(soap, "ns6:Category", -1, &(a->ns6__TranslateOptions::Category), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns6:ContentType", -1, &(a->ns6__TranslateOptions::ContentType), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns6:ReservedFlags", -1, &(a->ns6__TranslateOptions::ReservedFlags), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns6:State", -1, &(a->ns6__TranslateOptions::State), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns6:Uri", -1, &(a->ns6__TranslateOptions::Uri), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns6:User", -1, &(a->ns6__TranslateOptions::User), ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *ns6__TranslateOptions::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns6__TranslateOptions(soap, tag, this, type);
}

SOAP_FMAC3 ns6__TranslateOptions * SOAP_FMAC4 soap_in_ns6__TranslateOptions(struct soap *soap, const char *tag, ns6__TranslateOptions *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns6__TranslateOptions *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns6__TranslateOptions, sizeof(ns6__TranslateOptions), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns6__TranslateOptions)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns6__TranslateOptions *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	size_t soap_flag_Category1 = 1;
	size_t soap_flag_ContentType1 = 1;
	size_t soap_flag_ReservedFlags1 = 1;
	size_t soap_flag_State1 = 1;
	size_t soap_flag_Uri1 = 1;
	size_t soap_flag_User1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap_flag_Category1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns6:Category", &(a->ns6__TranslateOptions::Category), "xsd:string"))
				{	soap_flag_Category1--;
					continue;
				}
			if (soap_flag_ContentType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns6:ContentType", &(a->ns6__TranslateOptions::ContentType), "xsd:string"))
				{	soap_flag_ContentType1--;
					continue;
				}
			if (soap_flag_ReservedFlags1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns6:ReservedFlags", &(a->ns6__TranslateOptions::ReservedFlags), "xsd:string"))
				{	soap_flag_ReservedFlags1--;
					continue;
				}
			if (soap_flag_State1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns6:State", &(a->ns6__TranslateOptions::State), "xsd:string"))
				{	soap_flag_State1--;
					continue;
				}
			if (soap_flag_Uri1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns6:Uri", &(a->ns6__TranslateOptions::Uri), "xsd:string"))
				{	soap_flag_Uri1--;
					continue;
				}
			if (soap_flag_User1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns6:User", &(a->ns6__TranslateOptions::User), "xsd:string"))
				{	soap_flag_User1--;
					continue;
				}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns6__TranslateOptions *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns6__TranslateOptions, 0, sizeof(ns6__TranslateOptions), 0, soap_copy_ns6__TranslateOptions);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns6__TranslateOptions::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns6__TranslateOptions);
	if (this->soap_out(soap, tag?tag:"ns6:TranslateOptions", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns6__TranslateOptions::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns6__TranslateOptions(soap, this, tag, type);
}

SOAP_FMAC3 ns6__TranslateOptions * SOAP_FMAC4 soap_get_ns6__TranslateOptions(struct soap *soap, ns6__TranslateOptions *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns6__TranslateOptions(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns6__TranslateOptions * SOAP_FMAC2 soap_instantiate_ns6__TranslateOptions(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns6__TranslateOptions(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns6__TranslateOptions, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns6__TranslateOptions);
		if (size)
			*size = sizeof(ns6__TranslateOptions);
		((ns6__TranslateOptions*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns6__TranslateOptions[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns6__TranslateOptions);
		for (int i = 0; i < n; i++)
			((ns6__TranslateOptions*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns6__TranslateOptions*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns6__TranslateOptions(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns6__TranslateOptions %p -> %p\n", q, p));
	*(ns6__TranslateOptions*)p = *(ns6__TranslateOptions*)q;
}

void ns5__ArrayOfstring::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns5__ArrayOfstring::__sizestring = 0;
	this->ns5__ArrayOfstring::string = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns5__ArrayOfstring::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->ns5__ArrayOfstring::string)
	{	int i;
		for (i = 0; i < this->ns5__ArrayOfstring::__sizestring; i++)
		{
			soap_embedded(soap, this->ns5__ArrayOfstring::string + i, SOAP_TYPE_std__wstring);
			soap_serialize_std__wstring(soap, this->ns5__ArrayOfstring::string + i);
		}
	}
	/* transient soap skipped */
}

int ns5__ArrayOfstring::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__ArrayOfstring(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ArrayOfstring(struct soap *soap, const char *tag, int id, const ns5__ArrayOfstring *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__ArrayOfstring), "ns5:ArrayOfstring"))
		return soap->error;
	/* transient soap skipped */
	if (a->ns5__ArrayOfstring::string)
	{	int i;
		for (i = 0; i < a->ns5__ArrayOfstring::__sizestring; i++)
			if (soap_out_std__wstring(soap, "ns5:string", -1, a->ns5__ArrayOfstring::string + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

void *ns5__ArrayOfstring::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__ArrayOfstring(soap, tag, this, type);
}

SOAP_FMAC3 ns5__ArrayOfstring * SOAP_FMAC4 soap_in_ns5__ArrayOfstring(struct soap *soap, const char *tag, ns5__ArrayOfstring *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__ArrayOfstring *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__ArrayOfstring, sizeof(ns5__ArrayOfstring), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns5__ArrayOfstring)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns5__ArrayOfstring *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	struct soap_blist *soap_blist_string1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ns5:string", 1, NULL))
			{	if (a->ns5__ArrayOfstring::string == NULL)
				{	if (soap_blist_string1 == NULL)
						soap_blist_string1 = soap_new_block(soap);
					a->ns5__ArrayOfstring::string = (std::wstring *)soap_push_block(soap, soap_blist_string1, sizeof(std::wstring));
					if (a->ns5__ArrayOfstring::string == NULL)
						return NULL;
					std::wstring p;
					memcpy(a->ns5__ArrayOfstring::string, &p, sizeof(std::wstring)); // a bit rough but portable
					soap_default_std__wstring(soap, a->ns5__ArrayOfstring::string);
				}
				soap_revert(soap);
				if (soap_in_std__wstring(soap, "ns5:string", a->ns5__ArrayOfstring::string, "xsd:string"))
				{	a->ns5__ArrayOfstring::__sizestring++;
					a->ns5__ArrayOfstring::string = NULL;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns5__ArrayOfstring::string)
			soap_pop_block(soap, soap_blist_string1);
		if (a->ns5__ArrayOfstring::__sizestring)
			a->ns5__ArrayOfstring::string = (std::wstring *)soap_save_block(soap, soap_blist_string1, NULL, 1);
		else
		{	a->ns5__ArrayOfstring::string = NULL;
			if (soap_blist_string1)
				soap_end_block(soap, soap_blist_string1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__ArrayOfstring *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__ArrayOfstring, 0, sizeof(ns5__ArrayOfstring), 0, soap_copy_ns5__ArrayOfstring);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns5__ArrayOfstring::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns5__ArrayOfstring);
	if (this->soap_out(soap, tag?tag:"ns5:ArrayOfstring", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__ArrayOfstring::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__ArrayOfstring(soap, this, tag, type);
}

SOAP_FMAC3 ns5__ArrayOfstring * SOAP_FMAC4 soap_get_ns5__ArrayOfstring(struct soap *soap, ns5__ArrayOfstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns5__ArrayOfstring * SOAP_FMAC2 soap_instantiate_ns5__ArrayOfstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__ArrayOfstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns5__ArrayOfstring, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns5__ArrayOfstring);
		if (size)
			*size = sizeof(ns5__ArrayOfstring);
		((ns5__ArrayOfstring*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns5__ArrayOfstring[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns5__ArrayOfstring);
		for (int i = 0; i < n; i++)
			((ns5__ArrayOfstring*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns5__ArrayOfstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__ArrayOfstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns5__ArrayOfstring %p -> %p\n", q, p));
	*(ns5__ArrayOfstring*)p = *(ns5__ArrayOfstring*)q;
}

void ns5__ArrayOfint::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->ns5__ArrayOfint::__sizeint_ = 0;
	this->ns5__ArrayOfint::int_ = NULL;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void ns5__ArrayOfint::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	if (this->ns5__ArrayOfint::int_)
	{	int i;
		for (i = 0; i < this->ns5__ArrayOfint::__sizeint_; i++)
		{
			soap_embedded(soap, this->ns5__ArrayOfint::int_ + i, SOAP_TYPE_int);
		}
	}
	/* transient soap skipped */
}

int ns5__ArrayOfint::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_ns5__ArrayOfint(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_ns5__ArrayOfint(struct soap *soap, const char *tag, int id, const ns5__ArrayOfint *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_ns5__ArrayOfint), "ns5:ArrayOfint"))
		return soap->error;
	/* transient soap skipped */
	if (a->ns5__ArrayOfint::int_)
	{	int i;
		for (i = 0; i < a->ns5__ArrayOfint::__sizeint_; i++)
			if (soap_out_int(soap, "ns5:int", -1, a->ns5__ArrayOfint::int_ + i, ""))
				return soap->error;
	}
	return soap_element_end_out(soap, tag);
}

void *ns5__ArrayOfint::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_ns5__ArrayOfint(soap, tag, this, type);
}

SOAP_FMAC3 ns5__ArrayOfint * SOAP_FMAC4 soap_in_ns5__ArrayOfint(struct soap *soap, const char *tag, ns5__ArrayOfint *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (ns5__ArrayOfint *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_ns5__ArrayOfint, sizeof(ns5__ArrayOfint), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_ns5__ArrayOfint)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (ns5__ArrayOfint *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag___item2 = 1;
	struct soap_blist *soap_blist_int_1 = NULL;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH && !soap_element_begin_in(soap, "ns5:int", 1, NULL))
			{	if (a->ns5__ArrayOfint::int_ == NULL)
				{	if (soap_blist_int_1 == NULL)
						soap_blist_int_1 = soap_new_block(soap);
					a->ns5__ArrayOfint::int_ = (int *)soap_push_block(soap, soap_blist_int_1, sizeof(int));
					if (a->ns5__ArrayOfint::int_ == NULL)
						return NULL;
					soap_default_int(soap, a->ns5__ArrayOfint::int_);
				}
				soap_revert(soap);
				if (soap_in_int(soap, "ns5:int", a->ns5__ArrayOfint::int_, "xsd:int"))
				{	a->ns5__ArrayOfint::__sizeint_++;
					a->ns5__ArrayOfint::int_ = NULL;
					continue;
				}
			}
			if (soap_flag___item2 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-item", &(a->xsd__anyType::__item)))
				{	soap_flag___item2--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (a->ns5__ArrayOfint::int_)
			soap_pop_block(soap, soap_blist_int_1);
		if (a->ns5__ArrayOfint::__sizeint_)
			a->ns5__ArrayOfint::int_ = (int *)soap_save_block(soap, soap_blist_int_1, NULL, 1);
		else
		{	a->ns5__ArrayOfint::int_ = NULL;
			if (soap_blist_int_1)
				soap_end_block(soap, soap_blist_int_1);
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (ns5__ArrayOfint *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_ns5__ArrayOfint, 0, sizeof(ns5__ArrayOfint), 0, soap_copy_ns5__ArrayOfint);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int ns5__ArrayOfint::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_ns5__ArrayOfint);
	if (this->soap_out(soap, tag?tag:"ns5:ArrayOfint", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *ns5__ArrayOfint::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_ns5__ArrayOfint(soap, this, tag, type);
}

SOAP_FMAC3 ns5__ArrayOfint * SOAP_FMAC4 soap_get_ns5__ArrayOfint(struct soap *soap, ns5__ArrayOfint *p, const char *tag, const char *type)
{
	if ((p = soap_in_ns5__ArrayOfint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 ns5__ArrayOfint * SOAP_FMAC2 soap_instantiate_ns5__ArrayOfint(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_ns5__ArrayOfint(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_ns5__ArrayOfint, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(ns5__ArrayOfint);
		if (size)
			*size = sizeof(ns5__ArrayOfint);
		((ns5__ArrayOfint*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(ns5__ArrayOfint[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(ns5__ArrayOfint);
		for (int i = 0; i < n; i++)
			((ns5__ArrayOfint*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (ns5__ArrayOfint*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_ns5__ArrayOfint(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying ns5__ArrayOfint %p -> %p\n", q, p));
	*(ns5__ArrayOfint*)p = *(ns5__ArrayOfint*)q;
}

void _ns3__TranslateArrayResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__TranslateArrayResponse::TranslateArrayResult = NULL;
	/* transient soap skipped */
}

void _ns3__TranslateArrayResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons6__ArrayOfTranslateArrayResponse(soap, &this->_ns3__TranslateArrayResponse::TranslateArrayResult);
	/* transient soap skipped */
}

int _ns3__TranslateArrayResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__TranslateArrayResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__TranslateArrayResponse(struct soap *soap, const char *tag, int id, const _ns3__TranslateArrayResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__TranslateArrayResponse), type))
		return soap->error;
	if (a->TranslateArrayResult)
		soap_element_result(soap, "ns3:TranslateArrayResult");
	if (soap_out_PointerTons6__ArrayOfTranslateArrayResponse(soap, "ns3:TranslateArrayResult", -1, &(a->_ns3__TranslateArrayResponse::TranslateArrayResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__TranslateArrayResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__TranslateArrayResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__TranslateArrayResponse * SOAP_FMAC4 soap_in__ns3__TranslateArrayResponse(struct soap *soap, const char *tag, _ns3__TranslateArrayResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__TranslateArrayResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__TranslateArrayResponse, sizeof(_ns3__TranslateArrayResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__TranslateArrayResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__TranslateArrayResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_TranslateArrayResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TranslateArrayResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons6__ArrayOfTranslateArrayResponse(soap, "ns3:TranslateArrayResult", &(a->_ns3__TranslateArrayResponse::TranslateArrayResult), "ns6:ArrayOfTranslateArrayResponse"))
				{	soap_flag_TranslateArrayResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:TranslateArrayResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__TranslateArrayResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__TranslateArrayResponse, 0, sizeof(_ns3__TranslateArrayResponse), 0, soap_copy__ns3__TranslateArrayResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__TranslateArrayResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__TranslateArrayResponse);
	if (this->soap_out(soap, tag?tag:"ns3:TranslateArrayResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__TranslateArrayResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__TranslateArrayResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__TranslateArrayResponse * SOAP_FMAC4 soap_get__ns3__TranslateArrayResponse(struct soap *soap, _ns3__TranslateArrayResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__TranslateArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__TranslateArrayResponse * SOAP_FMAC2 soap_instantiate__ns3__TranslateArrayResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__TranslateArrayResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__TranslateArrayResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__TranslateArrayResponse);
		if (size)
			*size = sizeof(_ns3__TranslateArrayResponse);
		((_ns3__TranslateArrayResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__TranslateArrayResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__TranslateArrayResponse);
		for (int i = 0; i < n; i++)
			((_ns3__TranslateArrayResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__TranslateArrayResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__TranslateArrayResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__TranslateArrayResponse %p -> %p\n", q, p));
	*(_ns3__TranslateArrayResponse*)p = *(_ns3__TranslateArrayResponse*)q;
}

void _ns3__TranslateArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__TranslateArray::appId = NULL;
	this->_ns3__TranslateArray::texts = NULL;
	this->_ns3__TranslateArray::from = NULL;
	this->_ns3__TranslateArray::to = NULL;
	this->_ns3__TranslateArray::options = NULL;
	/* transient soap skipped */
}

void _ns3__TranslateArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__TranslateArray::appId);
	soap_serialize_PointerTons5__ArrayOfstring(soap, &this->_ns3__TranslateArray::texts);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__TranslateArray::from);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__TranslateArray::to);
	soap_serialize_PointerTons6__TranslateOptions(soap, &this->_ns3__TranslateArray::options);
	/* transient soap skipped */
}

int _ns3__TranslateArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__TranslateArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__TranslateArray(struct soap *soap, const char *tag, int id, const _ns3__TranslateArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__TranslateArray), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:appId", -1, &(a->_ns3__TranslateArray::appId), ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfstring(soap, "ns3:texts", -1, &(a->_ns3__TranslateArray::texts), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:from", -1, &(a->_ns3__TranslateArray::from), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:to", -1, &(a->_ns3__TranslateArray::to), ""))
		return soap->error;
	if (soap_out_PointerTons6__TranslateOptions(soap, "ns3:options", -1, &(a->_ns3__TranslateArray::options), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__TranslateArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__TranslateArray(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__TranslateArray * SOAP_FMAC4 soap_in__ns3__TranslateArray(struct soap *soap, const char *tag, _ns3__TranslateArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__TranslateArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__TranslateArray, sizeof(_ns3__TranslateArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__TranslateArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__TranslateArray *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_appId1 = 1;
	size_t soap_flag_texts1 = 1;
	size_t soap_flag_from1 = 1;
	size_t soap_flag_to1 = 1;
	size_t soap_flag_options1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_appId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:appId", &(a->_ns3__TranslateArray::appId), "xsd:string"))
				{	soap_flag_appId1--;
					continue;
				}
			if (soap_flag_texts1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfstring(soap, "ns3:texts", &(a->_ns3__TranslateArray::texts), "ns5:ArrayOfstring"))
				{	soap_flag_texts1--;
					continue;
				}
			if (soap_flag_from1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:from", &(a->_ns3__TranslateArray::from), "xsd:string"))
				{	soap_flag_from1--;
					continue;
				}
			if (soap_flag_to1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:to", &(a->_ns3__TranslateArray::to), "xsd:string"))
				{	soap_flag_to1--;
					continue;
				}
			if (soap_flag_options1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons6__TranslateOptions(soap, "ns3:options", &(a->_ns3__TranslateArray::options), "ns6:TranslateOptions"))
				{	soap_flag_options1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__TranslateArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__TranslateArray, 0, sizeof(_ns3__TranslateArray), 0, soap_copy__ns3__TranslateArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__TranslateArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__TranslateArray);
	if (this->soap_out(soap, tag?tag:"ns3:TranslateArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__TranslateArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__TranslateArray(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__TranslateArray * SOAP_FMAC4 soap_get__ns3__TranslateArray(struct soap *soap, _ns3__TranslateArray *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__TranslateArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__TranslateArray * SOAP_FMAC2 soap_instantiate__ns3__TranslateArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__TranslateArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__TranslateArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__TranslateArray);
		if (size)
			*size = sizeof(_ns3__TranslateArray);
		((_ns3__TranslateArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__TranslateArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__TranslateArray);
		for (int i = 0; i < n; i++)
			((_ns3__TranslateArray*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__TranslateArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__TranslateArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__TranslateArray %p -> %p\n", q, p));
	*(_ns3__TranslateArray*)p = *(_ns3__TranslateArray*)q;
}

void _ns3__SpeakResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__SpeakResponse::SpeakResult = NULL;
	/* transient soap skipped */
}

void _ns3__SpeakResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__SpeakResponse::SpeakResult);
	/* transient soap skipped */
}

int _ns3__SpeakResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__SpeakResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__SpeakResponse(struct soap *soap, const char *tag, int id, const _ns3__SpeakResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__SpeakResponse), type))
		return soap->error;
	if (a->SpeakResult)
		soap_element_result(soap, "ns3:SpeakResult");
	if (soap_out_PointerTostd__wstring(soap, "ns3:SpeakResult", -1, &(a->_ns3__SpeakResponse::SpeakResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__SpeakResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__SpeakResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__SpeakResponse * SOAP_FMAC4 soap_in__ns3__SpeakResponse(struct soap *soap, const char *tag, _ns3__SpeakResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__SpeakResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__SpeakResponse, sizeof(_ns3__SpeakResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__SpeakResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__SpeakResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_SpeakResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SpeakResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:SpeakResult", &(a->_ns3__SpeakResponse::SpeakResult), "xsd:string"))
				{	soap_flag_SpeakResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:SpeakResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__SpeakResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__SpeakResponse, 0, sizeof(_ns3__SpeakResponse), 0, soap_copy__ns3__SpeakResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__SpeakResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__SpeakResponse);
	if (this->soap_out(soap, tag?tag:"ns3:SpeakResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__SpeakResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__SpeakResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__SpeakResponse * SOAP_FMAC4 soap_get__ns3__SpeakResponse(struct soap *soap, _ns3__SpeakResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__SpeakResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__SpeakResponse * SOAP_FMAC2 soap_instantiate__ns3__SpeakResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__SpeakResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__SpeakResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__SpeakResponse);
		if (size)
			*size = sizeof(_ns3__SpeakResponse);
		((_ns3__SpeakResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__SpeakResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__SpeakResponse);
		for (int i = 0; i < n; i++)
			((_ns3__SpeakResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__SpeakResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__SpeakResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__SpeakResponse %p -> %p\n", q, p));
	*(_ns3__SpeakResponse*)p = *(_ns3__SpeakResponse*)q;
}

void _ns3__Speak::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__Speak::appId = NULL;
	this->_ns3__Speak::text = NULL;
	this->_ns3__Speak::language = NULL;
	this->_ns3__Speak::format = NULL;
	/* transient soap skipped */
}

void _ns3__Speak::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__Speak::appId);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__Speak::text);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__Speak::language);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__Speak::format);
	/* transient soap skipped */
}

int _ns3__Speak::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__Speak(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__Speak(struct soap *soap, const char *tag, int id, const _ns3__Speak *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__Speak), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:appId", -1, &(a->_ns3__Speak::appId), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:text", -1, &(a->_ns3__Speak::text), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:language", -1, &(a->_ns3__Speak::language), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:format", -1, &(a->_ns3__Speak::format), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__Speak::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__Speak(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__Speak * SOAP_FMAC4 soap_in__ns3__Speak(struct soap *soap, const char *tag, _ns3__Speak *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__Speak *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__Speak, sizeof(_ns3__Speak), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__Speak)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__Speak *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_appId1 = 1;
	size_t soap_flag_text1 = 1;
	size_t soap_flag_language1 = 1;
	size_t soap_flag_format1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_appId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:appId", &(a->_ns3__Speak::appId), "xsd:string"))
				{	soap_flag_appId1--;
					continue;
				}
			if (soap_flag_text1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:text", &(a->_ns3__Speak::text), "xsd:string"))
				{	soap_flag_text1--;
					continue;
				}
			if (soap_flag_language1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:language", &(a->_ns3__Speak::language), "xsd:string"))
				{	soap_flag_language1--;
					continue;
				}
			if (soap_flag_format1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:format", &(a->_ns3__Speak::format), "xsd:string"))
				{	soap_flag_format1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__Speak *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__Speak, 0, sizeof(_ns3__Speak), 0, soap_copy__ns3__Speak);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__Speak::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__Speak);
	if (this->soap_out(soap, tag?tag:"ns3:Speak", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__Speak::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__Speak(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__Speak * SOAP_FMAC4 soap_get__ns3__Speak(struct soap *soap, _ns3__Speak *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__Speak(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__Speak * SOAP_FMAC2 soap_instantiate__ns3__Speak(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__Speak(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__Speak, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__Speak);
		if (size)
			*size = sizeof(_ns3__Speak);
		((_ns3__Speak*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__Speak[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__Speak);
		for (int i = 0; i < n; i++)
			((_ns3__Speak*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__Speak*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__Speak(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__Speak %p -> %p\n", q, p));
	*(_ns3__Speak*)p = *(_ns3__Speak*)q;
}

void _ns3__GetTranslationsArrayResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__GetTranslationsArrayResponse::GetTranslationsArrayResult = NULL;
	/* transient soap skipped */
}

void _ns3__GetTranslationsArrayResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons6__ArrayOfGetTranslationsResponse(soap, &this->_ns3__GetTranslationsArrayResponse::GetTranslationsArrayResult);
	/* transient soap skipped */
}

int _ns3__GetTranslationsArrayResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__GetTranslationsArrayResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetTranslationsArrayResponse(struct soap *soap, const char *tag, int id, const _ns3__GetTranslationsArrayResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__GetTranslationsArrayResponse), type))
		return soap->error;
	if (a->GetTranslationsArrayResult)
		soap_element_result(soap, "ns3:GetTranslationsArrayResult");
	if (soap_out_PointerTons6__ArrayOfGetTranslationsResponse(soap, "ns3:GetTranslationsArrayResult", -1, &(a->_ns3__GetTranslationsArrayResponse::GetTranslationsArrayResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__GetTranslationsArrayResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__GetTranslationsArrayResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__GetTranslationsArrayResponse * SOAP_FMAC4 soap_in__ns3__GetTranslationsArrayResponse(struct soap *soap, const char *tag, _ns3__GetTranslationsArrayResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__GetTranslationsArrayResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__GetTranslationsArrayResponse, sizeof(_ns3__GetTranslationsArrayResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__GetTranslationsArrayResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__GetTranslationsArrayResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetTranslationsArrayResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetTranslationsArrayResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons6__ArrayOfGetTranslationsResponse(soap, "ns3:GetTranslationsArrayResult", &(a->_ns3__GetTranslationsArrayResponse::GetTranslationsArrayResult), "ns6:ArrayOfGetTranslationsResponse"))
				{	soap_flag_GetTranslationsArrayResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:GetTranslationsArrayResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__GetTranslationsArrayResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__GetTranslationsArrayResponse, 0, sizeof(_ns3__GetTranslationsArrayResponse), 0, soap_copy__ns3__GetTranslationsArrayResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__GetTranslationsArrayResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__GetTranslationsArrayResponse);
	if (this->soap_out(soap, tag?tag:"ns3:GetTranslationsArrayResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__GetTranslationsArrayResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__GetTranslationsArrayResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__GetTranslationsArrayResponse * SOAP_FMAC4 soap_get__ns3__GetTranslationsArrayResponse(struct soap *soap, _ns3__GetTranslationsArrayResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__GetTranslationsArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__GetTranslationsArrayResponse * SOAP_FMAC2 soap_instantiate__ns3__GetTranslationsArrayResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__GetTranslationsArrayResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__GetTranslationsArrayResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetTranslationsArrayResponse);
		if (size)
			*size = sizeof(_ns3__GetTranslationsArrayResponse);
		((_ns3__GetTranslationsArrayResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetTranslationsArrayResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__GetTranslationsArrayResponse);
		for (int i = 0; i < n; i++)
			((_ns3__GetTranslationsArrayResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__GetTranslationsArrayResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetTranslationsArrayResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__GetTranslationsArrayResponse %p -> %p\n", q, p));
	*(_ns3__GetTranslationsArrayResponse*)p = *(_ns3__GetTranslationsArrayResponse*)q;
}

void _ns3__GetTranslationsArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__GetTranslationsArray::appId = NULL;
	this->_ns3__GetTranslationsArray::texts = NULL;
	this->_ns3__GetTranslationsArray::from = NULL;
	this->_ns3__GetTranslationsArray::to = NULL;
	this->_ns3__GetTranslationsArray::maxTranslations = NULL;
	this->_ns3__GetTranslationsArray::options = NULL;
	/* transient soap skipped */
}

void _ns3__GetTranslationsArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__GetTranslationsArray::appId);
	soap_serialize_PointerTons5__ArrayOfstring(soap, &this->_ns3__GetTranslationsArray::texts);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__GetTranslationsArray::from);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__GetTranslationsArray::to);
	soap_serialize_PointerToint(soap, &this->_ns3__GetTranslationsArray::maxTranslations);
	soap_serialize_PointerTons6__TranslateOptions(soap, &this->_ns3__GetTranslationsArray::options);
	/* transient soap skipped */
}

int _ns3__GetTranslationsArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__GetTranslationsArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetTranslationsArray(struct soap *soap, const char *tag, int id, const _ns3__GetTranslationsArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__GetTranslationsArray), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:appId", -1, &(a->_ns3__GetTranslationsArray::appId), ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfstring(soap, "ns3:texts", -1, &(a->_ns3__GetTranslationsArray::texts), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:from", -1, &(a->_ns3__GetTranslationsArray::from), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:to", -1, &(a->_ns3__GetTranslationsArray::to), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns3:maxTranslations", -1, &(a->_ns3__GetTranslationsArray::maxTranslations), ""))
		return soap->error;
	if (soap_out_PointerTons6__TranslateOptions(soap, "ns3:options", -1, &(a->_ns3__GetTranslationsArray::options), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__GetTranslationsArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__GetTranslationsArray(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__GetTranslationsArray * SOAP_FMAC4 soap_in__ns3__GetTranslationsArray(struct soap *soap, const char *tag, _ns3__GetTranslationsArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__GetTranslationsArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__GetTranslationsArray, sizeof(_ns3__GetTranslationsArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__GetTranslationsArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__GetTranslationsArray *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_appId1 = 1;
	size_t soap_flag_texts1 = 1;
	size_t soap_flag_from1 = 1;
	size_t soap_flag_to1 = 1;
	size_t soap_flag_maxTranslations1 = 1;
	size_t soap_flag_options1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_appId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:appId", &(a->_ns3__GetTranslationsArray::appId), "xsd:string"))
				{	soap_flag_appId1--;
					continue;
				}
			if (soap_flag_texts1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfstring(soap, "ns3:texts", &(a->_ns3__GetTranslationsArray::texts), "ns5:ArrayOfstring"))
				{	soap_flag_texts1--;
					continue;
				}
			if (soap_flag_from1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:from", &(a->_ns3__GetTranslationsArray::from), "xsd:string"))
				{	soap_flag_from1--;
					continue;
				}
			if (soap_flag_to1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:to", &(a->_ns3__GetTranslationsArray::to), "xsd:string"))
				{	soap_flag_to1--;
					continue;
				}
			if (soap_flag_maxTranslations1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns3:maxTranslations", &(a->_ns3__GetTranslationsArray::maxTranslations), "xsd:int"))
				{	soap_flag_maxTranslations1--;
					continue;
				}
			if (soap_flag_options1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons6__TranslateOptions(soap, "ns3:options", &(a->_ns3__GetTranslationsArray::options), "ns6:TranslateOptions"))
				{	soap_flag_options1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__GetTranslationsArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__GetTranslationsArray, 0, sizeof(_ns3__GetTranslationsArray), 0, soap_copy__ns3__GetTranslationsArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__GetTranslationsArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__GetTranslationsArray);
	if (this->soap_out(soap, tag?tag:"ns3:GetTranslationsArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__GetTranslationsArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__GetTranslationsArray(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__GetTranslationsArray * SOAP_FMAC4 soap_get__ns3__GetTranslationsArray(struct soap *soap, _ns3__GetTranslationsArray *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__GetTranslationsArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__GetTranslationsArray * SOAP_FMAC2 soap_instantiate__ns3__GetTranslationsArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__GetTranslationsArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__GetTranslationsArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetTranslationsArray);
		if (size)
			*size = sizeof(_ns3__GetTranslationsArray);
		((_ns3__GetTranslationsArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetTranslationsArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__GetTranslationsArray);
		for (int i = 0; i < n; i++)
			((_ns3__GetTranslationsArray*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__GetTranslationsArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetTranslationsArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__GetTranslationsArray %p -> %p\n", q, p));
	*(_ns3__GetTranslationsArray*)p = *(_ns3__GetTranslationsArray*)q;
}

void _ns3__AddTranslationArrayResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns3__AddTranslationArrayResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns3__AddTranslationArrayResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__AddTranslationArrayResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__AddTranslationArrayResponse(struct soap *soap, const char *tag, int id, const _ns3__AddTranslationArrayResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__AddTranslationArrayResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__AddTranslationArrayResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__AddTranslationArrayResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__AddTranslationArrayResponse * SOAP_FMAC4 soap_in__ns3__AddTranslationArrayResponse(struct soap *soap, const char *tag, _ns3__AddTranslationArrayResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__AddTranslationArrayResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__AddTranslationArrayResponse, sizeof(_ns3__AddTranslationArrayResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__AddTranslationArrayResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__AddTranslationArrayResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__AddTranslationArrayResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__AddTranslationArrayResponse, 0, sizeof(_ns3__AddTranslationArrayResponse), 0, soap_copy__ns3__AddTranslationArrayResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__AddTranslationArrayResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__AddTranslationArrayResponse);
	if (this->soap_out(soap, tag?tag:"ns3:AddTranslationArrayResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__AddTranslationArrayResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__AddTranslationArrayResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__AddTranslationArrayResponse * SOAP_FMAC4 soap_get__ns3__AddTranslationArrayResponse(struct soap *soap, _ns3__AddTranslationArrayResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__AddTranslationArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__AddTranslationArrayResponse * SOAP_FMAC2 soap_instantiate__ns3__AddTranslationArrayResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__AddTranslationArrayResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__AddTranslationArrayResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__AddTranslationArrayResponse);
		if (size)
			*size = sizeof(_ns3__AddTranslationArrayResponse);
		((_ns3__AddTranslationArrayResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__AddTranslationArrayResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__AddTranslationArrayResponse);
		for (int i = 0; i < n; i++)
			((_ns3__AddTranslationArrayResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__AddTranslationArrayResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__AddTranslationArrayResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__AddTranslationArrayResponse %p -> %p\n", q, p));
	*(_ns3__AddTranslationArrayResponse*)p = *(_ns3__AddTranslationArrayResponse*)q;
}

void _ns3__AddTranslationArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__AddTranslationArray::appId = NULL;
	this->_ns3__AddTranslationArray::translations = NULL;
	this->_ns3__AddTranslationArray::from = NULL;
	this->_ns3__AddTranslationArray::to = NULL;
	this->_ns3__AddTranslationArray::options = NULL;
	/* transient soap skipped */
}

void _ns3__AddTranslationArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__AddTranslationArray::appId);
	soap_serialize_PointerTons6__ArrayOfTranslation(soap, &this->_ns3__AddTranslationArray::translations);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__AddTranslationArray::from);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__AddTranslationArray::to);
	soap_serialize_PointerTons6__TranslateOptions(soap, &this->_ns3__AddTranslationArray::options);
	/* transient soap skipped */
}

int _ns3__AddTranslationArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__AddTranslationArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__AddTranslationArray(struct soap *soap, const char *tag, int id, const _ns3__AddTranslationArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__AddTranslationArray), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:appId", -1, &(a->_ns3__AddTranslationArray::appId), ""))
		return soap->error;
	if (soap_out_PointerTons6__ArrayOfTranslation(soap, "ns3:translations", -1, &(a->_ns3__AddTranslationArray::translations), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:from", -1, &(a->_ns3__AddTranslationArray::from), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:to", -1, &(a->_ns3__AddTranslationArray::to), ""))
		return soap->error;
	if (soap_out_PointerTons6__TranslateOptions(soap, "ns3:options", -1, &(a->_ns3__AddTranslationArray::options), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__AddTranslationArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__AddTranslationArray(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__AddTranslationArray * SOAP_FMAC4 soap_in__ns3__AddTranslationArray(struct soap *soap, const char *tag, _ns3__AddTranslationArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__AddTranslationArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__AddTranslationArray, sizeof(_ns3__AddTranslationArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__AddTranslationArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__AddTranslationArray *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_appId1 = 1;
	size_t soap_flag_translations1 = 1;
	size_t soap_flag_from1 = 1;
	size_t soap_flag_to1 = 1;
	size_t soap_flag_options1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_appId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:appId", &(a->_ns3__AddTranslationArray::appId), "xsd:string"))
				{	soap_flag_appId1--;
					continue;
				}
			if (soap_flag_translations1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons6__ArrayOfTranslation(soap, "ns3:translations", &(a->_ns3__AddTranslationArray::translations), "ns6:ArrayOfTranslation"))
				{	soap_flag_translations1--;
					continue;
				}
			if (soap_flag_from1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:from", &(a->_ns3__AddTranslationArray::from), "xsd:string"))
				{	soap_flag_from1--;
					continue;
				}
			if (soap_flag_to1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:to", &(a->_ns3__AddTranslationArray::to), "xsd:string"))
				{	soap_flag_to1--;
					continue;
				}
			if (soap_flag_options1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons6__TranslateOptions(soap, "ns3:options", &(a->_ns3__AddTranslationArray::options), "ns6:TranslateOptions"))
				{	soap_flag_options1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__AddTranslationArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__AddTranslationArray, 0, sizeof(_ns3__AddTranslationArray), 0, soap_copy__ns3__AddTranslationArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__AddTranslationArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__AddTranslationArray);
	if (this->soap_out(soap, tag?tag:"ns3:AddTranslationArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__AddTranslationArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__AddTranslationArray(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__AddTranslationArray * SOAP_FMAC4 soap_get__ns3__AddTranslationArray(struct soap *soap, _ns3__AddTranslationArray *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__AddTranslationArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__AddTranslationArray * SOAP_FMAC2 soap_instantiate__ns3__AddTranslationArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__AddTranslationArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__AddTranslationArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__AddTranslationArray);
		if (size)
			*size = sizeof(_ns3__AddTranslationArray);
		((_ns3__AddTranslationArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__AddTranslationArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__AddTranslationArray);
		for (int i = 0; i < n; i++)
			((_ns3__AddTranslationArray*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__AddTranslationArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__AddTranslationArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__AddTranslationArray %p -> %p\n", q, p));
	*(_ns3__AddTranslationArray*)p = *(_ns3__AddTranslationArray*)q;
}

void _ns3__TranslateResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__TranslateResponse::TranslateResult = NULL;
	/* transient soap skipped */
}

void _ns3__TranslateResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__TranslateResponse::TranslateResult);
	/* transient soap skipped */
}

int _ns3__TranslateResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__TranslateResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__TranslateResponse(struct soap *soap, const char *tag, int id, const _ns3__TranslateResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__TranslateResponse), type))
		return soap->error;
	if (a->TranslateResult)
		soap_element_result(soap, "ns3:TranslateResult");
	if (soap_out_PointerTostd__wstring(soap, "ns3:TranslateResult", -1, &(a->_ns3__TranslateResponse::TranslateResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__TranslateResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__TranslateResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__TranslateResponse * SOAP_FMAC4 soap_in__ns3__TranslateResponse(struct soap *soap, const char *tag, _ns3__TranslateResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__TranslateResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__TranslateResponse, sizeof(_ns3__TranslateResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__TranslateResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__TranslateResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_TranslateResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_TranslateResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:TranslateResult", &(a->_ns3__TranslateResponse::TranslateResult), "xsd:string"))
				{	soap_flag_TranslateResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:TranslateResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__TranslateResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__TranslateResponse, 0, sizeof(_ns3__TranslateResponse), 0, soap_copy__ns3__TranslateResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__TranslateResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__TranslateResponse);
	if (this->soap_out(soap, tag?tag:"ns3:TranslateResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__TranslateResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__TranslateResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__TranslateResponse * SOAP_FMAC4 soap_get__ns3__TranslateResponse(struct soap *soap, _ns3__TranslateResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__TranslateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__TranslateResponse * SOAP_FMAC2 soap_instantiate__ns3__TranslateResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__TranslateResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__TranslateResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__TranslateResponse);
		if (size)
			*size = sizeof(_ns3__TranslateResponse);
		((_ns3__TranslateResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__TranslateResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__TranslateResponse);
		for (int i = 0; i < n; i++)
			((_ns3__TranslateResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__TranslateResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__TranslateResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__TranslateResponse %p -> %p\n", q, p));
	*(_ns3__TranslateResponse*)p = *(_ns3__TranslateResponse*)q;
}

void _ns3__Translate::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__Translate::appId = NULL;
	this->_ns3__Translate::text = NULL;
	this->_ns3__Translate::from = NULL;
	this->_ns3__Translate::to = NULL;
	this->_ns3__Translate::contentType = NULL;
	this->_ns3__Translate::category = NULL;
	/* transient soap skipped */
}

void _ns3__Translate::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__Translate::appId);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__Translate::text);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__Translate::from);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__Translate::to);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__Translate::contentType);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__Translate::category);
	/* transient soap skipped */
}

int _ns3__Translate::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__Translate(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__Translate(struct soap *soap, const char *tag, int id, const _ns3__Translate *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__Translate), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:appId", -1, &(a->_ns3__Translate::appId), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:text", -1, &(a->_ns3__Translate::text), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:from", -1, &(a->_ns3__Translate::from), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:to", -1, &(a->_ns3__Translate::to), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:contentType", -1, &(a->_ns3__Translate::contentType), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:category", -1, &(a->_ns3__Translate::category), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__Translate::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__Translate(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__Translate * SOAP_FMAC4 soap_in__ns3__Translate(struct soap *soap, const char *tag, _ns3__Translate *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__Translate *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__Translate, sizeof(_ns3__Translate), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__Translate)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__Translate *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_appId1 = 1;
	size_t soap_flag_text1 = 1;
	size_t soap_flag_from1 = 1;
	size_t soap_flag_to1 = 1;
	size_t soap_flag_contentType1 = 1;
	size_t soap_flag_category1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_appId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:appId", &(a->_ns3__Translate::appId), "xsd:string"))
				{	soap_flag_appId1--;
					continue;
				}
			if (soap_flag_text1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:text", &(a->_ns3__Translate::text), "xsd:string"))
				{	soap_flag_text1--;
					continue;
				}
			if (soap_flag_from1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:from", &(a->_ns3__Translate::from), "xsd:string"))
				{	soap_flag_from1--;
					continue;
				}
			if (soap_flag_to1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:to", &(a->_ns3__Translate::to), "xsd:string"))
				{	soap_flag_to1--;
					continue;
				}
			if (soap_flag_contentType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:contentType", &(a->_ns3__Translate::contentType), "xsd:string"))
				{	soap_flag_contentType1--;
					continue;
				}
			if (soap_flag_category1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:category", &(a->_ns3__Translate::category), "xsd:string"))
				{	soap_flag_category1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__Translate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__Translate, 0, sizeof(_ns3__Translate), 0, soap_copy__ns3__Translate);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__Translate::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__Translate);
	if (this->soap_out(soap, tag?tag:"ns3:Translate", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__Translate::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__Translate(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__Translate * SOAP_FMAC4 soap_get__ns3__Translate(struct soap *soap, _ns3__Translate *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__Translate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__Translate * SOAP_FMAC2 soap_instantiate__ns3__Translate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__Translate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__Translate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__Translate);
		if (size)
			*size = sizeof(_ns3__Translate);
		((_ns3__Translate*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__Translate[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__Translate);
		for (int i = 0; i < n; i++)
			((_ns3__Translate*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__Translate*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__Translate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__Translate %p -> %p\n", q, p));
	*(_ns3__Translate*)p = *(_ns3__Translate*)q;
}

void _ns3__GetTranslationsResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__GetTranslationsResponse::GetTranslationsResult = NULL;
	/* transient soap skipped */
}

void _ns3__GetTranslationsResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons6__GetTranslationsResponse(soap, &this->_ns3__GetTranslationsResponse::GetTranslationsResult);
	/* transient soap skipped */
}

int _ns3__GetTranslationsResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__GetTranslationsResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetTranslationsResponse(struct soap *soap, const char *tag, int id, const _ns3__GetTranslationsResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__GetTranslationsResponse), type))
		return soap->error;
	if (a->GetTranslationsResult)
		soap_element_result(soap, "ns3:GetTranslationsResult");
	if (soap_out_PointerTons6__GetTranslationsResponse(soap, "ns3:GetTranslationsResult", -1, &(a->_ns3__GetTranslationsResponse::GetTranslationsResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__GetTranslationsResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__GetTranslationsResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__GetTranslationsResponse * SOAP_FMAC4 soap_in__ns3__GetTranslationsResponse(struct soap *soap, const char *tag, _ns3__GetTranslationsResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__GetTranslationsResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__GetTranslationsResponse, sizeof(_ns3__GetTranslationsResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__GetTranslationsResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__GetTranslationsResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetTranslationsResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetTranslationsResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons6__GetTranslationsResponse(soap, "ns3:GetTranslationsResult", &(a->_ns3__GetTranslationsResponse::GetTranslationsResult), "ns6:GetTranslationsResponse"))
				{	soap_flag_GetTranslationsResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:GetTranslationsResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__GetTranslationsResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__GetTranslationsResponse, 0, sizeof(_ns3__GetTranslationsResponse), 0, soap_copy__ns3__GetTranslationsResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__GetTranslationsResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__GetTranslationsResponse);
	if (this->soap_out(soap, tag?tag:"ns3:GetTranslationsResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__GetTranslationsResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__GetTranslationsResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__GetTranslationsResponse * SOAP_FMAC4 soap_get__ns3__GetTranslationsResponse(struct soap *soap, _ns3__GetTranslationsResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__GetTranslationsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__GetTranslationsResponse * SOAP_FMAC2 soap_instantiate__ns3__GetTranslationsResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__GetTranslationsResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__GetTranslationsResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetTranslationsResponse);
		if (size)
			*size = sizeof(_ns3__GetTranslationsResponse);
		((_ns3__GetTranslationsResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetTranslationsResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__GetTranslationsResponse);
		for (int i = 0; i < n; i++)
			((_ns3__GetTranslationsResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__GetTranslationsResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetTranslationsResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__GetTranslationsResponse %p -> %p\n", q, p));
	*(_ns3__GetTranslationsResponse*)p = *(_ns3__GetTranslationsResponse*)q;
}

void _ns3__GetTranslations::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__GetTranslations::appId = NULL;
	this->_ns3__GetTranslations::text = NULL;
	this->_ns3__GetTranslations::from = NULL;
	this->_ns3__GetTranslations::to = NULL;
	this->_ns3__GetTranslations::maxTranslations = NULL;
	this->_ns3__GetTranslations::options = NULL;
	/* transient soap skipped */
}

void _ns3__GetTranslations::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__GetTranslations::appId);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__GetTranslations::text);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__GetTranslations::from);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__GetTranslations::to);
	soap_serialize_PointerToint(soap, &this->_ns3__GetTranslations::maxTranslations);
	soap_serialize_PointerTons6__TranslateOptions(soap, &this->_ns3__GetTranslations::options);
	/* transient soap skipped */
}

int _ns3__GetTranslations::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__GetTranslations(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetTranslations(struct soap *soap, const char *tag, int id, const _ns3__GetTranslations *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__GetTranslations), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:appId", -1, &(a->_ns3__GetTranslations::appId), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:text", -1, &(a->_ns3__GetTranslations::text), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:from", -1, &(a->_ns3__GetTranslations::from), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:to", -1, &(a->_ns3__GetTranslations::to), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns3:maxTranslations", -1, &(a->_ns3__GetTranslations::maxTranslations), ""))
		return soap->error;
	if (soap_out_PointerTons6__TranslateOptions(soap, "ns3:options", -1, &(a->_ns3__GetTranslations::options), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__GetTranslations::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__GetTranslations(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__GetTranslations * SOAP_FMAC4 soap_in__ns3__GetTranslations(struct soap *soap, const char *tag, _ns3__GetTranslations *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__GetTranslations *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__GetTranslations, sizeof(_ns3__GetTranslations), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__GetTranslations)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__GetTranslations *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_appId1 = 1;
	size_t soap_flag_text1 = 1;
	size_t soap_flag_from1 = 1;
	size_t soap_flag_to1 = 1;
	size_t soap_flag_maxTranslations1 = 1;
	size_t soap_flag_options1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_appId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:appId", &(a->_ns3__GetTranslations::appId), "xsd:string"))
				{	soap_flag_appId1--;
					continue;
				}
			if (soap_flag_text1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:text", &(a->_ns3__GetTranslations::text), "xsd:string"))
				{	soap_flag_text1--;
					continue;
				}
			if (soap_flag_from1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:from", &(a->_ns3__GetTranslations::from), "xsd:string"))
				{	soap_flag_from1--;
					continue;
				}
			if (soap_flag_to1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:to", &(a->_ns3__GetTranslations::to), "xsd:string"))
				{	soap_flag_to1--;
					continue;
				}
			if (soap_flag_maxTranslations1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns3:maxTranslations", &(a->_ns3__GetTranslations::maxTranslations), "xsd:int"))
				{	soap_flag_maxTranslations1--;
					continue;
				}
			if (soap_flag_options1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons6__TranslateOptions(soap, "ns3:options", &(a->_ns3__GetTranslations::options), "ns6:TranslateOptions"))
				{	soap_flag_options1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__GetTranslations *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__GetTranslations, 0, sizeof(_ns3__GetTranslations), 0, soap_copy__ns3__GetTranslations);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__GetTranslations::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__GetTranslations);
	if (this->soap_out(soap, tag?tag:"ns3:GetTranslations", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__GetTranslations::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__GetTranslations(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__GetTranslations * SOAP_FMAC4 soap_get__ns3__GetTranslations(struct soap *soap, _ns3__GetTranslations *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__GetTranslations(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__GetTranslations * SOAP_FMAC2 soap_instantiate__ns3__GetTranslations(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__GetTranslations(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__GetTranslations, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetTranslations);
		if (size)
			*size = sizeof(_ns3__GetTranslations);
		((_ns3__GetTranslations*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetTranslations[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__GetTranslations);
		for (int i = 0; i < n; i++)
			((_ns3__GetTranslations*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__GetTranslations*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetTranslations(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__GetTranslations %p -> %p\n", q, p));
	*(_ns3__GetTranslations*)p = *(_ns3__GetTranslations*)q;
}

void _ns3__GetLanguagesForTranslateResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__GetLanguagesForTranslateResponse::GetLanguagesForTranslateResult = NULL;
	/* transient soap skipped */
}

void _ns3__GetLanguagesForTranslateResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons5__ArrayOfstring(soap, &this->_ns3__GetLanguagesForTranslateResponse::GetLanguagesForTranslateResult);
	/* transient soap skipped */
}

int _ns3__GetLanguagesForTranslateResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__GetLanguagesForTranslateResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetLanguagesForTranslateResponse(struct soap *soap, const char *tag, int id, const _ns3__GetLanguagesForTranslateResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__GetLanguagesForTranslateResponse), type))
		return soap->error;
	if (a->GetLanguagesForTranslateResult)
		soap_element_result(soap, "ns3:GetLanguagesForTranslateResult");
	if (soap_out_PointerTons5__ArrayOfstring(soap, "ns3:GetLanguagesForTranslateResult", -1, &(a->_ns3__GetLanguagesForTranslateResponse::GetLanguagesForTranslateResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__GetLanguagesForTranslateResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__GetLanguagesForTranslateResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__GetLanguagesForTranslateResponse * SOAP_FMAC4 soap_in__ns3__GetLanguagesForTranslateResponse(struct soap *soap, const char *tag, _ns3__GetLanguagesForTranslateResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__GetLanguagesForTranslateResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__GetLanguagesForTranslateResponse, sizeof(_ns3__GetLanguagesForTranslateResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__GetLanguagesForTranslateResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__GetLanguagesForTranslateResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetLanguagesForTranslateResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetLanguagesForTranslateResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfstring(soap, "ns3:GetLanguagesForTranslateResult", &(a->_ns3__GetLanguagesForTranslateResponse::GetLanguagesForTranslateResult), "ns5:ArrayOfstring"))
				{	soap_flag_GetLanguagesForTranslateResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:GetLanguagesForTranslateResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__GetLanguagesForTranslateResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__GetLanguagesForTranslateResponse, 0, sizeof(_ns3__GetLanguagesForTranslateResponse), 0, soap_copy__ns3__GetLanguagesForTranslateResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__GetLanguagesForTranslateResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__GetLanguagesForTranslateResponse);
	if (this->soap_out(soap, tag?tag:"ns3:GetLanguagesForTranslateResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__GetLanguagesForTranslateResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__GetLanguagesForTranslateResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__GetLanguagesForTranslateResponse * SOAP_FMAC4 soap_get__ns3__GetLanguagesForTranslateResponse(struct soap *soap, _ns3__GetLanguagesForTranslateResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__GetLanguagesForTranslateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__GetLanguagesForTranslateResponse * SOAP_FMAC2 soap_instantiate__ns3__GetLanguagesForTranslateResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__GetLanguagesForTranslateResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__GetLanguagesForTranslateResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetLanguagesForTranslateResponse);
		if (size)
			*size = sizeof(_ns3__GetLanguagesForTranslateResponse);
		((_ns3__GetLanguagesForTranslateResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetLanguagesForTranslateResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__GetLanguagesForTranslateResponse);
		for (int i = 0; i < n; i++)
			((_ns3__GetLanguagesForTranslateResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__GetLanguagesForTranslateResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetLanguagesForTranslateResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__GetLanguagesForTranslateResponse %p -> %p\n", q, p));
	*(_ns3__GetLanguagesForTranslateResponse*)p = *(_ns3__GetLanguagesForTranslateResponse*)q;
}

void _ns3__GetLanguagesForTranslate::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__GetLanguagesForTranslate::appId = NULL;
	/* transient soap skipped */
}

void _ns3__GetLanguagesForTranslate::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__GetLanguagesForTranslate::appId);
	/* transient soap skipped */
}

int _ns3__GetLanguagesForTranslate::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__GetLanguagesForTranslate(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetLanguagesForTranslate(struct soap *soap, const char *tag, int id, const _ns3__GetLanguagesForTranslate *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__GetLanguagesForTranslate), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:appId", -1, &(a->_ns3__GetLanguagesForTranslate::appId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__GetLanguagesForTranslate::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__GetLanguagesForTranslate(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__GetLanguagesForTranslate * SOAP_FMAC4 soap_in__ns3__GetLanguagesForTranslate(struct soap *soap, const char *tag, _ns3__GetLanguagesForTranslate *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__GetLanguagesForTranslate *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__GetLanguagesForTranslate, sizeof(_ns3__GetLanguagesForTranslate), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__GetLanguagesForTranslate)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__GetLanguagesForTranslate *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_appId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_appId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:appId", &(a->_ns3__GetLanguagesForTranslate::appId), "xsd:string"))
				{	soap_flag_appId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__GetLanguagesForTranslate *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__GetLanguagesForTranslate, 0, sizeof(_ns3__GetLanguagesForTranslate), 0, soap_copy__ns3__GetLanguagesForTranslate);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__GetLanguagesForTranslate::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__GetLanguagesForTranslate);
	if (this->soap_out(soap, tag?tag:"ns3:GetLanguagesForTranslate", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__GetLanguagesForTranslate::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__GetLanguagesForTranslate(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__GetLanguagesForTranslate * SOAP_FMAC4 soap_get__ns3__GetLanguagesForTranslate(struct soap *soap, _ns3__GetLanguagesForTranslate *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__GetLanguagesForTranslate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__GetLanguagesForTranslate * SOAP_FMAC2 soap_instantiate__ns3__GetLanguagesForTranslate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__GetLanguagesForTranslate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__GetLanguagesForTranslate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetLanguagesForTranslate);
		if (size)
			*size = sizeof(_ns3__GetLanguagesForTranslate);
		((_ns3__GetLanguagesForTranslate*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetLanguagesForTranslate[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__GetLanguagesForTranslate);
		for (int i = 0; i < n; i++)
			((_ns3__GetLanguagesForTranslate*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__GetLanguagesForTranslate*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetLanguagesForTranslate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__GetLanguagesForTranslate %p -> %p\n", q, p));
	*(_ns3__GetLanguagesForTranslate*)p = *(_ns3__GetLanguagesForTranslate*)q;
}

void _ns3__GetLanguagesForSpeakResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__GetLanguagesForSpeakResponse::GetLanguagesForSpeakResult = NULL;
	/* transient soap skipped */
}

void _ns3__GetLanguagesForSpeakResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons5__ArrayOfstring(soap, &this->_ns3__GetLanguagesForSpeakResponse::GetLanguagesForSpeakResult);
	/* transient soap skipped */
}

int _ns3__GetLanguagesForSpeakResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__GetLanguagesForSpeakResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetLanguagesForSpeakResponse(struct soap *soap, const char *tag, int id, const _ns3__GetLanguagesForSpeakResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__GetLanguagesForSpeakResponse), type))
		return soap->error;
	if (a->GetLanguagesForSpeakResult)
		soap_element_result(soap, "ns3:GetLanguagesForSpeakResult");
	if (soap_out_PointerTons5__ArrayOfstring(soap, "ns3:GetLanguagesForSpeakResult", -1, &(a->_ns3__GetLanguagesForSpeakResponse::GetLanguagesForSpeakResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__GetLanguagesForSpeakResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__GetLanguagesForSpeakResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__GetLanguagesForSpeakResponse * SOAP_FMAC4 soap_in__ns3__GetLanguagesForSpeakResponse(struct soap *soap, const char *tag, _ns3__GetLanguagesForSpeakResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__GetLanguagesForSpeakResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__GetLanguagesForSpeakResponse, sizeof(_ns3__GetLanguagesForSpeakResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__GetLanguagesForSpeakResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__GetLanguagesForSpeakResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetLanguagesForSpeakResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetLanguagesForSpeakResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfstring(soap, "ns3:GetLanguagesForSpeakResult", &(a->_ns3__GetLanguagesForSpeakResponse::GetLanguagesForSpeakResult), "ns5:ArrayOfstring"))
				{	soap_flag_GetLanguagesForSpeakResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:GetLanguagesForSpeakResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__GetLanguagesForSpeakResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__GetLanguagesForSpeakResponse, 0, sizeof(_ns3__GetLanguagesForSpeakResponse), 0, soap_copy__ns3__GetLanguagesForSpeakResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__GetLanguagesForSpeakResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__GetLanguagesForSpeakResponse);
	if (this->soap_out(soap, tag?tag:"ns3:GetLanguagesForSpeakResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__GetLanguagesForSpeakResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__GetLanguagesForSpeakResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__GetLanguagesForSpeakResponse * SOAP_FMAC4 soap_get__ns3__GetLanguagesForSpeakResponse(struct soap *soap, _ns3__GetLanguagesForSpeakResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__GetLanguagesForSpeakResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__GetLanguagesForSpeakResponse * SOAP_FMAC2 soap_instantiate__ns3__GetLanguagesForSpeakResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__GetLanguagesForSpeakResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__GetLanguagesForSpeakResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetLanguagesForSpeakResponse);
		if (size)
			*size = sizeof(_ns3__GetLanguagesForSpeakResponse);
		((_ns3__GetLanguagesForSpeakResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetLanguagesForSpeakResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__GetLanguagesForSpeakResponse);
		for (int i = 0; i < n; i++)
			((_ns3__GetLanguagesForSpeakResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__GetLanguagesForSpeakResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetLanguagesForSpeakResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__GetLanguagesForSpeakResponse %p -> %p\n", q, p));
	*(_ns3__GetLanguagesForSpeakResponse*)p = *(_ns3__GetLanguagesForSpeakResponse*)q;
}

void _ns3__GetLanguagesForSpeak::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__GetLanguagesForSpeak::appId = NULL;
	/* transient soap skipped */
}

void _ns3__GetLanguagesForSpeak::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__GetLanguagesForSpeak::appId);
	/* transient soap skipped */
}

int _ns3__GetLanguagesForSpeak::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__GetLanguagesForSpeak(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetLanguagesForSpeak(struct soap *soap, const char *tag, int id, const _ns3__GetLanguagesForSpeak *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__GetLanguagesForSpeak), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:appId", -1, &(a->_ns3__GetLanguagesForSpeak::appId), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__GetLanguagesForSpeak::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__GetLanguagesForSpeak(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__GetLanguagesForSpeak * SOAP_FMAC4 soap_in__ns3__GetLanguagesForSpeak(struct soap *soap, const char *tag, _ns3__GetLanguagesForSpeak *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__GetLanguagesForSpeak *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__GetLanguagesForSpeak, sizeof(_ns3__GetLanguagesForSpeak), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__GetLanguagesForSpeak)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__GetLanguagesForSpeak *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_appId1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_appId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:appId", &(a->_ns3__GetLanguagesForSpeak::appId), "xsd:string"))
				{	soap_flag_appId1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__GetLanguagesForSpeak *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__GetLanguagesForSpeak, 0, sizeof(_ns3__GetLanguagesForSpeak), 0, soap_copy__ns3__GetLanguagesForSpeak);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__GetLanguagesForSpeak::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__GetLanguagesForSpeak);
	if (this->soap_out(soap, tag?tag:"ns3:GetLanguagesForSpeak", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__GetLanguagesForSpeak::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__GetLanguagesForSpeak(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__GetLanguagesForSpeak * SOAP_FMAC4 soap_get__ns3__GetLanguagesForSpeak(struct soap *soap, _ns3__GetLanguagesForSpeak *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__GetLanguagesForSpeak(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__GetLanguagesForSpeak * SOAP_FMAC2 soap_instantiate__ns3__GetLanguagesForSpeak(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__GetLanguagesForSpeak(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__GetLanguagesForSpeak, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetLanguagesForSpeak);
		if (size)
			*size = sizeof(_ns3__GetLanguagesForSpeak);
		((_ns3__GetLanguagesForSpeak*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetLanguagesForSpeak[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__GetLanguagesForSpeak);
		for (int i = 0; i < n; i++)
			((_ns3__GetLanguagesForSpeak*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__GetLanguagesForSpeak*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetLanguagesForSpeak(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__GetLanguagesForSpeak %p -> %p\n", q, p));
	*(_ns3__GetLanguagesForSpeak*)p = *(_ns3__GetLanguagesForSpeak*)q;
}

void _ns3__GetLanguageNamesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__GetLanguageNamesResponse::GetLanguageNamesResult = NULL;
	/* transient soap skipped */
}

void _ns3__GetLanguageNamesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons5__ArrayOfstring(soap, &this->_ns3__GetLanguageNamesResponse::GetLanguageNamesResult);
	/* transient soap skipped */
}

int _ns3__GetLanguageNamesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__GetLanguageNamesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetLanguageNamesResponse(struct soap *soap, const char *tag, int id, const _ns3__GetLanguageNamesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__GetLanguageNamesResponse), type))
		return soap->error;
	if (a->GetLanguageNamesResult)
		soap_element_result(soap, "ns3:GetLanguageNamesResult");
	if (soap_out_PointerTons5__ArrayOfstring(soap, "ns3:GetLanguageNamesResult", -1, &(a->_ns3__GetLanguageNamesResponse::GetLanguageNamesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__GetLanguageNamesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__GetLanguageNamesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__GetLanguageNamesResponse * SOAP_FMAC4 soap_in__ns3__GetLanguageNamesResponse(struct soap *soap, const char *tag, _ns3__GetLanguageNamesResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__GetLanguageNamesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__GetLanguageNamesResponse, sizeof(_ns3__GetLanguageNamesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__GetLanguageNamesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__GetLanguageNamesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetLanguageNamesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetLanguageNamesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfstring(soap, "ns3:GetLanguageNamesResult", &(a->_ns3__GetLanguageNamesResponse::GetLanguageNamesResult), "ns5:ArrayOfstring"))
				{	soap_flag_GetLanguageNamesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:GetLanguageNamesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__GetLanguageNamesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__GetLanguageNamesResponse, 0, sizeof(_ns3__GetLanguageNamesResponse), 0, soap_copy__ns3__GetLanguageNamesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__GetLanguageNamesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__GetLanguageNamesResponse);
	if (this->soap_out(soap, tag?tag:"ns3:GetLanguageNamesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__GetLanguageNamesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__GetLanguageNamesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__GetLanguageNamesResponse * SOAP_FMAC4 soap_get__ns3__GetLanguageNamesResponse(struct soap *soap, _ns3__GetLanguageNamesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__GetLanguageNamesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__GetLanguageNamesResponse * SOAP_FMAC2 soap_instantiate__ns3__GetLanguageNamesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__GetLanguageNamesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__GetLanguageNamesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetLanguageNamesResponse);
		if (size)
			*size = sizeof(_ns3__GetLanguageNamesResponse);
		((_ns3__GetLanguageNamesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetLanguageNamesResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__GetLanguageNamesResponse);
		for (int i = 0; i < n; i++)
			((_ns3__GetLanguageNamesResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__GetLanguageNamesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetLanguageNamesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__GetLanguageNamesResponse %p -> %p\n", q, p));
	*(_ns3__GetLanguageNamesResponse*)p = *(_ns3__GetLanguageNamesResponse*)q;
}

void _ns3__GetLanguageNames::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__GetLanguageNames::appId = NULL;
	this->_ns3__GetLanguageNames::locale = NULL;
	this->_ns3__GetLanguageNames::languageCodes = NULL;
	/* transient soap skipped */
}

void _ns3__GetLanguageNames::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__GetLanguageNames::appId);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__GetLanguageNames::locale);
	soap_serialize_PointerTons5__ArrayOfstring(soap, &this->_ns3__GetLanguageNames::languageCodes);
	/* transient soap skipped */
}

int _ns3__GetLanguageNames::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__GetLanguageNames(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetLanguageNames(struct soap *soap, const char *tag, int id, const _ns3__GetLanguageNames *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__GetLanguageNames), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:appId", -1, &(a->_ns3__GetLanguageNames::appId), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:locale", -1, &(a->_ns3__GetLanguageNames::locale), ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfstring(soap, "ns3:languageCodes", -1, &(a->_ns3__GetLanguageNames::languageCodes), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__GetLanguageNames::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__GetLanguageNames(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__GetLanguageNames * SOAP_FMAC4 soap_in__ns3__GetLanguageNames(struct soap *soap, const char *tag, _ns3__GetLanguageNames *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__GetLanguageNames *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__GetLanguageNames, sizeof(_ns3__GetLanguageNames), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__GetLanguageNames)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__GetLanguageNames *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_appId1 = 1;
	size_t soap_flag_locale1 = 1;
	size_t soap_flag_languageCodes1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_appId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:appId", &(a->_ns3__GetLanguageNames::appId), "xsd:string"))
				{	soap_flag_appId1--;
					continue;
				}
			if (soap_flag_locale1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:locale", &(a->_ns3__GetLanguageNames::locale), "xsd:string"))
				{	soap_flag_locale1--;
					continue;
				}
			if (soap_flag_languageCodes1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfstring(soap, "ns3:languageCodes", &(a->_ns3__GetLanguageNames::languageCodes), "ns5:ArrayOfstring"))
				{	soap_flag_languageCodes1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__GetLanguageNames *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__GetLanguageNames, 0, sizeof(_ns3__GetLanguageNames), 0, soap_copy__ns3__GetLanguageNames);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__GetLanguageNames::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__GetLanguageNames);
	if (this->soap_out(soap, tag?tag:"ns3:GetLanguageNames", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__GetLanguageNames::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__GetLanguageNames(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__GetLanguageNames * SOAP_FMAC4 soap_get__ns3__GetLanguageNames(struct soap *soap, _ns3__GetLanguageNames *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__GetLanguageNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__GetLanguageNames * SOAP_FMAC2 soap_instantiate__ns3__GetLanguageNames(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__GetLanguageNames(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__GetLanguageNames, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetLanguageNames);
		if (size)
			*size = sizeof(_ns3__GetLanguageNames);
		((_ns3__GetLanguageNames*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetLanguageNames[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__GetLanguageNames);
		for (int i = 0; i < n; i++)
			((_ns3__GetLanguageNames*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__GetLanguageNames*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetLanguageNames(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__GetLanguageNames %p -> %p\n", q, p));
	*(_ns3__GetLanguageNames*)p = *(_ns3__GetLanguageNames*)q;
}

void _ns3__GetAppIdTokenResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__GetAppIdTokenResponse::GetAppIdTokenResult = NULL;
	/* transient soap skipped */
}

void _ns3__GetAppIdTokenResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__GetAppIdTokenResponse::GetAppIdTokenResult);
	/* transient soap skipped */
}

int _ns3__GetAppIdTokenResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__GetAppIdTokenResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetAppIdTokenResponse(struct soap *soap, const char *tag, int id, const _ns3__GetAppIdTokenResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__GetAppIdTokenResponse), type))
		return soap->error;
	if (a->GetAppIdTokenResult)
		soap_element_result(soap, "ns3:GetAppIdTokenResult");
	if (soap_out_PointerTostd__wstring(soap, "ns3:GetAppIdTokenResult", -1, &(a->_ns3__GetAppIdTokenResponse::GetAppIdTokenResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__GetAppIdTokenResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__GetAppIdTokenResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__GetAppIdTokenResponse * SOAP_FMAC4 soap_in__ns3__GetAppIdTokenResponse(struct soap *soap, const char *tag, _ns3__GetAppIdTokenResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__GetAppIdTokenResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__GetAppIdTokenResponse, sizeof(_ns3__GetAppIdTokenResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__GetAppIdTokenResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__GetAppIdTokenResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_GetAppIdTokenResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_GetAppIdTokenResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:GetAppIdTokenResult", &(a->_ns3__GetAppIdTokenResponse::GetAppIdTokenResult), "xsd:string"))
				{	soap_flag_GetAppIdTokenResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:GetAppIdTokenResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__GetAppIdTokenResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__GetAppIdTokenResponse, 0, sizeof(_ns3__GetAppIdTokenResponse), 0, soap_copy__ns3__GetAppIdTokenResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__GetAppIdTokenResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__GetAppIdTokenResponse);
	if (this->soap_out(soap, tag?tag:"ns3:GetAppIdTokenResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__GetAppIdTokenResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__GetAppIdTokenResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__GetAppIdTokenResponse * SOAP_FMAC4 soap_get__ns3__GetAppIdTokenResponse(struct soap *soap, _ns3__GetAppIdTokenResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__GetAppIdTokenResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__GetAppIdTokenResponse * SOAP_FMAC2 soap_instantiate__ns3__GetAppIdTokenResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__GetAppIdTokenResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__GetAppIdTokenResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetAppIdTokenResponse);
		if (size)
			*size = sizeof(_ns3__GetAppIdTokenResponse);
		((_ns3__GetAppIdTokenResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetAppIdTokenResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__GetAppIdTokenResponse);
		for (int i = 0; i < n; i++)
			((_ns3__GetAppIdTokenResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__GetAppIdTokenResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetAppIdTokenResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__GetAppIdTokenResponse %p -> %p\n", q, p));
	*(_ns3__GetAppIdTokenResponse*)p = *(_ns3__GetAppIdTokenResponse*)q;
}

void _ns3__GetAppIdToken::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__GetAppIdToken::appId = NULL;
	this->_ns3__GetAppIdToken::minRatingRead = NULL;
	this->_ns3__GetAppIdToken::maxRatingWrite = NULL;
	this->_ns3__GetAppIdToken::expireSeconds = NULL;
	/* transient soap skipped */
}

void _ns3__GetAppIdToken::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__GetAppIdToken::appId);
	soap_serialize_PointerToint(soap, &this->_ns3__GetAppIdToken::minRatingRead);
	soap_serialize_PointerToint(soap, &this->_ns3__GetAppIdToken::maxRatingWrite);
	soap_serialize_PointerToint(soap, &this->_ns3__GetAppIdToken::expireSeconds);
	/* transient soap skipped */
}

int _ns3__GetAppIdToken::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__GetAppIdToken(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__GetAppIdToken(struct soap *soap, const char *tag, int id, const _ns3__GetAppIdToken *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__GetAppIdToken), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:appId", -1, &(a->_ns3__GetAppIdToken::appId), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns3:minRatingRead", -1, &(a->_ns3__GetAppIdToken::minRatingRead), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns3:maxRatingWrite", -1, &(a->_ns3__GetAppIdToken::maxRatingWrite), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns3:expireSeconds", -1, &(a->_ns3__GetAppIdToken::expireSeconds), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__GetAppIdToken::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__GetAppIdToken(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__GetAppIdToken * SOAP_FMAC4 soap_in__ns3__GetAppIdToken(struct soap *soap, const char *tag, _ns3__GetAppIdToken *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__GetAppIdToken *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__GetAppIdToken, sizeof(_ns3__GetAppIdToken), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__GetAppIdToken)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__GetAppIdToken *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_appId1 = 1;
	size_t soap_flag_minRatingRead1 = 1;
	size_t soap_flag_maxRatingWrite1 = 1;
	size_t soap_flag_expireSeconds1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_appId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:appId", &(a->_ns3__GetAppIdToken::appId), "xsd:string"))
				{	soap_flag_appId1--;
					continue;
				}
			if (soap_flag_minRatingRead1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns3:minRatingRead", &(a->_ns3__GetAppIdToken::minRatingRead), "xsd:int"))
				{	soap_flag_minRatingRead1--;
					continue;
				}
			if (soap_flag_maxRatingWrite1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns3:maxRatingWrite", &(a->_ns3__GetAppIdToken::maxRatingWrite), "xsd:int"))
				{	soap_flag_maxRatingWrite1--;
					continue;
				}
			if (soap_flag_expireSeconds1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns3:expireSeconds", &(a->_ns3__GetAppIdToken::expireSeconds), "xsd:int"))
				{	soap_flag_expireSeconds1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__GetAppIdToken *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__GetAppIdToken, 0, sizeof(_ns3__GetAppIdToken), 0, soap_copy__ns3__GetAppIdToken);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__GetAppIdToken::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__GetAppIdToken);
	if (this->soap_out(soap, tag?tag:"ns3:GetAppIdToken", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__GetAppIdToken::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__GetAppIdToken(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__GetAppIdToken * SOAP_FMAC4 soap_get__ns3__GetAppIdToken(struct soap *soap, _ns3__GetAppIdToken *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__GetAppIdToken(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__GetAppIdToken * SOAP_FMAC2 soap_instantiate__ns3__GetAppIdToken(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__GetAppIdToken(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__GetAppIdToken, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetAppIdToken);
		if (size)
			*size = sizeof(_ns3__GetAppIdToken);
		((_ns3__GetAppIdToken*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__GetAppIdToken[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__GetAppIdToken);
		for (int i = 0; i < n; i++)
			((_ns3__GetAppIdToken*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__GetAppIdToken*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__GetAppIdToken(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__GetAppIdToken %p -> %p\n", q, p));
	*(_ns3__GetAppIdToken*)p = *(_ns3__GetAppIdToken*)q;
}

void _ns3__DetectArrayResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__DetectArrayResponse::DetectArrayResult = NULL;
	/* transient soap skipped */
}

void _ns3__DetectArrayResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons5__ArrayOfstring(soap, &this->_ns3__DetectArrayResponse::DetectArrayResult);
	/* transient soap skipped */
}

int _ns3__DetectArrayResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__DetectArrayResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__DetectArrayResponse(struct soap *soap, const char *tag, int id, const _ns3__DetectArrayResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__DetectArrayResponse), type))
		return soap->error;
	if (a->DetectArrayResult)
		soap_element_result(soap, "ns3:DetectArrayResult");
	if (soap_out_PointerTons5__ArrayOfstring(soap, "ns3:DetectArrayResult", -1, &(a->_ns3__DetectArrayResponse::DetectArrayResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__DetectArrayResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__DetectArrayResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__DetectArrayResponse * SOAP_FMAC4 soap_in__ns3__DetectArrayResponse(struct soap *soap, const char *tag, _ns3__DetectArrayResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__DetectArrayResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__DetectArrayResponse, sizeof(_ns3__DetectArrayResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__DetectArrayResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__DetectArrayResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DetectArrayResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DetectArrayResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfstring(soap, "ns3:DetectArrayResult", &(a->_ns3__DetectArrayResponse::DetectArrayResult), "ns5:ArrayOfstring"))
				{	soap_flag_DetectArrayResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:DetectArrayResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__DetectArrayResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__DetectArrayResponse, 0, sizeof(_ns3__DetectArrayResponse), 0, soap_copy__ns3__DetectArrayResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__DetectArrayResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__DetectArrayResponse);
	if (this->soap_out(soap, tag?tag:"ns3:DetectArrayResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__DetectArrayResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__DetectArrayResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__DetectArrayResponse * SOAP_FMAC4 soap_get__ns3__DetectArrayResponse(struct soap *soap, _ns3__DetectArrayResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__DetectArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__DetectArrayResponse * SOAP_FMAC2 soap_instantiate__ns3__DetectArrayResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__DetectArrayResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__DetectArrayResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__DetectArrayResponse);
		if (size)
			*size = sizeof(_ns3__DetectArrayResponse);
		((_ns3__DetectArrayResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__DetectArrayResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__DetectArrayResponse);
		for (int i = 0; i < n; i++)
			((_ns3__DetectArrayResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__DetectArrayResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__DetectArrayResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__DetectArrayResponse %p -> %p\n", q, p));
	*(_ns3__DetectArrayResponse*)p = *(_ns3__DetectArrayResponse*)q;
}

void _ns3__DetectArray::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__DetectArray::appId = NULL;
	this->_ns3__DetectArray::texts = NULL;
	/* transient soap skipped */
}

void _ns3__DetectArray::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__DetectArray::appId);
	soap_serialize_PointerTons5__ArrayOfstring(soap, &this->_ns3__DetectArray::texts);
	/* transient soap skipped */
}

int _ns3__DetectArray::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__DetectArray(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__DetectArray(struct soap *soap, const char *tag, int id, const _ns3__DetectArray *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__DetectArray), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:appId", -1, &(a->_ns3__DetectArray::appId), ""))
		return soap->error;
	if (soap_out_PointerTons5__ArrayOfstring(soap, "ns3:texts", -1, &(a->_ns3__DetectArray::texts), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__DetectArray::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__DetectArray(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__DetectArray * SOAP_FMAC4 soap_in__ns3__DetectArray(struct soap *soap, const char *tag, _ns3__DetectArray *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__DetectArray *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__DetectArray, sizeof(_ns3__DetectArray), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__DetectArray)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__DetectArray *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_appId1 = 1;
	size_t soap_flag_texts1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_appId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:appId", &(a->_ns3__DetectArray::appId), "xsd:string"))
				{	soap_flag_appId1--;
					continue;
				}
			if (soap_flag_texts1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfstring(soap, "ns3:texts", &(a->_ns3__DetectArray::texts), "ns5:ArrayOfstring"))
				{	soap_flag_texts1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__DetectArray *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__DetectArray, 0, sizeof(_ns3__DetectArray), 0, soap_copy__ns3__DetectArray);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__DetectArray::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__DetectArray);
	if (this->soap_out(soap, tag?tag:"ns3:DetectArray", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__DetectArray::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__DetectArray(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__DetectArray * SOAP_FMAC4 soap_get__ns3__DetectArray(struct soap *soap, _ns3__DetectArray *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__DetectArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__DetectArray * SOAP_FMAC2 soap_instantiate__ns3__DetectArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__DetectArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__DetectArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__DetectArray);
		if (size)
			*size = sizeof(_ns3__DetectArray);
		((_ns3__DetectArray*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__DetectArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__DetectArray);
		for (int i = 0; i < n; i++)
			((_ns3__DetectArray*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__DetectArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__DetectArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__DetectArray %p -> %p\n", q, p));
	*(_ns3__DetectArray*)p = *(_ns3__DetectArray*)q;
}

void _ns3__DetectResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__DetectResponse::DetectResult = NULL;
	/* transient soap skipped */
}

void _ns3__DetectResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__DetectResponse::DetectResult);
	/* transient soap skipped */
}

int _ns3__DetectResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__DetectResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__DetectResponse(struct soap *soap, const char *tag, int id, const _ns3__DetectResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__DetectResponse), type))
		return soap->error;
	if (a->DetectResult)
		soap_element_result(soap, "ns3:DetectResult");
	if (soap_out_PointerTostd__wstring(soap, "ns3:DetectResult", -1, &(a->_ns3__DetectResponse::DetectResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__DetectResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__DetectResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__DetectResponse * SOAP_FMAC4 soap_in__ns3__DetectResponse(struct soap *soap, const char *tag, _ns3__DetectResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__DetectResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__DetectResponse, sizeof(_ns3__DetectResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__DetectResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__DetectResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_DetectResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_DetectResult1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:DetectResult", &(a->_ns3__DetectResponse::DetectResult), "xsd:string"))
				{	soap_flag_DetectResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:DetectResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__DetectResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__DetectResponse, 0, sizeof(_ns3__DetectResponse), 0, soap_copy__ns3__DetectResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__DetectResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__DetectResponse);
	if (this->soap_out(soap, tag?tag:"ns3:DetectResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__DetectResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__DetectResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__DetectResponse * SOAP_FMAC4 soap_get__ns3__DetectResponse(struct soap *soap, _ns3__DetectResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__DetectResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__DetectResponse * SOAP_FMAC2 soap_instantiate__ns3__DetectResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__DetectResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__DetectResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__DetectResponse);
		if (size)
			*size = sizeof(_ns3__DetectResponse);
		((_ns3__DetectResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__DetectResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__DetectResponse);
		for (int i = 0; i < n; i++)
			((_ns3__DetectResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__DetectResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__DetectResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__DetectResponse %p -> %p\n", q, p));
	*(_ns3__DetectResponse*)p = *(_ns3__DetectResponse*)q;
}

void _ns3__Detect::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__Detect::appId = NULL;
	this->_ns3__Detect::text = NULL;
	/* transient soap skipped */
}

void _ns3__Detect::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__Detect::appId);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__Detect::text);
	/* transient soap skipped */
}

int _ns3__Detect::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__Detect(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__Detect(struct soap *soap, const char *tag, int id, const _ns3__Detect *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__Detect), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:appId", -1, &(a->_ns3__Detect::appId), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:text", -1, &(a->_ns3__Detect::text), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__Detect::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__Detect(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__Detect * SOAP_FMAC4 soap_in__ns3__Detect(struct soap *soap, const char *tag, _ns3__Detect *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__Detect *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__Detect, sizeof(_ns3__Detect), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__Detect)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__Detect *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_appId1 = 1;
	size_t soap_flag_text1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_appId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:appId", &(a->_ns3__Detect::appId), "xsd:string"))
				{	soap_flag_appId1--;
					continue;
				}
			if (soap_flag_text1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:text", &(a->_ns3__Detect::text), "xsd:string"))
				{	soap_flag_text1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__Detect *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__Detect, 0, sizeof(_ns3__Detect), 0, soap_copy__ns3__Detect);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__Detect::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__Detect);
	if (this->soap_out(soap, tag?tag:"ns3:Detect", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__Detect::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__Detect(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__Detect * SOAP_FMAC4 soap_get__ns3__Detect(struct soap *soap, _ns3__Detect *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__Detect(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__Detect * SOAP_FMAC2 soap_instantiate__ns3__Detect(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__Detect(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__Detect, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__Detect);
		if (size)
			*size = sizeof(_ns3__Detect);
		((_ns3__Detect*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__Detect[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__Detect);
		for (int i = 0; i < n; i++)
			((_ns3__Detect*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__Detect*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__Detect(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__Detect %p -> %p\n", q, p));
	*(_ns3__Detect*)p = *(_ns3__Detect*)q;
}

void _ns3__BreakSentencesResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__BreakSentencesResponse::BreakSentencesResult = NULL;
	/* transient soap skipped */
}

void _ns3__BreakSentencesResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTons5__ArrayOfint(soap, &this->_ns3__BreakSentencesResponse::BreakSentencesResult);
	/* transient soap skipped */
}

int _ns3__BreakSentencesResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__BreakSentencesResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__BreakSentencesResponse(struct soap *soap, const char *tag, int id, const _ns3__BreakSentencesResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__BreakSentencesResponse), type))
		return soap->error;
	if (a->BreakSentencesResult)
		soap_element_result(soap, "ns3:BreakSentencesResult");
	if (soap_out_PointerTons5__ArrayOfint(soap, "ns3:BreakSentencesResult", -1, &(a->_ns3__BreakSentencesResponse::BreakSentencesResult), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__BreakSentencesResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__BreakSentencesResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__BreakSentencesResponse * SOAP_FMAC4 soap_in__ns3__BreakSentencesResponse(struct soap *soap, const char *tag, _ns3__BreakSentencesResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__BreakSentencesResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__BreakSentencesResponse, sizeof(_ns3__BreakSentencesResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__BreakSentencesResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__BreakSentencesResponse *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_BreakSentencesResult1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_BreakSentencesResult1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTons5__ArrayOfint(soap, "ns3:BreakSentencesResult", &(a->_ns3__BreakSentencesResponse::BreakSentencesResult), "ns5:ArrayOfint"))
				{	soap_flag_BreakSentencesResult1--;
					continue;
				}
			/* transient soap skipped */
			soap_check_result(soap, "ns3:BreakSentencesResult");
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__BreakSentencesResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__BreakSentencesResponse, 0, sizeof(_ns3__BreakSentencesResponse), 0, soap_copy__ns3__BreakSentencesResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__BreakSentencesResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__BreakSentencesResponse);
	if (this->soap_out(soap, tag?tag:"ns3:BreakSentencesResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__BreakSentencesResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__BreakSentencesResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__BreakSentencesResponse * SOAP_FMAC4 soap_get__ns3__BreakSentencesResponse(struct soap *soap, _ns3__BreakSentencesResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__BreakSentencesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__BreakSentencesResponse * SOAP_FMAC2 soap_instantiate__ns3__BreakSentencesResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__BreakSentencesResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__BreakSentencesResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__BreakSentencesResponse);
		if (size)
			*size = sizeof(_ns3__BreakSentencesResponse);
		((_ns3__BreakSentencesResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__BreakSentencesResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__BreakSentencesResponse);
		for (int i = 0; i < n; i++)
			((_ns3__BreakSentencesResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__BreakSentencesResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__BreakSentencesResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__BreakSentencesResponse %p -> %p\n", q, p));
	*(_ns3__BreakSentencesResponse*)p = *(_ns3__BreakSentencesResponse*)q;
}

void _ns3__BreakSentences::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__BreakSentences::appId = NULL;
	this->_ns3__BreakSentences::text = NULL;
	this->_ns3__BreakSentences::language = NULL;
	/* transient soap skipped */
}

void _ns3__BreakSentences::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__BreakSentences::appId);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__BreakSentences::text);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__BreakSentences::language);
	/* transient soap skipped */
}

int _ns3__BreakSentences::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__BreakSentences(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__BreakSentences(struct soap *soap, const char *tag, int id, const _ns3__BreakSentences *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__BreakSentences), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:appId", -1, &(a->_ns3__BreakSentences::appId), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:text", -1, &(a->_ns3__BreakSentences::text), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:language", -1, &(a->_ns3__BreakSentences::language), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__BreakSentences::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__BreakSentences(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__BreakSentences * SOAP_FMAC4 soap_in__ns3__BreakSentences(struct soap *soap, const char *tag, _ns3__BreakSentences *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__BreakSentences *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__BreakSentences, sizeof(_ns3__BreakSentences), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__BreakSentences)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__BreakSentences *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_appId1 = 1;
	size_t soap_flag_text1 = 1;
	size_t soap_flag_language1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_appId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:appId", &(a->_ns3__BreakSentences::appId), "xsd:string"))
				{	soap_flag_appId1--;
					continue;
				}
			if (soap_flag_text1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:text", &(a->_ns3__BreakSentences::text), "xsd:string"))
				{	soap_flag_text1--;
					continue;
				}
			if (soap_flag_language1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:language", &(a->_ns3__BreakSentences::language), "xsd:string"))
				{	soap_flag_language1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__BreakSentences *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__BreakSentences, 0, sizeof(_ns3__BreakSentences), 0, soap_copy__ns3__BreakSentences);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__BreakSentences::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__BreakSentences);
	if (this->soap_out(soap, tag?tag:"ns3:BreakSentences", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__BreakSentences::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__BreakSentences(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__BreakSentences * SOAP_FMAC4 soap_get__ns3__BreakSentences(struct soap *soap, _ns3__BreakSentences *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__BreakSentences(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__BreakSentences * SOAP_FMAC2 soap_instantiate__ns3__BreakSentences(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__BreakSentences(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__BreakSentences, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__BreakSentences);
		if (size)
			*size = sizeof(_ns3__BreakSentences);
		((_ns3__BreakSentences*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__BreakSentences[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__BreakSentences);
		for (int i = 0; i < n; i++)
			((_ns3__BreakSentences*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__BreakSentences*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__BreakSentences(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__BreakSentences %p -> %p\n", q, p));
	*(_ns3__BreakSentences*)p = *(_ns3__BreakSentences*)q;
}

void _ns3__AddTranslationResponse::soap_default(struct soap *soap)
{
	this->soap = soap;
	/* transient soap skipped */
}

void _ns3__AddTranslationResponse::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int _ns3__AddTranslationResponse::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__AddTranslationResponse(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__AddTranslationResponse(struct soap *soap, const char *tag, int id, const _ns3__AddTranslationResponse *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__AddTranslationResponse), type))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__AddTranslationResponse::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__AddTranslationResponse(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__AddTranslationResponse * SOAP_FMAC4 soap_in__ns3__AddTranslationResponse(struct soap *soap, const char *tag, _ns3__AddTranslationResponse *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__AddTranslationResponse *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__AddTranslationResponse, sizeof(_ns3__AddTranslationResponse), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__AddTranslationResponse)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__AddTranslationResponse *)a->soap_in(soap, tag, type);
		}
	}
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__AddTranslationResponse *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__AddTranslationResponse, 0, sizeof(_ns3__AddTranslationResponse), 0, soap_copy__ns3__AddTranslationResponse);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__AddTranslationResponse::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__AddTranslationResponse);
	if (this->soap_out(soap, tag?tag:"ns3:AddTranslationResponse", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__AddTranslationResponse::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__AddTranslationResponse(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__AddTranslationResponse * SOAP_FMAC4 soap_get__ns3__AddTranslationResponse(struct soap *soap, _ns3__AddTranslationResponse *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__AddTranslationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__AddTranslationResponse * SOAP_FMAC2 soap_instantiate__ns3__AddTranslationResponse(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__AddTranslationResponse(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__AddTranslationResponse, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__AddTranslationResponse);
		if (size)
			*size = sizeof(_ns3__AddTranslationResponse);
		((_ns3__AddTranslationResponse*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__AddTranslationResponse[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__AddTranslationResponse);
		for (int i = 0; i < n; i++)
			((_ns3__AddTranslationResponse*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__AddTranslationResponse*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__AddTranslationResponse(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__AddTranslationResponse %p -> %p\n", q, p));
	*(_ns3__AddTranslationResponse*)p = *(_ns3__AddTranslationResponse*)q;
}

void _ns3__AddTranslation::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->_ns3__AddTranslation::appId = NULL;
	this->_ns3__AddTranslation::originalText = NULL;
	this->_ns3__AddTranslation::translatedText = NULL;
	this->_ns3__AddTranslation::from = NULL;
	this->_ns3__AddTranslation::to = NULL;
	this->_ns3__AddTranslation::rating = NULL;
	this->_ns3__AddTranslation::contentType = NULL;
	this->_ns3__AddTranslation::category = NULL;
	this->_ns3__AddTranslation::user = NULL;
	this->_ns3__AddTranslation::uri = NULL;
	/* transient soap skipped */
}

void _ns3__AddTranslation::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__AddTranslation::appId);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__AddTranslation::originalText);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__AddTranslation::translatedText);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__AddTranslation::from);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__AddTranslation::to);
	soap_serialize_PointerToint(soap, &this->_ns3__AddTranslation::rating);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__AddTranslation::contentType);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__AddTranslation::category);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__AddTranslation::user);
	soap_serialize_PointerTostd__wstring(soap, &this->_ns3__AddTranslation::uri);
	/* transient soap skipped */
}

int _ns3__AddTranslation::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out__ns3__AddTranslation(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__ns3__AddTranslation(struct soap *soap, const char *tag, int id, const _ns3__AddTranslation *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE__ns3__AddTranslation), type))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:appId", -1, &(a->_ns3__AddTranslation::appId), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:originalText", -1, &(a->_ns3__AddTranslation::originalText), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:translatedText", -1, &(a->_ns3__AddTranslation::translatedText), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:from", -1, &(a->_ns3__AddTranslation::from), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:to", -1, &(a->_ns3__AddTranslation::to), ""))
		return soap->error;
	if (soap_out_PointerToint(soap, "ns3:rating", -1, &(a->_ns3__AddTranslation::rating), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:contentType", -1, &(a->_ns3__AddTranslation::contentType), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:category", -1, &(a->_ns3__AddTranslation::category), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:user", -1, &(a->_ns3__AddTranslation::user), ""))
		return soap->error;
	if (soap_out_PointerTostd__wstring(soap, "ns3:uri", -1, &(a->_ns3__AddTranslation::uri), ""))
		return soap->error;
	/* transient soap skipped */
	return soap_element_end_out(soap, tag);
}

void *_ns3__AddTranslation::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in__ns3__AddTranslation(soap, tag, this, type);
}

SOAP_FMAC3 _ns3__AddTranslation * SOAP_FMAC4 soap_in__ns3__AddTranslation(struct soap *soap, const char *tag, _ns3__AddTranslation *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 0, NULL))
		return NULL;
	a = (_ns3__AddTranslation *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE__ns3__AddTranslation, sizeof(_ns3__AddTranslation), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE__ns3__AddTranslation)
		{	soap_revert(soap);
			*soap->id = '\0';
			return (_ns3__AddTranslation *)a->soap_in(soap, tag, type);
		}
	}
	size_t soap_flag_appId1 = 1;
	size_t soap_flag_originalText1 = 1;
	size_t soap_flag_translatedText1 = 1;
	size_t soap_flag_from1 = 1;
	size_t soap_flag_to1 = 1;
	size_t soap_flag_rating1 = 1;
	size_t soap_flag_contentType1 = 1;
	size_t soap_flag_category1 = 1;
	size_t soap_flag_user1 = 1;
	size_t soap_flag_uri1 = 1;
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_appId1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:appId", &(a->_ns3__AddTranslation::appId), "xsd:string"))
				{	soap_flag_appId1--;
					continue;
				}
			if (soap_flag_originalText1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:originalText", &(a->_ns3__AddTranslation::originalText), "xsd:string"))
				{	soap_flag_originalText1--;
					continue;
				}
			if (soap_flag_translatedText1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:translatedText", &(a->_ns3__AddTranslation::translatedText), "xsd:string"))
				{	soap_flag_translatedText1--;
					continue;
				}
			if (soap_flag_from1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:from", &(a->_ns3__AddTranslation::from), "xsd:string"))
				{	soap_flag_from1--;
					continue;
				}
			if (soap_flag_to1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:to", &(a->_ns3__AddTranslation::to), "xsd:string"))
				{	soap_flag_to1--;
					continue;
				}
			if (soap_flag_rating1 && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToint(soap, "ns3:rating", &(a->_ns3__AddTranslation::rating), "xsd:int"))
				{	soap_flag_rating1--;
					continue;
				}
			if (soap_flag_contentType1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:contentType", &(a->_ns3__AddTranslation::contentType), "xsd:string"))
				{	soap_flag_contentType1--;
					continue;
				}
			if (soap_flag_category1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:category", &(a->_ns3__AddTranslation::category), "xsd:string"))
				{	soap_flag_category1--;
					continue;
				}
			if (soap_flag_user1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:user", &(a->_ns3__AddTranslation::user), "xsd:string"))
				{	soap_flag_user1--;
					continue;
				}
			if (soap_flag_uri1 && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_PointerTostd__wstring(soap, "ns3:uri", &(a->_ns3__AddTranslation::uri), "xsd:string"))
				{	soap_flag_uri1--;
					continue;
				}
			/* transient soap skipped */
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (_ns3__AddTranslation *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE__ns3__AddTranslation, 0, sizeof(_ns3__AddTranslation), 0, soap_copy__ns3__AddTranslation);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int _ns3__AddTranslation::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE__ns3__AddTranslation);
	if (this->soap_out(soap, tag?tag:"ns3:AddTranslation", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *_ns3__AddTranslation::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get__ns3__AddTranslation(soap, this, tag, type);
}

SOAP_FMAC3 _ns3__AddTranslation * SOAP_FMAC4 soap_get__ns3__AddTranslation(struct soap *soap, _ns3__AddTranslation *p, const char *tag, const char *type)
{
	if ((p = soap_in__ns3__AddTranslation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 _ns3__AddTranslation * SOAP_FMAC2 soap_instantiate__ns3__AddTranslation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate__ns3__AddTranslation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE__ns3__AddTranslation, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(_ns3__AddTranslation);
		if (size)
			*size = sizeof(_ns3__AddTranslation);
		((_ns3__AddTranslation*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(_ns3__AddTranslation[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(_ns3__AddTranslation);
		for (int i = 0; i < n; i++)
			((_ns3__AddTranslation*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (_ns3__AddTranslation*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy__ns3__AddTranslation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying _ns3__AddTranslation %p -> %p\n", q, p));
	*(_ns3__AddTranslation*)p = *(_ns3__AddTranslation*)q;
}

void xsd__unsignedShort::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedShort(soap, &this->xsd__unsignedShort::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__unsignedShort::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__unsignedShort::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedShort(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedShort(struct soap *soap, const char *tag, int id, const xsd__unsignedShort *a, const char *type)
{
	return soap_out_unsignedShort(soap, tag, id, &(a->xsd__unsignedShort::__item), "xsd:unsignedShort");
}

void *xsd__unsignedShort::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedShort(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_in_xsd__unsignedShort(struct soap *soap, const char *tag, xsd__unsignedShort *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedShort *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedShort, sizeof(xsd__unsignedShort), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__unsignedShort)
			return (xsd__unsignedShort *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_unsignedShort(soap, tag, &(a->xsd__unsignedShort::__item), "xsd:unsignedShort"))
		return NULL;
	return a;
}

int xsd__unsignedShort::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__unsignedShort);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedShort", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedShort::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedShort(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedShort * SOAP_FMAC4 soap_get_xsd__unsignedShort(struct soap *soap, xsd__unsignedShort *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedShort(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedShort * SOAP_FMAC2 soap_instantiate_xsd__unsignedShort(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedShort(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__unsignedShort, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedShort);
		if (size)
			*size = sizeof(xsd__unsignedShort);
		((xsd__unsignedShort*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedShort[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__unsignedShort);
		for (int i = 0; i < n; i++)
			((xsd__unsignedShort*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__unsignedShort*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedShort(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedShort %p -> %p\n", q, p));
	*(xsd__unsignedShort*)p = *(xsd__unsignedShort*)q;
}

void xsd__unsignedLong::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedLONG64(soap, &this->xsd__unsignedLong::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__unsignedLong::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__unsignedLong::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedLong(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedLong(struct soap *soap, const char *tag, int id, const xsd__unsignedLong *a, const char *type)
{
	return soap_out_unsignedLONG64(soap, tag, id, &(a->xsd__unsignedLong::__item), "xsd:unsignedLong");
}

void *xsd__unsignedLong::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedLong(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_in_xsd__unsignedLong(struct soap *soap, const char *tag, xsd__unsignedLong *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedLong *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedLong, sizeof(xsd__unsignedLong), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__unsignedLong)
			return (xsd__unsignedLong *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_unsignedLONG64(soap, tag, &(a->xsd__unsignedLong::__item), "xsd:unsignedLong"))
		return NULL;
	return a;
}

int xsd__unsignedLong::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__unsignedLong);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedLong", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedLong::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedLong(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedLong * SOAP_FMAC4 soap_get_xsd__unsignedLong(struct soap *soap, xsd__unsignedLong *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedLong(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedLong * SOAP_FMAC2 soap_instantiate_xsd__unsignedLong(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedLong(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__unsignedLong, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedLong);
		if (size)
			*size = sizeof(xsd__unsignedLong);
		((xsd__unsignedLong*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedLong[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__unsignedLong);
		for (int i = 0; i < n; i++)
			((xsd__unsignedLong*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__unsignedLong*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedLong(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedLong %p -> %p\n", q, p));
	*(xsd__unsignedLong*)p = *(xsd__unsignedLong*)q;
}

void xsd__unsignedInt::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_unsignedInt(soap, &this->xsd__unsignedInt::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__unsignedInt::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__unsignedInt::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedInt(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedInt(struct soap *soap, const char *tag, int id, const xsd__unsignedInt *a, const char *type)
{
	return soap_out_unsignedInt(soap, tag, id, &(a->xsd__unsignedInt::__item), "xsd:unsignedInt");
}

void *xsd__unsignedInt::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedInt(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_in_xsd__unsignedInt(struct soap *soap, const char *tag, xsd__unsignedInt *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedInt *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedInt, sizeof(xsd__unsignedInt), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__unsignedInt)
			return (xsd__unsignedInt *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_unsignedInt(soap, tag, &(a->xsd__unsignedInt::__item), "xsd:unsignedInt"))
		return NULL;
	return a;
}

int xsd__unsignedInt::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__unsignedInt);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedInt", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedInt::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedInt(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedInt * SOAP_FMAC4 soap_get_xsd__unsignedInt(struct soap *soap, xsd__unsignedInt *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedInt(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedInt * SOAP_FMAC2 soap_instantiate_xsd__unsignedInt(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedInt(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__unsignedInt, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedInt);
		if (size)
			*size = sizeof(xsd__unsignedInt);
		((xsd__unsignedInt*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedInt[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__unsignedInt);
		for (int i = 0; i < n; i++)
			((xsd__unsignedInt*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__unsignedInt*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedInt(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedInt %p -> %p\n", q, p));
	*(xsd__unsignedInt*)p = *(xsd__unsignedInt*)q;
}

void xsd__unsignedByte_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__unsignedByte(soap, &this->xsd__unsignedByte_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__unsignedByte_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__unsignedByte_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__unsignedByte_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__unsignedByte_(struct soap *soap, const char *tag, int id, const xsd__unsignedByte_ *a, const char *type)
{
	return soap_out_xsd__unsignedByte(soap, tag, id, &(a->xsd__unsignedByte_::__item), "xsd:unsignedByte");
}

void *xsd__unsignedByte_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__unsignedByte_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_in_xsd__unsignedByte_(struct soap *soap, const char *tag, xsd__unsignedByte_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__unsignedByte_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__unsignedByte_, sizeof(xsd__unsignedByte_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__unsignedByte_)
			return (xsd__unsignedByte_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__unsignedByte(soap, tag, &(a->xsd__unsignedByte_::__item), "xsd:unsignedByte"))
		return NULL;
	return a;
}

int xsd__unsignedByte_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__unsignedByte_);
	if (this->soap_out(soap, tag?tag:"xsd:unsignedByte", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__unsignedByte_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__unsignedByte_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__unsignedByte_ * SOAP_FMAC4 soap_get_xsd__unsignedByte_(struct soap *soap, xsd__unsignedByte_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__unsignedByte_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__unsignedByte_ * SOAP_FMAC2 soap_instantiate_xsd__unsignedByte_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__unsignedByte_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__unsignedByte_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedByte_);
		if (size)
			*size = sizeof(xsd__unsignedByte_);
		((xsd__unsignedByte_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedByte_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__unsignedByte_);
		for (int i = 0; i < n; i++)
			((xsd__unsignedByte_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__unsignedByte_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__unsignedByte_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__unsignedByte_ %p -> %p\n", q, p));
	*(xsd__unsignedByte_*)p = *(xsd__unsignedByte_*)q;
}

void xsd__string::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_std__wstring(soap, &this->xsd__string::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__string::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->xsd__string::__item, SOAP_TYPE_std__wstring);
	soap_serialize_std__wstring(soap, &this->xsd__string::__item);
	/* transient soap skipped */
}

int xsd__string::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__string(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__string(struct soap *soap, const char *tag, int id, const xsd__string *a, const char *type)
{
	return soap_out_std__wstring(soap, tag, id, &(a->xsd__string::__item), "xsd:string");
}

void *xsd__string::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__string(soap, tag, this, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_in_xsd__string(struct soap *soap, const char *tag, xsd__string *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__string *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__string, sizeof(xsd__string), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__string)
			return (xsd__string *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_std__wstring(soap, tag, &(a->xsd__string::__item), "xsd:string"))
		return NULL;
	return a;
}

int xsd__string::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__string);
	if (this->soap_out(soap, tag?tag:"xsd:string", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__string::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__string(soap, this, tag, type);
}

SOAP_FMAC3 xsd__string * SOAP_FMAC4 soap_get_xsd__string(struct soap *soap, xsd__string *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__string * SOAP_FMAC2 soap_instantiate_xsd__string(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__string(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__string, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__string);
		if (size)
			*size = sizeof(xsd__string);
		((xsd__string*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__string[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__string);
		for (int i = 0; i < n; i++)
			((xsd__string*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__string*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__string(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__string %p -> %p\n", q, p));
	*(xsd__string*)p = *(xsd__string*)q;
}

void xsd__short::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_short(soap, &this->xsd__short::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__short::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__short::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__short(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__short(struct soap *soap, const char *tag, int id, const xsd__short *a, const char *type)
{
	return soap_out_short(soap, tag, id, &(a->xsd__short::__item), "xsd:short");
}

void *xsd__short::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__short(soap, tag, this, type);
}

SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_in_xsd__short(struct soap *soap, const char *tag, xsd__short *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__short *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__short, sizeof(xsd__short), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__short)
			return (xsd__short *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_short(soap, tag, &(a->xsd__short::__item), "xsd:short"))
		return NULL;
	return a;
}

int xsd__short::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__short);
	if (this->soap_out(soap, tag?tag:"xsd:short", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__short::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__short(soap, this, tag, type);
}

SOAP_FMAC3 xsd__short * SOAP_FMAC4 soap_get_xsd__short(struct soap *soap, xsd__short *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__short(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__short * SOAP_FMAC2 soap_instantiate_xsd__short(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__short(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__short, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__short);
		if (size)
			*size = sizeof(xsd__short);
		((xsd__short*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__short[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__short);
		for (int i = 0; i < n; i++)
			((xsd__short*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__short*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__short(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__short %p -> %p\n", q, p));
	*(xsd__short*)p = *(xsd__short*)q;
}

void xsd__long::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_LONG64(soap, &this->xsd__long::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__long::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__long::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__long(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__long(struct soap *soap, const char *tag, int id, const xsd__long *a, const char *type)
{
	return soap_out_LONG64(soap, tag, id, &(a->xsd__long::__item), "xsd:long");
}

void *xsd__long::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__long(soap, tag, this, type);
}

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_in_xsd__long(struct soap *soap, const char *tag, xsd__long *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__long *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__long, sizeof(xsd__long), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__long)
			return (xsd__long *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_LONG64(soap, tag, &(a->xsd__long::__item), "xsd:long"))
		return NULL;
	return a;
}

int xsd__long::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__long);
	if (this->soap_out(soap, tag?tag:"xsd:long", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__long::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__long(soap, this, tag, type);
}

SOAP_FMAC3 xsd__long * SOAP_FMAC4 soap_get_xsd__long(struct soap *soap, xsd__long *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__long(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__long * SOAP_FMAC2 soap_instantiate_xsd__long(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__long(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__long, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__long);
		if (size)
			*size = sizeof(xsd__long);
		((xsd__long*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__long[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__long);
		for (int i = 0; i < n; i++)
			((xsd__long*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__long*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__long(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__long %p -> %p\n", q, p));
	*(xsd__long*)p = *(xsd__long*)q;
}

void xsd__int::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_int(soap, &this->xsd__int::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__int::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_embedded(soap, &this->xsd__int::__item, SOAP_TYPE_int);
	/* transient soap skipped */
}

int xsd__int::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__int(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__int(struct soap *soap, const char *tag, int id, const xsd__int *a, const char *type)
{
	return soap_out_int(soap, tag, id, &(a->xsd__int::__item), "xsd:int");
}

void *xsd__int::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__int(soap, tag, this, type);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_in_xsd__int(struct soap *soap, const char *tag, xsd__int *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__int *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__int, sizeof(xsd__int), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__int)
			return (xsd__int *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_int(soap, tag, &(a->xsd__int::__item), "xsd:int"))
		return NULL;
	return a;
}

int xsd__int::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__int);
	if (this->soap_out(soap, tag?tag:"xsd:int", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__int::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__int(soap, this, tag, type);
}

SOAP_FMAC3 xsd__int * SOAP_FMAC4 soap_get_xsd__int(struct soap *soap, xsd__int *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__int(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__int * SOAP_FMAC2 soap_instantiate_xsd__int(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__int(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__int, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__int);
		if (size)
			*size = sizeof(xsd__int);
		((xsd__int*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__int[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__int);
		for (int i = 0; i < n; i++)
			((xsd__int*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__int*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__int(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__int %p -> %p\n", q, p));
	*(xsd__int*)p = *(xsd__int*)q;
}

void xsd__float::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_float(soap, &this->xsd__float::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__float::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__float::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__float(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__float(struct soap *soap, const char *tag, int id, const xsd__float *a, const char *type)
{
	return soap_out_float(soap, tag, id, &(a->xsd__float::__item), "xsd:float");
}

void *xsd__float::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__float(soap, tag, this, type);
}

SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_in_xsd__float(struct soap *soap, const char *tag, xsd__float *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__float *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__float, sizeof(xsd__float), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__float)
			return (xsd__float *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_float(soap, tag, &(a->xsd__float::__item), "xsd:float"))
		return NULL;
	return a;
}

int xsd__float::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__float);
	if (this->soap_out(soap, tag?tag:"xsd:float", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__float::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__float(soap, this, tag, type);
}

SOAP_FMAC3 xsd__float * SOAP_FMAC4 soap_get_xsd__float(struct soap *soap, xsd__float *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__float(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__float * SOAP_FMAC2 soap_instantiate_xsd__float(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__float(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__float, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__float);
		if (size)
			*size = sizeof(xsd__float);
		((xsd__float*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__float[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__float);
		for (int i = 0; i < n; i++)
			((xsd__float*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__float*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__float(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__float %p -> %p\n", q, p));
	*(xsd__float*)p = *(xsd__float*)q;
}

void xsd__duration_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__duration(soap, &this->xsd__duration_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__duration_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__duration(soap, &this->xsd__duration_::__item);
	/* transient soap skipped */
}

int xsd__duration_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__duration_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration_(struct soap *soap, const char *tag, int id, const xsd__duration_ *a, const char *type)
{
	return soap_out_xsd__duration(soap, tag, id, &(a->xsd__duration_::__item), "xsd:duration");
}

void *xsd__duration_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__duration_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_in_xsd__duration_(struct soap *soap, const char *tag, xsd__duration_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__duration_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__duration_, sizeof(xsd__duration_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__duration_)
			return (xsd__duration_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__duration(soap, tag, &(a->xsd__duration_::__item), "xsd:duration"))
		return NULL;
	return a;
}

int xsd__duration_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__duration_);
	if (this->soap_out(soap, tag?tag:"xsd:duration", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__duration_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__duration_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__duration_ * SOAP_FMAC4 soap_get_xsd__duration_(struct soap *soap, xsd__duration_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__duration_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__duration_ * SOAP_FMAC2 soap_instantiate_xsd__duration_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__duration_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__duration_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__duration_);
		if (size)
			*size = sizeof(xsd__duration_);
		((xsd__duration_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__duration_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__duration_);
		for (int i = 0; i < n; i++)
			((xsd__duration_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__duration_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__duration_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__duration_ %p -> %p\n", q, p));
	*(xsd__duration_*)p = *(xsd__duration_*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__duration(struct soap *soap, const char *tag, int id, const std::wstring *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__duration), type) || soap_wstring_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__duration(struct soap *soap, const char *tag, std::wstring *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__wstring(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	wchar_t *t;
		s = (std::wstring*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__duration, sizeof(std::wstring), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_wstring_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::wstring*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__duration, sizeof(std::wstring), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__duration, 0, sizeof(std::wstring), 0, soap_copy_xsd__duration);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__duration(struct soap *soap, const std::wstring *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__duration);
	if (soap_out_xsd__duration(soap, tag?tag:"xsd:duration", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__duration(struct soap *soap, std::wstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__duration(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__double::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_double(soap, &this->xsd__double::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__double::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__double::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__double(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__double(struct soap *soap, const char *tag, int id, const xsd__double *a, const char *type)
{
	return soap_out_double(soap, tag, id, &(a->xsd__double::__item), "xsd:double");
}

void *xsd__double::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__double(soap, tag, this, type);
}

SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_in_xsd__double(struct soap *soap, const char *tag, xsd__double *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__double *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__double, sizeof(xsd__double), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__double)
			return (xsd__double *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_double(soap, tag, &(a->xsd__double::__item), "xsd:double"))
		return NULL;
	return a;
}

int xsd__double::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__double);
	if (this->soap_out(soap, tag?tag:"xsd:double", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__double::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__double(soap, this, tag, type);
}

SOAP_FMAC3 xsd__double * SOAP_FMAC4 soap_get_xsd__double(struct soap *soap, xsd__double *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__double(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__double * SOAP_FMAC2 soap_instantiate_xsd__double(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__double(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__double, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__double);
		if (size)
			*size = sizeof(xsd__double);
		((xsd__double*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__double[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__double);
		for (int i = 0; i < n; i++)
			((xsd__double*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__double*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__double(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__double %p -> %p\n", q, p));
	*(xsd__double*)p = *(xsd__double*)q;
}

void xsd__decimal_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__decimal(soap, &this->xsd__decimal_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__decimal_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__decimal(soap, &this->xsd__decimal_::__item);
	/* transient soap skipped */
}

int xsd__decimal_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__decimal_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal_(struct soap *soap, const char *tag, int id, const xsd__decimal_ *a, const char *type)
{
	return soap_out_xsd__decimal(soap, tag, id, &(a->xsd__decimal_::__item), "xsd:decimal");
}

void *xsd__decimal_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__decimal_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_in_xsd__decimal_(struct soap *soap, const char *tag, xsd__decimal_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__decimal_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__decimal_, sizeof(xsd__decimal_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__decimal_)
			return (xsd__decimal_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__decimal(soap, tag, &(a->xsd__decimal_::__item), "xsd:decimal"))
		return NULL;
	return a;
}

int xsd__decimal_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__decimal_);
	if (this->soap_out(soap, tag?tag:"xsd:decimal", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__decimal_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__decimal_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__decimal_ * SOAP_FMAC4 soap_get_xsd__decimal_(struct soap *soap, xsd__decimal_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__decimal_ * SOAP_FMAC2 soap_instantiate_xsd__decimal_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__decimal_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__decimal_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__decimal_);
		if (size)
			*size = sizeof(xsd__decimal_);
		((xsd__decimal_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__decimal_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__decimal_);
		for (int i = 0; i < n; i++)
			((xsd__decimal_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__decimal_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__decimal_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__decimal_ %p -> %p\n", q, p));
	*(xsd__decimal_*)p = *(xsd__decimal_*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__decimal(struct soap *soap, const char *tag, int id, const std::wstring *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__decimal), type) || soap_wstring_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__decimal(struct soap *soap, const char *tag, std::wstring *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__wstring(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	wchar_t *t;
		s = (std::wstring*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__decimal, sizeof(std::wstring), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_wstring_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::wstring*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__decimal, sizeof(std::wstring), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__decimal, 0, sizeof(std::wstring), 0, soap_copy_xsd__decimal);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__decimal(struct soap *soap, const std::wstring *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__decimal);
	if (soap_out_xsd__decimal(soap, tag?tag:"xsd:decimal", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__decimal(struct soap *soap, std::wstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__decimal(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__dateTime::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_time(soap, &this->xsd__dateTime::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__dateTime::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__dateTime::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__dateTime(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__dateTime(struct soap *soap, const char *tag, int id, const xsd__dateTime *a, const char *type)
{
	return soap_out_time(soap, tag, id, &(a->xsd__dateTime::__item), "xsd:dateTime");
}

void *xsd__dateTime::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__dateTime(soap, tag, this, type);
}

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_in_xsd__dateTime(struct soap *soap, const char *tag, xsd__dateTime *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__dateTime *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__dateTime, sizeof(xsd__dateTime), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__dateTime)
			return (xsd__dateTime *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_time(soap, tag, &(a->xsd__dateTime::__item), "xsd:dateTime"))
		return NULL;
	return a;
}

int xsd__dateTime::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__dateTime);
	if (this->soap_out(soap, tag?tag:"xsd:dateTime", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__dateTime::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__dateTime(soap, this, tag, type);
}

SOAP_FMAC3 xsd__dateTime * SOAP_FMAC4 soap_get_xsd__dateTime(struct soap *soap, xsd__dateTime *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__dateTime(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__dateTime * SOAP_FMAC2 soap_instantiate_xsd__dateTime(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__dateTime(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__dateTime, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__dateTime);
		if (size)
			*size = sizeof(xsd__dateTime);
		((xsd__dateTime*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__dateTime[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__dateTime);
		for (int i = 0; i < n; i++)
			((xsd__dateTime*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__dateTime*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__dateTime(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__dateTime %p -> %p\n", q, p));
	*(xsd__dateTime*)p = *(xsd__dateTime*)q;
}

void xsd__byte_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__byte(soap, &this->xsd__byte_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__byte_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__byte_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__byte_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__byte_(struct soap *soap, const char *tag, int id, const xsd__byte_ *a, const char *type)
{
	return soap_out_xsd__byte(soap, tag, id, &(a->xsd__byte_::__item), "xsd:byte");
}

void *xsd__byte_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__byte_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_in_xsd__byte_(struct soap *soap, const char *tag, xsd__byte_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__byte_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__byte_, sizeof(xsd__byte_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__byte_)
			return (xsd__byte_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__byte(soap, tag, &(a->xsd__byte_::__item), "xsd:byte"))
		return NULL;
	return a;
}

int xsd__byte_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__byte_);
	if (this->soap_out(soap, tag?tag:"xsd:byte", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__byte_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__byte_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__byte_ * SOAP_FMAC4 soap_get_xsd__byte_(struct soap *soap, xsd__byte_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__byte_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__byte_ * SOAP_FMAC2 soap_instantiate_xsd__byte_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__byte_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__byte_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__byte_);
		if (size)
			*size = sizeof(xsd__byte_);
		((xsd__byte_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__byte_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__byte_);
		for (int i = 0; i < n; i++)
			((xsd__byte_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__byte_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__byte_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__byte_ %p -> %p\n", q, p));
	*(xsd__byte_*)p = *(xsd__byte_*)q;
}

void xsd__boolean::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_bool(soap, &this->xsd__boolean::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__boolean::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__boolean::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__boolean(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__boolean(struct soap *soap, const char *tag, int id, const xsd__boolean *a, const char *type)
{
	return soap_out_bool(soap, tag, id, &(a->xsd__boolean::__item), "xsd:boolean");
}

void *xsd__boolean::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__boolean(soap, tag, this, type);
}

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_in_xsd__boolean(struct soap *soap, const char *tag, xsd__boolean *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__boolean *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__boolean, sizeof(xsd__boolean), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__boolean)
			return (xsd__boolean *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_bool(soap, tag, &(a->xsd__boolean::__item), "xsd:boolean"))
		return NULL;
	return a;
}

int xsd__boolean::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__boolean);
	if (this->soap_out(soap, tag?tag:"xsd:boolean", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__boolean::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__boolean(soap, this, tag, type);
}

SOAP_FMAC3 xsd__boolean * SOAP_FMAC4 soap_get_xsd__boolean(struct soap *soap, xsd__boolean *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__boolean(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__boolean * SOAP_FMAC2 soap_instantiate_xsd__boolean(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__boolean(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__boolean, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__boolean);
		if (size)
			*size = sizeof(xsd__boolean);
		((xsd__boolean*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__boolean[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__boolean);
		for (int i = 0; i < n; i++)
			((xsd__boolean*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__boolean*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__boolean(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__boolean %p -> %p\n", q, p));
	*(xsd__boolean*)p = *(xsd__boolean*)q;
}

void xsd__base64Binary_::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__base64Binary_::__item.xsd__base64Binary::soap_default(soap);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__base64Binary_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	this->xsd__base64Binary_::__item.soap_serialize(soap);
	/* transient soap skipped */
}

int xsd__base64Binary_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__base64Binary_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary_(struct soap *soap, const char *tag, int id, const xsd__base64Binary_ *a, const char *type)
{
	return (a->xsd__base64Binary_::__item).soap_out(soap, tag, id, "xsd:base64Binary");
}

void *xsd__base64Binary_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_in_xsd__base64Binary_(struct soap *soap, const char *tag, xsd__base64Binary_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__base64Binary_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary_, sizeof(xsd__base64Binary_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__base64Binary_)
			return (xsd__base64Binary_ *)a->soap_in(soap, tag, type);
	}
	if (!(a->xsd__base64Binary_::__item).soap_in(soap, tag, "xsd:base64Binary"))
		return NULL;
	return a;
}

int xsd__base64Binary_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__base64Binary_);
	if (this->soap_out(soap, tag?tag:"xsd:base64Binary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary_ * SOAP_FMAC4 soap_get_xsd__base64Binary_(struct soap *soap, xsd__base64Binary_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__base64Binary_ * SOAP_FMAC2 soap_instantiate_xsd__base64Binary_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary_);
		if (size)
			*size = sizeof(xsd__base64Binary_);
		((xsd__base64Binary_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__base64Binary_);
		for (int i = 0; i < n; i++)
			((xsd__base64Binary_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__base64Binary_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary_ %p -> %p\n", q, p));
	*(xsd__base64Binary_*)p = *(xsd__base64Binary_*)q;
}

void xsd__base64Binary::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->__size = 0;
	this->__ptr = NULL;
	this->id = NULL;
	this->type = NULL;
	this->options = NULL;
}

void xsd__base64Binary::soap_serialize(struct soap *soap) const
{
	if (this->__ptr && !soap_array_reference(soap, this, (struct soap_array*)&this->__ptr, 1, SOAP_TYPE_xsd__base64Binary))
		if (this->id || this->type)
			soap->mode |= SOAP_ENC_DIME;
}

int xsd__base64Binary::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{	return soap_out_xsd__base64Binary(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__base64Binary(struct soap *soap, const char *tag, int id, const xsd__base64Binary *a, const char *type)
{
#ifndef WITH_LEANER
	id = soap_attachment(soap, tag, id, a, (struct soap_array*)&a->__ptr, a->id, a->type, a->options, 1, type, SOAP_TYPE_xsd__base64Binary);
#else
	id = soap_element_id(soap, tag, id, a, (struct soap_array*)&a->__ptr, 1, type, SOAP_TYPE_xsd__base64Binary);
#endif
	if (id < 0)
		return soap->error;
	if (soap_element_begin_out(soap, tag, id, type))
		return soap->error;
	if (soap_putbase64(soap, a->__ptr, a->__size))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

void *xsd__base64Binary::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__base64Binary(soap, tag, this, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_in_xsd__base64Binary(struct soap *soap, const char *tag, xsd__base64Binary *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (*soap->type && soap_match_tag(soap, soap->type, type) && soap_match_tag(soap, soap->type, ":base64Binary") && soap_match_tag(soap, soap->type, ":base64"))
	{	soap->error = SOAP_TYPE;
		return NULL;
	}
	a = (xsd__base64Binary *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__base64Binary, sizeof(xsd__base64Binary), soap->type, soap->arrayType);
	if (!a)
		return NULL;
	if (soap->alloced)
		a->soap_default(soap);
	if (soap->body && !*soap->href)
	{
		a->__ptr = soap_getbase64(soap, &a->__size, 0);
#ifndef WITH_LEANER
		if (soap_xop_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
			return NULL;
#endif
		if ((!a->__ptr && soap->error) || soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	
#ifndef WITH_LEANER
		if (*soap->href != '#')
		{	if (soap_dime_forward(soap, &a->__ptr, &a->__size, &a->id, &a->type, &a->options))
				return NULL;
		}
		else
#endif
			a = (xsd__base64Binary *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_xsd__base64Binary, 0, sizeof(xsd__base64Binary), 0, soap_copy_xsd__base64Binary);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

int xsd__base64Binary::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, (struct soap_array*)&this->__ptr, 1, tag, SOAP_TYPE_xsd__base64Binary);
	if (this->soap_out(soap, tag?tag:"xsd:base64Binary", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__base64Binary::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__base64Binary(soap, this, tag, type);
}

SOAP_FMAC3 xsd__base64Binary * SOAP_FMAC4 soap_get_xsd__base64Binary(struct soap *soap, xsd__base64Binary *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__base64Binary(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__base64Binary * SOAP_FMAC2 soap_instantiate_xsd__base64Binary(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__base64Binary(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__base64Binary, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary);
		if (size)
			*size = sizeof(xsd__base64Binary);
		((xsd__base64Binary*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__base64Binary);
		for (int i = 0; i < n; i++)
			((xsd__base64Binary*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__base64Binary*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__base64Binary(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__base64Binary %p -> %p\n", q, p));
	*(xsd__base64Binary*)p = *(xsd__base64Binary*)q;
}

void xsd__anyURI_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__anyURI(soap, &this->xsd__anyURI_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__anyURI_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__anyURI(soap, &this->xsd__anyURI_::__item);
	/* transient soap skipped */
}

int xsd__anyURI_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyURI_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI_(struct soap *soap, const char *tag, int id, const xsd__anyURI_ *a, const char *type)
{
	return soap_out_xsd__anyURI(soap, tag, id, &(a->xsd__anyURI_::__item), "xsd:anyURI");
}

void *xsd__anyURI_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyURI_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_in_xsd__anyURI_(struct soap *soap, const char *tag, xsd__anyURI_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyURI_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyURI_, sizeof(xsd__anyURI_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__anyURI_)
			return (xsd__anyURI_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__anyURI(soap, tag, &(a->xsd__anyURI_::__item), "xsd:anyURI"))
		return NULL;
	return a;
}

int xsd__anyURI_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__anyURI_);
	if (this->soap_out(soap, tag?tag:"xsd:anyURI", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyURI_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyURI_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyURI_ * SOAP_FMAC4 soap_get_xsd__anyURI_(struct soap *soap, xsd__anyURI_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__anyURI_ * SOAP_FMAC2 soap_instantiate_xsd__anyURI_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyURI_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anyURI_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__anyURI_);
		if (size)
			*size = sizeof(xsd__anyURI_);
		((xsd__anyURI_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__anyURI_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__anyURI_);
		for (int i = 0; i < n; i++)
			((xsd__anyURI_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__anyURI_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyURI_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyURI_ %p -> %p\n", q, p));
	*(xsd__anyURI_*)p = *(xsd__anyURI_*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyURI(struct soap *soap, const char *tag, int id, const std::wstring *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__anyURI), type) || soap_wstring_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__anyURI(struct soap *soap, const char *tag, std::wstring *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__wstring(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	wchar_t *t;
		s = (std::wstring*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anyURI, sizeof(std::wstring), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_wstring_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::wstring*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__anyURI, sizeof(std::wstring), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__anyURI, 0, sizeof(std::wstring), 0, soap_copy_xsd__anyURI);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__anyURI(struct soap *soap, const std::wstring *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__anyURI);
	if (soap_out_xsd__anyURI(soap, tag?tag:"xsd:anyURI", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__anyURI(struct soap *soap, std::wstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyURI(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__QName::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default__QName(soap, &this->xsd__QName::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__QName::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &this->xsd__QName::__item);
	/* transient soap skipped */
}

int xsd__QName::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__QName(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__QName(struct soap *soap, const char *tag, int id, const xsd__QName *a, const char *type)
{
	const char *soap_tmp___item = soap_QName2s(soap, a->__item);
	return soap_out__QName(soap, tag, id, (char*const*)&soap_tmp___item, "xsd:QName");
}

void *xsd__QName::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__QName(soap, tag, this, type);
}

SOAP_FMAC3 xsd__QName * SOAP_FMAC4 soap_in_xsd__QName(struct soap *soap, const char *tag, xsd__QName *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__QName *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__QName, sizeof(xsd__QName), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__QName)
			return (xsd__QName *)a->soap_in(soap, tag, type);
	}
	if (!soap_in__QName(soap, tag, &(a->xsd__QName::__item), "xsd:QName"))
		return NULL;
	return a;
}

int xsd__QName::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__QName);
	if (this->soap_out(soap, tag?tag:"xsd:QName", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__QName::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__QName(soap, this, tag, type);
}

SOAP_FMAC3 xsd__QName * SOAP_FMAC4 soap_get_xsd__QName(struct soap *soap, xsd__QName *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__QName * SOAP_FMAC2 soap_instantiate_xsd__QName(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__QName(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__QName, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__QName);
		if (size)
			*size = sizeof(xsd__QName);
		((xsd__QName*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__QName[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__QName);
		for (int i = 0; i < n; i++)
			((xsd__QName*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__QName*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__QName(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__QName %p -> %p\n", q, p));
	*(xsd__QName*)p = *(xsd__QName*)q;
}

void xsd__IDREF_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__IDREF(soap, &this->xsd__IDREF_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__IDREF_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__IDREF(soap, &this->xsd__IDREF_::__item);
	/* transient soap skipped */
}

int xsd__IDREF_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__IDREF_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF_(struct soap *soap, const char *tag, int id, const xsd__IDREF_ *a, const char *type)
{
	return soap_out_xsd__IDREF(soap, tag, id, &(a->xsd__IDREF_::__item), "xsd:IDREF");
}

void *xsd__IDREF_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__IDREF_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_in_xsd__IDREF_(struct soap *soap, const char *tag, xsd__IDREF_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__IDREF_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__IDREF_, sizeof(xsd__IDREF_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__IDREF_)
			return (xsd__IDREF_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__IDREF(soap, tag, &(a->xsd__IDREF_::__item), "xsd:IDREF"))
		return NULL;
	return a;
}

int xsd__IDREF_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__IDREF_);
	if (this->soap_out(soap, tag?tag:"xsd:IDREF", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__IDREF_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__IDREF_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__IDREF_ * SOAP_FMAC4 soap_get_xsd__IDREF_(struct soap *soap, xsd__IDREF_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__IDREF_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__IDREF_ * SOAP_FMAC2 soap_instantiate_xsd__IDREF_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__IDREF_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__IDREF_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__IDREF_);
		if (size)
			*size = sizeof(xsd__IDREF_);
		((xsd__IDREF_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__IDREF_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__IDREF_);
		for (int i = 0; i < n; i++)
			((xsd__IDREF_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__IDREF_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__IDREF_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__IDREF_ %p -> %p\n", q, p));
	*(xsd__IDREF_*)p = *(xsd__IDREF_*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__IDREF(struct soap *soap, const char *tag, int id, const std::wstring *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__IDREF), type) || soap_wstring_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__IDREF(struct soap *soap, const char *tag, std::wstring *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__wstring(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	wchar_t *t;
		s = (std::wstring*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__IDREF, sizeof(std::wstring), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_wstring_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::wstring*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__IDREF, sizeof(std::wstring), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__IDREF, 0, sizeof(std::wstring), 0, soap_copy_xsd__IDREF);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__IDREF(struct soap *soap, const std::wstring *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__IDREF);
	if (soap_out_xsd__IDREF(soap, tag?tag:"xsd:IDREF", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__IDREF(struct soap *soap, std::wstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__IDREF(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

void xsd__ID_::soap_default(struct soap *soap)
{
	this->soap = soap;
	soap_default_xsd__ID(soap, &this->xsd__ID_::__item);
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__ID_::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	soap_serialize_xsd__ID(soap, &this->xsd__ID_::__item);
	/* transient soap skipped */
}

int xsd__ID_::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__ID_(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID_(struct soap *soap, const char *tag, int id, const xsd__ID_ *a, const char *type)
{
	return soap_out_xsd__ID(soap, tag, id, &(a->xsd__ID_::__item), "xsd:ID");
}

void *xsd__ID_::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__ID_(soap, tag, this, type);
}

SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_in_xsd__ID_(struct soap *soap, const char *tag, xsd__ID_ *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__ID_ *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__ID_, sizeof(xsd__ID_), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__ID_)
			return (xsd__ID_ *)a->soap_in(soap, tag, type);
	}
	if (!soap_in_xsd__ID(soap, tag, &(a->xsd__ID_::__item), "xsd:ID"))
		return NULL;
	return a;
}

int xsd__ID_::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__ID_);
	if (this->soap_out(soap, tag?tag:"xsd:ID", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__ID_::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__ID_(soap, this, tag, type);
}

SOAP_FMAC3 xsd__ID_ * SOAP_FMAC4 soap_get_xsd__ID_(struct soap *soap, xsd__ID_ *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__ID_(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__ID_ * SOAP_FMAC2 soap_instantiate_xsd__ID_(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__ID_(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__ID_, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__ID_);
		if (size)
			*size = sizeof(xsd__ID_);
		((xsd__ID_*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__ID_[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__ID_);
		for (int i = 0; i < n; i++)
			((xsd__ID_*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__ID_*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__ID_(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__ID_ %p -> %p\n", q, p));
	*(xsd__ID_*)p = *(xsd__ID_*)q;
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__ID(struct soap *soap, const char *tag, int id, const std::wstring *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_xsd__ID), type) || soap_wstring_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_xsd__ID(struct soap *soap, const char *tag, std::wstring *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__wstring(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	wchar_t *t;
		s = (std::wstring*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__ID, sizeof(std::wstring), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_wstring_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::wstring*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_xsd__ID, sizeof(std::wstring), soap->type, soap->arrayType), 0, SOAP_TYPE_xsd__ID, 0, sizeof(std::wstring), 0, soap_copy_xsd__ID);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_xsd__ID(struct soap *soap, const std::wstring *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_xsd__ID);
	if (soap_out_xsd__ID(soap, tag?tag:"xsd:ID", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_xsd__ID(struct soap *soap, std::wstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__ID(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_std__wstring(struct soap *soap, std::wstring *p)
{
	(void)soap; /* appease -Wall -Werror */
	p->erase();
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_std__wstring(struct soap *soap, const std::wstring *p)
{	(void)soap; (void)p; /* appease -Wall -Werror */
}
SOAP_FMAC3 int SOAP_FMAC4 soap_out_std__wstring(struct soap *soap, const char *tag, int id, const std::wstring *s, const char *type)
{
	if ((soap->mode & SOAP_C_NILSTRING) && s->empty())
		return soap_element_null(soap, tag, id, type);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, s, SOAP_TYPE_std__wstring), type) || soap_wstring_out(soap, s->c_str(), 0) || soap_element_end_out(soap, tag))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_in_std__wstring(struct soap *soap, const char *tag, std::wstring *s, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!s)
		s = soap_new_std__wstring(soap, -1);
	if (soap->null)
		if (s)
			s->erase();
	if (soap->body && !*soap->href)
	{	wchar_t *t;
		s = (std::wstring*)soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType);
		if (s)
		{	if ((t = soap_wstring_in(soap, 1, -1, -1)))
				s->assign(t);
			else
				return NULL;
		}
	}
	else
		s = (std::wstring*)soap_id_forward(soap, soap->href, soap_class_id_enter(soap, soap->id, s, SOAP_TYPE_std__wstring, sizeof(std::wstring), soap->type, soap->arrayType), 0, SOAP_TYPE_std__wstring, 0, sizeof(std::wstring), 0, soap_copy_std__wstring);
	if (soap->body && soap_element_end_in(soap, tag))
		return NULL;
	return s;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_std__wstring(struct soap *soap, const std::wstring *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_std__wstring);
	if (soap_out_std__wstring(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring * SOAP_FMAC4 soap_get_std__wstring(struct soap *soap, std::wstring *p, const char *tag, const char *type)
{
	if ((p = soap_in_std__wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 std::wstring * SOAP_FMAC2 soap_instantiate_std__wstring(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_std__wstring(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_std__wstring, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(std::wstring);
		if (size)
			*size = sizeof(std::wstring);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(std::wstring[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(std::wstring);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (std::wstring*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_std__wstring(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying std::wstring %p -> %p\n", q, p));
	*(std::wstring*)p = *(std::wstring*)q;
}

void xsd__anyType::soap_default(struct soap *soap)
{
	this->soap = soap;
	this->xsd__anyType::__item = NULL;
	/* transient soap skipped */
}

void xsd__anyType::soap_serialize(struct soap *soap) const
{
	(void)soap; /* appease -Wall -Werror */
	/* transient soap skipped */
}

int xsd__anyType::soap_out(struct soap *soap, const char *tag, int id, const char *type) const
{
	return soap_out_xsd__anyType(soap, tag, id, this, type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_xsd__anyType(struct soap *soap, const char *tag, int id, const xsd__anyType *a, const char *type)
{
	return soap_outliteral(soap, tag, &(a->xsd__anyType::__item), NULL);
}

void *xsd__anyType::soap_in(struct soap *soap, const char *tag, const char *type)
{	return soap_in_xsd__anyType(soap, tag, this, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_in_xsd__anyType(struct soap *soap, const char *tag, xsd__anyType *a, const char *type)
{
	(void)type; /* appease -Wall -Werror */
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!(a = (xsd__anyType *)soap_class_id_enter(soap, soap->id, a, SOAP_TYPE_xsd__anyType, sizeof(xsd__anyType), soap->type, soap->arrayType)))
	{	soap->error = SOAP_TAG_MISMATCH;
		return NULL;
	}
	soap_revert(soap);
	*soap->id = '\0';
	if (soap->alloced)
	{	a->soap_default(soap);
		if (soap->clist->type != SOAP_TYPE_xsd__anyType)
			return (xsd__anyType *)a->soap_in(soap, tag, type);
	}
	if (!soap_inliteral(soap, tag, &(a->xsd__anyType::__item)))
		return NULL;
	return a;
}

int xsd__anyType::soap_put(struct soap *soap, const char *tag, const  char *type) const
{
	register int id = soap_embed(soap, (void*)this, NULL, 0, tag, SOAP_TYPE_xsd__anyType);
	if (this->soap_out(soap, tag?tag:"xsd:anyType", id, type))
		return soap->error;
	return soap_putindependent(soap);
}

void *xsd__anyType::soap_get(struct soap *soap, const char *tag, const char *type)
{
	return soap_get_xsd__anyType(soap, this, tag, type);
}

SOAP_FMAC3 xsd__anyType * SOAP_FMAC4 soap_get_xsd__anyType(struct soap *soap, xsd__anyType *p, const char *tag, const char *type)
{
	if ((p = soap_in_xsd__anyType(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 xsd__anyType * SOAP_FMAC2 soap_instantiate_xsd__anyType(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_xsd__anyType(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_xsd__anyType, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (type && !soap_match_tag(soap, type, "xsd:ID"))
	{	cp->type = SOAP_TYPE_xsd__ID_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__ID_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__ID_);
			((xsd__ID_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__ID_[n]);
			if (size)
				*size = n * sizeof(xsd__ID_);
			for (int i = 0; i < n; i++)
				((xsd__ID_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__ID_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:IDREF"))
	{	cp->type = SOAP_TYPE_xsd__IDREF_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__IDREF_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__IDREF_);
			((xsd__IDREF_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__IDREF_[n]);
			if (size)
				*size = n * sizeof(xsd__IDREF_);
			for (int i = 0; i < n; i++)
				((xsd__IDREF_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__IDREF_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:QName"))
	{	cp->type = SOAP_TYPE_xsd__QName;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__QName);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__QName);
			((xsd__QName*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__QName[n]);
			if (size)
				*size = n * sizeof(xsd__QName);
			for (int i = 0; i < n; i++)
				((xsd__QName*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__QName*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:anyURI"))
	{	cp->type = SOAP_TYPE_xsd__anyURI_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__anyURI_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__anyURI_);
			((xsd__anyURI_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__anyURI_[n]);
			if (size)
				*size = n * sizeof(xsd__anyURI_);
			for (int i = 0; i < n; i++)
				((xsd__anyURI_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__anyURI_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:base64Binary"))
	{	cp->type = SOAP_TYPE_xsd__base64Binary_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__base64Binary_);
			((xsd__base64Binary_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__base64Binary_[n]);
			if (size)
				*size = n * sizeof(xsd__base64Binary_);
			for (int i = 0; i < n; i++)
				((xsd__base64Binary_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__base64Binary_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:boolean"))
	{	cp->type = SOAP_TYPE_xsd__boolean;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__boolean);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__boolean);
			((xsd__boolean*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__boolean[n]);
			if (size)
				*size = n * sizeof(xsd__boolean);
			for (int i = 0; i < n; i++)
				((xsd__boolean*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__boolean*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:byte"))
	{	cp->type = SOAP_TYPE_xsd__byte_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__byte_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__byte_);
			((xsd__byte_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__byte_[n]);
			if (size)
				*size = n * sizeof(xsd__byte_);
			for (int i = 0; i < n; i++)
				((xsd__byte_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__byte_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:dateTime"))
	{	cp->type = SOAP_TYPE_xsd__dateTime;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__dateTime);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__dateTime);
			((xsd__dateTime*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__dateTime[n]);
			if (size)
				*size = n * sizeof(xsd__dateTime);
			for (int i = 0; i < n; i++)
				((xsd__dateTime*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__dateTime*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:decimal"))
	{	cp->type = SOAP_TYPE_xsd__decimal_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__decimal_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__decimal_);
			((xsd__decimal_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__decimal_[n]);
			if (size)
				*size = n * sizeof(xsd__decimal_);
			for (int i = 0; i < n; i++)
				((xsd__decimal_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__decimal_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:double"))
	{	cp->type = SOAP_TYPE_xsd__double;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__double);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__double);
			((xsd__double*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__double[n]);
			if (size)
				*size = n * sizeof(xsd__double);
			for (int i = 0; i < n; i++)
				((xsd__double*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__double*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:duration"))
	{	cp->type = SOAP_TYPE_xsd__duration_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__duration_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__duration_);
			((xsd__duration_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__duration_[n]);
			if (size)
				*size = n * sizeof(xsd__duration_);
			for (int i = 0; i < n; i++)
				((xsd__duration_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__duration_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:float"))
	{	cp->type = SOAP_TYPE_xsd__float;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__float);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__float);
			((xsd__float*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__float[n]);
			if (size)
				*size = n * sizeof(xsd__float);
			for (int i = 0; i < n; i++)
				((xsd__float*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__float*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:int"))
	{	cp->type = SOAP_TYPE_xsd__int;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__int);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__int);
			((xsd__int*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__int[n]);
			if (size)
				*size = n * sizeof(xsd__int);
			for (int i = 0; i < n; i++)
				((xsd__int*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__int*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:long"))
	{	cp->type = SOAP_TYPE_xsd__long;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__long);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__long);
			((xsd__long*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__long[n]);
			if (size)
				*size = n * sizeof(xsd__long);
			for (int i = 0; i < n; i++)
				((xsd__long*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__long*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:short"))
	{	cp->type = SOAP_TYPE_xsd__short;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__short);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__short);
			((xsd__short*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__short[n]);
			if (size)
				*size = n * sizeof(xsd__short);
			for (int i = 0; i < n; i++)
				((xsd__short*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__short*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:string"))
	{	cp->type = SOAP_TYPE_xsd__string;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__string);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__string);
			((xsd__string*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__string[n]);
			if (size)
				*size = n * sizeof(xsd__string);
			for (int i = 0; i < n; i++)
				((xsd__string*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__string*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedByte"))
	{	cp->type = SOAP_TYPE_xsd__unsignedByte_;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedByte_);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__unsignedByte_);
			((xsd__unsignedByte_*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedByte_[n]);
			if (size)
				*size = n * sizeof(xsd__unsignedByte_);
			for (int i = 0; i < n; i++)
				((xsd__unsignedByte_*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__unsignedByte_*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedInt"))
	{	cp->type = SOAP_TYPE_xsd__unsignedInt;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedInt);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__unsignedInt);
			((xsd__unsignedInt*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedInt[n]);
			if (size)
				*size = n * sizeof(xsd__unsignedInt);
			for (int i = 0; i < n; i++)
				((xsd__unsignedInt*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__unsignedInt*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedLong"))
	{	cp->type = SOAP_TYPE_xsd__unsignedLong;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedLong);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__unsignedLong);
			((xsd__unsignedLong*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedLong[n]);
			if (size)
				*size = n * sizeof(xsd__unsignedLong);
			for (int i = 0; i < n; i++)
				((xsd__unsignedLong*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__unsignedLong*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "xsd:unsignedShort"))
	{	cp->type = SOAP_TYPE_xsd__unsignedShort;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedShort);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(xsd__unsignedShort);
			((xsd__unsignedShort*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(xsd__unsignedShort[n]);
			if (size)
				*size = n * sizeof(xsd__unsignedShort);
			for (int i = 0; i < n; i++)
				((xsd__unsignedShort*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (xsd__unsignedShort*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns4:char"))
	{	cp->type = SOAP_TYPE_ns4__char__;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns4__char__);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns4__char__);
			((ns4__char__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns4__char__[n]);
			if (size)
				*size = n * sizeof(ns4__char__);
			for (int i = 0; i < n; i++)
				((ns4__char__*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns4__char__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns4:duration"))
	{	cp->type = SOAP_TYPE_ns4__duration__;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns4__duration__);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns4__duration__);
			((ns4__duration__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns4__duration__[n]);
			if (size)
				*size = n * sizeof(ns4__duration__);
			for (int i = 0; i < n; i++)
				((ns4__duration__*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns4__duration__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns4:guid"))
	{	cp->type = SOAP_TYPE_ns4__guid__;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns4__guid__);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns4__guid__);
			((ns4__guid__*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns4__guid__[n]);
			if (size)
				*size = n * sizeof(ns4__guid__);
			for (int i = 0; i < n; i++)
				((ns4__guid__*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns4__guid__*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns5:ArrayOfint"))
	{	cp->type = SOAP_TYPE_ns5__ArrayOfint;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns5__ArrayOfint);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns5__ArrayOfint);
			((ns5__ArrayOfint*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns5__ArrayOfint[n]);
			if (size)
				*size = n * sizeof(ns5__ArrayOfint);
			for (int i = 0; i < n; i++)
				((ns5__ArrayOfint*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns5__ArrayOfint*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns5:ArrayOfstring"))
	{	cp->type = SOAP_TYPE_ns5__ArrayOfstring;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns5__ArrayOfstring);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns5__ArrayOfstring);
			((ns5__ArrayOfstring*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns5__ArrayOfstring[n]);
			if (size)
				*size = n * sizeof(ns5__ArrayOfstring);
			for (int i = 0; i < n; i++)
				((ns5__ArrayOfstring*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns5__ArrayOfstring*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns6:TranslateOptions"))
	{	cp->type = SOAP_TYPE_ns6__TranslateOptions;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns6__TranslateOptions);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns6__TranslateOptions);
			((ns6__TranslateOptions*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns6__TranslateOptions[n]);
			if (size)
				*size = n * sizeof(ns6__TranslateOptions);
			for (int i = 0; i < n; i++)
				((ns6__TranslateOptions*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns6__TranslateOptions*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns6:GetTranslationsResponse"))
	{	cp->type = SOAP_TYPE_ns6__GetTranslationsResponse;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns6__GetTranslationsResponse);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns6__GetTranslationsResponse);
			((ns6__GetTranslationsResponse*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns6__GetTranslationsResponse[n]);
			if (size)
				*size = n * sizeof(ns6__GetTranslationsResponse);
			for (int i = 0; i < n; i++)
				((ns6__GetTranslationsResponse*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns6__GetTranslationsResponse*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns6:ArrayOfTranslationMatch"))
	{	cp->type = SOAP_TYPE_ns6__ArrayOfTranslationMatch;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns6__ArrayOfTranslationMatch);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns6__ArrayOfTranslationMatch);
			((ns6__ArrayOfTranslationMatch*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns6__ArrayOfTranslationMatch[n]);
			if (size)
				*size = n * sizeof(ns6__ArrayOfTranslationMatch);
			for (int i = 0; i < n; i++)
				((ns6__ArrayOfTranslationMatch*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns6__ArrayOfTranslationMatch*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns6:TranslationMatch"))
	{	cp->type = SOAP_TYPE_ns6__TranslationMatch;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns6__TranslationMatch);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns6__TranslationMatch);
			((ns6__TranslationMatch*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns6__TranslationMatch[n]);
			if (size)
				*size = n * sizeof(ns6__TranslationMatch);
			for (int i = 0; i < n; i++)
				((ns6__TranslationMatch*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns6__TranslationMatch*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns6:ArrayOfTranslation"))
	{	cp->type = SOAP_TYPE_ns6__ArrayOfTranslation;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns6__ArrayOfTranslation);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns6__ArrayOfTranslation);
			((ns6__ArrayOfTranslation*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns6__ArrayOfTranslation[n]);
			if (size)
				*size = n * sizeof(ns6__ArrayOfTranslation);
			for (int i = 0; i < n; i++)
				((ns6__ArrayOfTranslation*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns6__ArrayOfTranslation*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns6:Translation"))
	{	cp->type = SOAP_TYPE_ns6__Translation;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns6__Translation);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns6__Translation);
			((ns6__Translation*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns6__Translation[n]);
			if (size)
				*size = n * sizeof(ns6__Translation);
			for (int i = 0; i < n; i++)
				((ns6__Translation*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns6__Translation*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns6:ArrayOfGetTranslationsResponse"))
	{	cp->type = SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns6__ArrayOfGetTranslationsResponse);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns6__ArrayOfGetTranslationsResponse);
			((ns6__ArrayOfGetTranslationsResponse*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns6__ArrayOfGetTranslationsResponse[n]);
			if (size)
				*size = n * sizeof(ns6__ArrayOfGetTranslationsResponse);
			for (int i = 0; i < n; i++)
				((ns6__ArrayOfGetTranslationsResponse*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns6__ArrayOfGetTranslationsResponse*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns6:ArrayOfTranslateArrayResponse"))
	{	cp->type = SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns6__ArrayOfTranslateArrayResponse);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns6__ArrayOfTranslateArrayResponse);
			((ns6__ArrayOfTranslateArrayResponse*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns6__ArrayOfTranslateArrayResponse[n]);
			if (size)
				*size = n * sizeof(ns6__ArrayOfTranslateArrayResponse);
			for (int i = 0; i < n; i++)
				((ns6__ArrayOfTranslateArrayResponse*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns6__ArrayOfTranslateArrayResponse*)cp->ptr;
	}
	if (type && !soap_match_tag(soap, type, "ns6:TranslateArrayResponse"))
	{	cp->type = SOAP_TYPE_ns6__TranslateArrayResponse;
		if (n < 0)
		{	cp->ptr = (void*)SOAP_NEW(ns6__TranslateArrayResponse);
			if (!cp->ptr)
			{	soap->error = SOAP_EOM;
				return NULL;
			}
			if (size)
				*size = sizeof(ns6__TranslateArrayResponse);
			((ns6__TranslateArrayResponse*)cp->ptr)->soap = soap;
		}
		else
		{	cp->ptr = (void*)SOAP_NEW(ns6__TranslateArrayResponse[n]);
			if (size)
				*size = n * sizeof(ns6__TranslateArrayResponse);
			for (int i = 0; i < n; i++)
				((ns6__TranslateArrayResponse*)cp->ptr)[i].soap = soap;
		}
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
		return (ns6__TranslateArrayResponse*)cp->ptr;
	}
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(xsd__anyType);
		if (size)
			*size = sizeof(xsd__anyType);
		((xsd__anyType*)cp->ptr)->soap = soap;
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(xsd__anyType[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(xsd__anyType);
		for (int i = 0; i < n; i++)
			((xsd__anyType*)cp->ptr)[i].soap = soap;
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (xsd__anyType*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_xsd__anyType(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying xsd__anyType %p -> %p\n", q, p));
	*(xsd__anyType*)p = *(xsd__anyType*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->faultcode);
	soap_default_string(soap, &a->faultstring);
	soap_default_string(soap, &a->faultactor);
	a->detail = NULL;
	a->SOAP_ENV__Code = NULL;
	a->SOAP_ENV__Reason = NULL;
	soap_default_string(soap, &a->SOAP_ENV__Node);
	soap_default_string(soap, &a->SOAP_ENV__Role);
	a->SOAP_ENV__Detail = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->faultcode);
	soap_serialize_string(soap, &a->faultstring);
	soap_serialize_string(soap, &a->faultactor);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->detail);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Code);
	soap_serialize_PointerToSOAP_ENV__Reason(soap, &a->SOAP_ENV__Reason);
	soap_serialize_string(soap, &a->SOAP_ENV__Node);
	soap_serialize_string(soap, &a->SOAP_ENV__Role);
	soap_serialize_PointerToSOAP_ENV__Detail(soap, &a->SOAP_ENV__Detail);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Fault(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Fault *a, const char *type)
{
	const char *soap_tmp_faultcode = soap_QName2s(soap, a->faultcode);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Fault), type))
		return soap->error;
	if (soap_out__QName(soap, "faultcode", -1, (char*const*)&soap_tmp_faultcode, ""))
		return soap->error;
	if (soap_out_string(soap, "faultstring", -1, &a->faultstring, ""))
		return soap->error;
	if (soap_out_string(soap, "faultactor", -1, &a->faultactor, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "detail", -1, &a->detail, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", -1, &a->SOAP_ENV__Code, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", -1, &a->SOAP_ENV__Reason, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Node", -1, &a->SOAP_ENV__Node, ""))
		return soap->error;
	if (soap_out_string(soap, "SOAP-ENV:Role", -1, &a->SOAP_ENV__Role, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", -1, &a->SOAP_ENV__Detail, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_in_SOAP_ENV__Fault(struct soap *soap, const char *tag, struct SOAP_ENV__Fault *a, const char *type)
{
	size_t soap_flag_faultcode = 1;
	size_t soap_flag_faultstring = 1;
	size_t soap_flag_faultactor = 1;
	size_t soap_flag_detail = 1;
	size_t soap_flag_SOAP_ENV__Code = 1;
	size_t soap_flag_SOAP_ENV__Reason = 1;
	size_t soap_flag_SOAP_ENV__Node = 1;
	size_t soap_flag_SOAP_ENV__Role = 1;
	size_t soap_flag_SOAP_ENV__Detail = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Fault *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Fault, sizeof(struct SOAP_ENV__Fault), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Fault(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_faultcode && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "faultcode", &a->faultcode, ""))
				{	soap_flag_faultcode--;
					continue;
				}
			if (soap_flag_faultstring && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultstring", &a->faultstring, "xsd:string"))
				{	soap_flag_faultstring--;
					continue;
				}
			if (soap_flag_faultactor && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "faultactor", &a->faultactor, "xsd:string"))
				{	soap_flag_faultactor--;
					continue;
				}
			if (soap_flag_detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "detail", &a->detail, ""))
				{	soap_flag_detail--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Code && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Code", &a->SOAP_ENV__Code, ""))
				{	soap_flag_SOAP_ENV__Code--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Reason && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Reason(soap, "SOAP-ENV:Reason", &a->SOAP_ENV__Reason, ""))
				{	soap_flag_SOAP_ENV__Reason--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Node && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Node", &a->SOAP_ENV__Node, "xsd:string"))
				{	soap_flag_SOAP_ENV__Node--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Role && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Role", &a->SOAP_ENV__Role, "xsd:string"))
				{	soap_flag_SOAP_ENV__Role--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Detail && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Detail(soap, "SOAP-ENV:Detail", &a->SOAP_ENV__Detail, ""))
				{	soap_flag_SOAP_ENV__Detail--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Fault *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Fault, 0, sizeof(struct SOAP_ENV__Fault), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Fault(struct soap *soap, const struct SOAP_ENV__Fault *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Fault);
	if (soap_out_SOAP_ENV__Fault(soap, tag?tag:"SOAP-ENV:Fault", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Fault * SOAP_FMAC4 soap_get_SOAP_ENV__Fault(struct soap *soap, struct SOAP_ENV__Fault *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Fault(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Fault * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Fault(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Fault(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Fault, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault);
		if (size)
			*size = sizeof(struct SOAP_ENV__Fault);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Fault[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Fault);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Fault*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Fault(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Fault %p -> %p\n", q, p));
	*(struct SOAP_ENV__Fault*)p = *(struct SOAP_ENV__Fault*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_string(soap, &a->SOAP_ENV__Text);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Reason(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Reason *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Reason), type))
		return soap->error;
	if (soap->lang)
		soap_set_attr(soap, "xml:lang", soap->lang, 1);
	if (soap_out_string(soap, "SOAP-ENV:Text", -1, &a->SOAP_ENV__Text, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_in_SOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Text = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Reason *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Reason(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Text && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in_string(soap, "SOAP-ENV:Text", &a->SOAP_ENV__Text, "xsd:string"))
				{	soap_flag_SOAP_ENV__Text--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Reason, 0, sizeof(struct SOAP_ENV__Reason), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Reason(struct soap *soap, const struct SOAP_ENV__Reason *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Reason);
	if (soap_out_SOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason * SOAP_FMAC4 soap_get_SOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Reason * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Reason(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Reason(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Reason, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason);
		if (size)
			*size = sizeof(struct SOAP_ENV__Reason);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Reason[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Reason);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Reason*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Reason(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Reason %p -> %p\n", q, p));
	*(struct SOAP_ENV__Reason*)p = *(struct SOAP_ENV__Reason*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->__type = 0;
	a->fault = NULL;
	a->__any = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_markelement(soap, a->fault, a->__type);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Detail(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Detail *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Detail), type))
		return soap->error;
	if (soap_putelement(soap, a->fault, "fault", -1, a->__type))
		return soap->error;
	soap_outliteral(soap, "-any", &a->__any, NULL);
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_in_SOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail *a, const char *type)
{
	size_t soap_flag_fault = 1;
	size_t soap_flag___any = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Detail *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Detail(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_fault && soap->error == SOAP_TAG_MISMATCH)
				if ((a->fault = soap_getelement(soap, &a->__type)))
				{	soap_flag_fault = 0;
					continue;
				}
			if (soap_flag___any && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_inliteral(soap, "-any", &a->__any))
				{	soap_flag___any--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Detail, 0, sizeof(struct SOAP_ENV__Detail), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Detail(struct soap *soap, const struct SOAP_ENV__Detail *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Detail);
	if (soap_out_SOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail * SOAP_FMAC4 soap_get_SOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Detail * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Detail(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Detail(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Detail, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail);
		if (size)
			*size = sizeof(struct SOAP_ENV__Detail);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Detail[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Detail);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Detail*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Detail(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Detail %p -> %p\n", q, p));
	*(struct SOAP_ENV__Detail*)p = *(struct SOAP_ENV__Detail*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_default__QName(soap, &a->SOAP_ENV__Value);
	a->SOAP_ENV__Subcode = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize__QName(soap, &a->SOAP_ENV__Value);
	soap_serialize_PointerToSOAP_ENV__Code(soap, &a->SOAP_ENV__Subcode);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Code(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Code *a, const char *type)
{
	const char *soap_tmp_SOAP_ENV__Value = soap_QName2s(soap, a->SOAP_ENV__Value);
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Code), type))
		return soap->error;
	if (soap_out__QName(soap, "SOAP-ENV:Value", -1, (char*const*)&soap_tmp_SOAP_ENV__Value, ""))
		return soap->error;
	if (soap_out_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", -1, &a->SOAP_ENV__Subcode, ""))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_in_SOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code *a, const char *type)
{
	size_t soap_flag_SOAP_ENV__Value = 1;
	size_t soap_flag_SOAP_ENV__Subcode = 1;
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Code *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Code(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_SOAP_ENV__Value && (soap->error == SOAP_TAG_MISMATCH || soap->error == SOAP_NO_TAG))
				if (soap_in__QName(soap, "SOAP-ENV:Value", &a->SOAP_ENV__Value, ""))
				{	soap_flag_SOAP_ENV__Value--;
					continue;
				}
			if (soap_flag_SOAP_ENV__Subcode && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerToSOAP_ENV__Code(soap, "SOAP-ENV:Subcode", &a->SOAP_ENV__Subcode, ""))
				{	soap_flag_SOAP_ENV__Subcode--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Code, 0, sizeof(struct SOAP_ENV__Code), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Code(struct soap *soap, const struct SOAP_ENV__Code *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Code);
	if (soap_out_SOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code * SOAP_FMAC4 soap_get_SOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Code * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Code(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Code(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Code, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code);
		if (size)
			*size = sizeof(struct SOAP_ENV__Code);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Code[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Code);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Code*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Code(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Code %p -> %p\n", q, p));
	*(struct SOAP_ENV__Code*)p = *(struct SOAP_ENV__Code*)q;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_default_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_SOAP_ENV__Header(struct soap *soap, const char *tag, int id, const struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_out(soap, tag, soap_embedded_id(soap, id, a, SOAP_TYPE_SOAP_ENV__Header), type))
		return soap->error;
	return soap_element_end_out(soap, tag);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_in_SOAP_ENV__Header(struct soap *soap, const char *tag, struct SOAP_ENV__Header *a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 0, type))
		return NULL;
	a = (struct SOAP_ENV__Header *)soap_id_enter(soap, soap->id, a, SOAP_TYPE_SOAP_ENV__Header, sizeof(struct SOAP_ENV__Header), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default_SOAP_ENV__Header(soap, a);
	if (soap->body && !*soap->href)
	{
		for (;;)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap->error == SOAP_TAG_MISMATCH)
				soap->error = soap_ignore_element(soap);
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
		if (soap_element_end_in(soap, tag))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Header *)soap_id_forward(soap, soap->href, (void*)a, 0, SOAP_TYPE_SOAP_ENV__Header, 0, sizeof(struct SOAP_ENV__Header), 0, NULL);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_SOAP_ENV__Header(struct soap *soap, const struct SOAP_ENV__Header *a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_SOAP_ENV__Header);
	if (soap_out_SOAP_ENV__Header(soap, tag?tag:"SOAP-ENV:Header", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Header * SOAP_FMAC4 soap_get_SOAP_ENV__Header(struct soap *soap, struct SOAP_ENV__Header *p, const char *tag, const char *type)
{
	if ((p = soap_in_SOAP_ENV__Header(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct SOAP_ENV__Header * SOAP_FMAC2 soap_instantiate_SOAP_ENV__Header(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate_SOAP_ENV__Header(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE_SOAP_ENV__Header, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header);
		if (size)
			*size = sizeof(struct SOAP_ENV__Header);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct SOAP_ENV__Header[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct SOAP_ENV__Header);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct SOAP_ENV__Header*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy_SOAP_ENV__Header(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct SOAP_ENV__Header %p -> %p\n", q, p));
	*(struct SOAP_ENV__Header*)p = *(struct SOAP_ENV__Header*)q;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__TranslateArray(struct soap *soap, struct __ns1__TranslateArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__TranslateArray = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__TranslateArray(struct soap *soap, const struct __ns1__TranslateArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns3__TranslateArray(soap, &a->ns3__TranslateArray);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__TranslateArray(struct soap *soap, const char *tag, int id, const struct __ns1__TranslateArray *a, const char *type)
{
	if (soap_out_PointerTo_ns3__TranslateArray(soap, "ns3:TranslateArray", -1, &a->ns3__TranslateArray, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__TranslateArray * SOAP_FMAC4 soap_in___ns1__TranslateArray(struct soap *soap, const char *tag, struct __ns1__TranslateArray *a, const char *type)
{
	size_t soap_flag_ns3__TranslateArray = 1;
	short soap_flag;
	a = (struct __ns1__TranslateArray *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__TranslateArray, sizeof(struct __ns1__TranslateArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__TranslateArray(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__TranslateArray && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns3__TranslateArray(soap, "ns3:TranslateArray", &a->ns3__TranslateArray, ""))
				{	soap_flag_ns3__TranslateArray--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__TranslateArray(struct soap *soap, const struct __ns1__TranslateArray *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__TranslateArray(soap, tag?tag:"-ns1:TranslateArray", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__TranslateArray * SOAP_FMAC4 soap_get___ns1__TranslateArray(struct soap *soap, struct __ns1__TranslateArray *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__TranslateArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__TranslateArray * SOAP_FMAC2 soap_instantiate___ns1__TranslateArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__TranslateArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__TranslateArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__TranslateArray);
		if (size)
			*size = sizeof(struct __ns1__TranslateArray);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__TranslateArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__TranslateArray);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__TranslateArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__TranslateArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__TranslateArray %p -> %p\n", q, p));
	*(struct __ns1__TranslateArray*)p = *(struct __ns1__TranslateArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Speak(struct soap *soap, struct __ns1__Speak *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__Speak = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Speak(struct soap *soap, const struct __ns1__Speak *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns3__Speak(soap, &a->ns3__Speak);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Speak(struct soap *soap, const char *tag, int id, const struct __ns1__Speak *a, const char *type)
{
	if (soap_out_PointerTo_ns3__Speak(soap, "ns3:Speak", -1, &a->ns3__Speak, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Speak * SOAP_FMAC4 soap_in___ns1__Speak(struct soap *soap, const char *tag, struct __ns1__Speak *a, const char *type)
{
	size_t soap_flag_ns3__Speak = 1;
	short soap_flag;
	a = (struct __ns1__Speak *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Speak, sizeof(struct __ns1__Speak), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Speak(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__Speak && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns3__Speak(soap, "ns3:Speak", &a->ns3__Speak, ""))
				{	soap_flag_ns3__Speak--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Speak(struct soap *soap, const struct __ns1__Speak *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Speak(soap, tag?tag:"-ns1:Speak", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Speak * SOAP_FMAC4 soap_get___ns1__Speak(struct soap *soap, struct __ns1__Speak *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Speak(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Speak * SOAP_FMAC2 soap_instantiate___ns1__Speak(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Speak(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Speak, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Speak);
		if (size)
			*size = sizeof(struct __ns1__Speak);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Speak[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__Speak);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__Speak*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Speak(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Speak %p -> %p\n", q, p));
	*(struct __ns1__Speak*)p = *(struct __ns1__Speak*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTranslationsArray(struct soap *soap, struct __ns1__GetTranslationsArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__GetTranslationsArray = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTranslationsArray(struct soap *soap, const struct __ns1__GetTranslationsArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns3__GetTranslationsArray(soap, &a->ns3__GetTranslationsArray);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTranslationsArray(struct soap *soap, const char *tag, int id, const struct __ns1__GetTranslationsArray *a, const char *type)
{
	if (soap_out_PointerTo_ns3__GetTranslationsArray(soap, "ns3:GetTranslationsArray", -1, &a->ns3__GetTranslationsArray, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetTranslationsArray * SOAP_FMAC4 soap_in___ns1__GetTranslationsArray(struct soap *soap, const char *tag, struct __ns1__GetTranslationsArray *a, const char *type)
{
	size_t soap_flag_ns3__GetTranslationsArray = 1;
	short soap_flag;
	a = (struct __ns1__GetTranslationsArray *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetTranslationsArray, sizeof(struct __ns1__GetTranslationsArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetTranslationsArray(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__GetTranslationsArray && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns3__GetTranslationsArray(soap, "ns3:GetTranslationsArray", &a->ns3__GetTranslationsArray, ""))
				{	soap_flag_ns3__GetTranslationsArray--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTranslationsArray(struct soap *soap, const struct __ns1__GetTranslationsArray *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetTranslationsArray(soap, tag?tag:"-ns1:GetTranslationsArray", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetTranslationsArray * SOAP_FMAC4 soap_get___ns1__GetTranslationsArray(struct soap *soap, struct __ns1__GetTranslationsArray *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetTranslationsArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetTranslationsArray * SOAP_FMAC2 soap_instantiate___ns1__GetTranslationsArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetTranslationsArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetTranslationsArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetTranslationsArray);
		if (size)
			*size = sizeof(struct __ns1__GetTranslationsArray);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetTranslationsArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__GetTranslationsArray);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__GetTranslationsArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetTranslationsArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetTranslationsArray %p -> %p\n", q, p));
	*(struct __ns1__GetTranslationsArray*)p = *(struct __ns1__GetTranslationsArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddTranslationArray(struct soap *soap, struct __ns1__AddTranslationArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__AddTranslationArray = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddTranslationArray(struct soap *soap, const struct __ns1__AddTranslationArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns3__AddTranslationArray(soap, &a->ns3__AddTranslationArray);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddTranslationArray(struct soap *soap, const char *tag, int id, const struct __ns1__AddTranslationArray *a, const char *type)
{
	if (soap_out_PointerTo_ns3__AddTranslationArray(soap, "ns3:AddTranslationArray", -1, &a->ns3__AddTranslationArray, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddTranslationArray * SOAP_FMAC4 soap_in___ns1__AddTranslationArray(struct soap *soap, const char *tag, struct __ns1__AddTranslationArray *a, const char *type)
{
	size_t soap_flag_ns3__AddTranslationArray = 1;
	short soap_flag;
	a = (struct __ns1__AddTranslationArray *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AddTranslationArray, sizeof(struct __ns1__AddTranslationArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AddTranslationArray(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__AddTranslationArray && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns3__AddTranslationArray(soap, "ns3:AddTranslationArray", &a->ns3__AddTranslationArray, ""))
				{	soap_flag_ns3__AddTranslationArray--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddTranslationArray(struct soap *soap, const struct __ns1__AddTranslationArray *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AddTranslationArray(soap, tag?tag:"-ns1:AddTranslationArray", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddTranslationArray * SOAP_FMAC4 soap_get___ns1__AddTranslationArray(struct soap *soap, struct __ns1__AddTranslationArray *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AddTranslationArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AddTranslationArray * SOAP_FMAC2 soap_instantiate___ns1__AddTranslationArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AddTranslationArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AddTranslationArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AddTranslationArray);
		if (size)
			*size = sizeof(struct __ns1__AddTranslationArray);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AddTranslationArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__AddTranslationArray);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__AddTranslationArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddTranslationArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AddTranslationArray %p -> %p\n", q, p));
	*(struct __ns1__AddTranslationArray*)p = *(struct __ns1__AddTranslationArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Translate(struct soap *soap, struct __ns1__Translate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__Translate = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Translate(struct soap *soap, const struct __ns1__Translate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns3__Translate(soap, &a->ns3__Translate);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Translate(struct soap *soap, const char *tag, int id, const struct __ns1__Translate *a, const char *type)
{
	if (soap_out_PointerTo_ns3__Translate(soap, "ns3:Translate", -1, &a->ns3__Translate, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Translate * SOAP_FMAC4 soap_in___ns1__Translate(struct soap *soap, const char *tag, struct __ns1__Translate *a, const char *type)
{
	size_t soap_flag_ns3__Translate = 1;
	short soap_flag;
	a = (struct __ns1__Translate *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Translate, sizeof(struct __ns1__Translate), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Translate(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__Translate && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns3__Translate(soap, "ns3:Translate", &a->ns3__Translate, ""))
				{	soap_flag_ns3__Translate--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Translate(struct soap *soap, const struct __ns1__Translate *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Translate(soap, tag?tag:"-ns1:Translate", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Translate * SOAP_FMAC4 soap_get___ns1__Translate(struct soap *soap, struct __ns1__Translate *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Translate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Translate * SOAP_FMAC2 soap_instantiate___ns1__Translate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Translate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Translate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Translate);
		if (size)
			*size = sizeof(struct __ns1__Translate);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Translate[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__Translate);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__Translate*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Translate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Translate %p -> %p\n", q, p));
	*(struct __ns1__Translate*)p = *(struct __ns1__Translate*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetTranslations(struct soap *soap, struct __ns1__GetTranslations *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__GetTranslations = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetTranslations(struct soap *soap, const struct __ns1__GetTranslations *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns3__GetTranslations(soap, &a->ns3__GetTranslations);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetTranslations(struct soap *soap, const char *tag, int id, const struct __ns1__GetTranslations *a, const char *type)
{
	if (soap_out_PointerTo_ns3__GetTranslations(soap, "ns3:GetTranslations", -1, &a->ns3__GetTranslations, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetTranslations * SOAP_FMAC4 soap_in___ns1__GetTranslations(struct soap *soap, const char *tag, struct __ns1__GetTranslations *a, const char *type)
{
	size_t soap_flag_ns3__GetTranslations = 1;
	short soap_flag;
	a = (struct __ns1__GetTranslations *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetTranslations, sizeof(struct __ns1__GetTranslations), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetTranslations(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__GetTranslations && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns3__GetTranslations(soap, "ns3:GetTranslations", &a->ns3__GetTranslations, ""))
				{	soap_flag_ns3__GetTranslations--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetTranslations(struct soap *soap, const struct __ns1__GetTranslations *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetTranslations(soap, tag?tag:"-ns1:GetTranslations", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetTranslations * SOAP_FMAC4 soap_get___ns1__GetTranslations(struct soap *soap, struct __ns1__GetTranslations *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetTranslations(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetTranslations * SOAP_FMAC2 soap_instantiate___ns1__GetTranslations(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetTranslations(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetTranslations, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetTranslations);
		if (size)
			*size = sizeof(struct __ns1__GetTranslations);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetTranslations[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__GetTranslations);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__GetTranslations*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetTranslations(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetTranslations %p -> %p\n", q, p));
	*(struct __ns1__GetTranslations*)p = *(struct __ns1__GetTranslations*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLanguagesForTranslate(struct soap *soap, struct __ns1__GetLanguagesForTranslate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__GetLanguagesForTranslate = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLanguagesForTranslate(struct soap *soap, const struct __ns1__GetLanguagesForTranslate *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns3__GetLanguagesForTranslate(soap, &a->ns3__GetLanguagesForTranslate);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLanguagesForTranslate(struct soap *soap, const char *tag, int id, const struct __ns1__GetLanguagesForTranslate *a, const char *type)
{
	if (soap_out_PointerTo_ns3__GetLanguagesForTranslate(soap, "ns3:GetLanguagesForTranslate", -1, &a->ns3__GetLanguagesForTranslate, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLanguagesForTranslate * SOAP_FMAC4 soap_in___ns1__GetLanguagesForTranslate(struct soap *soap, const char *tag, struct __ns1__GetLanguagesForTranslate *a, const char *type)
{
	size_t soap_flag_ns3__GetLanguagesForTranslate = 1;
	short soap_flag;
	a = (struct __ns1__GetLanguagesForTranslate *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLanguagesForTranslate, sizeof(struct __ns1__GetLanguagesForTranslate), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLanguagesForTranslate(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__GetLanguagesForTranslate && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns3__GetLanguagesForTranslate(soap, "ns3:GetLanguagesForTranslate", &a->ns3__GetLanguagesForTranslate, ""))
				{	soap_flag_ns3__GetLanguagesForTranslate--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLanguagesForTranslate(struct soap *soap, const struct __ns1__GetLanguagesForTranslate *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLanguagesForTranslate(soap, tag?tag:"-ns1:GetLanguagesForTranslate", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLanguagesForTranslate * SOAP_FMAC4 soap_get___ns1__GetLanguagesForTranslate(struct soap *soap, struct __ns1__GetLanguagesForTranslate *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLanguagesForTranslate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLanguagesForTranslate * SOAP_FMAC2 soap_instantiate___ns1__GetLanguagesForTranslate(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLanguagesForTranslate(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLanguagesForTranslate, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLanguagesForTranslate);
		if (size)
			*size = sizeof(struct __ns1__GetLanguagesForTranslate);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLanguagesForTranslate[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__GetLanguagesForTranslate);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__GetLanguagesForTranslate*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLanguagesForTranslate(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLanguagesForTranslate %p -> %p\n", q, p));
	*(struct __ns1__GetLanguagesForTranslate*)p = *(struct __ns1__GetLanguagesForTranslate*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLanguagesForSpeak(struct soap *soap, struct __ns1__GetLanguagesForSpeak *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__GetLanguagesForSpeak = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLanguagesForSpeak(struct soap *soap, const struct __ns1__GetLanguagesForSpeak *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns3__GetLanguagesForSpeak(soap, &a->ns3__GetLanguagesForSpeak);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLanguagesForSpeak(struct soap *soap, const char *tag, int id, const struct __ns1__GetLanguagesForSpeak *a, const char *type)
{
	if (soap_out_PointerTo_ns3__GetLanguagesForSpeak(soap, "ns3:GetLanguagesForSpeak", -1, &a->ns3__GetLanguagesForSpeak, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLanguagesForSpeak * SOAP_FMAC4 soap_in___ns1__GetLanguagesForSpeak(struct soap *soap, const char *tag, struct __ns1__GetLanguagesForSpeak *a, const char *type)
{
	size_t soap_flag_ns3__GetLanguagesForSpeak = 1;
	short soap_flag;
	a = (struct __ns1__GetLanguagesForSpeak *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLanguagesForSpeak, sizeof(struct __ns1__GetLanguagesForSpeak), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLanguagesForSpeak(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__GetLanguagesForSpeak && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns3__GetLanguagesForSpeak(soap, "ns3:GetLanguagesForSpeak", &a->ns3__GetLanguagesForSpeak, ""))
				{	soap_flag_ns3__GetLanguagesForSpeak--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLanguagesForSpeak(struct soap *soap, const struct __ns1__GetLanguagesForSpeak *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLanguagesForSpeak(soap, tag?tag:"-ns1:GetLanguagesForSpeak", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLanguagesForSpeak * SOAP_FMAC4 soap_get___ns1__GetLanguagesForSpeak(struct soap *soap, struct __ns1__GetLanguagesForSpeak *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLanguagesForSpeak(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLanguagesForSpeak * SOAP_FMAC2 soap_instantiate___ns1__GetLanguagesForSpeak(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLanguagesForSpeak(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLanguagesForSpeak, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLanguagesForSpeak);
		if (size)
			*size = sizeof(struct __ns1__GetLanguagesForSpeak);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLanguagesForSpeak[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__GetLanguagesForSpeak);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__GetLanguagesForSpeak*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLanguagesForSpeak(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLanguagesForSpeak %p -> %p\n", q, p));
	*(struct __ns1__GetLanguagesForSpeak*)p = *(struct __ns1__GetLanguagesForSpeak*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetLanguageNames(struct soap *soap, struct __ns1__GetLanguageNames *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__GetLanguageNames = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetLanguageNames(struct soap *soap, const struct __ns1__GetLanguageNames *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns3__GetLanguageNames(soap, &a->ns3__GetLanguageNames);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetLanguageNames(struct soap *soap, const char *tag, int id, const struct __ns1__GetLanguageNames *a, const char *type)
{
	if (soap_out_PointerTo_ns3__GetLanguageNames(soap, "ns3:GetLanguageNames", -1, &a->ns3__GetLanguageNames, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLanguageNames * SOAP_FMAC4 soap_in___ns1__GetLanguageNames(struct soap *soap, const char *tag, struct __ns1__GetLanguageNames *a, const char *type)
{
	size_t soap_flag_ns3__GetLanguageNames = 1;
	short soap_flag;
	a = (struct __ns1__GetLanguageNames *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetLanguageNames, sizeof(struct __ns1__GetLanguageNames), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetLanguageNames(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__GetLanguageNames && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns3__GetLanguageNames(soap, "ns3:GetLanguageNames", &a->ns3__GetLanguageNames, ""))
				{	soap_flag_ns3__GetLanguageNames--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetLanguageNames(struct soap *soap, const struct __ns1__GetLanguageNames *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetLanguageNames(soap, tag?tag:"-ns1:GetLanguageNames", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetLanguageNames * SOAP_FMAC4 soap_get___ns1__GetLanguageNames(struct soap *soap, struct __ns1__GetLanguageNames *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetLanguageNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetLanguageNames * SOAP_FMAC2 soap_instantiate___ns1__GetLanguageNames(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetLanguageNames(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetLanguageNames, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLanguageNames);
		if (size)
			*size = sizeof(struct __ns1__GetLanguageNames);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetLanguageNames[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__GetLanguageNames);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__GetLanguageNames*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetLanguageNames(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetLanguageNames %p -> %p\n", q, p));
	*(struct __ns1__GetLanguageNames*)p = *(struct __ns1__GetLanguageNames*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__GetAppIdToken(struct soap *soap, struct __ns1__GetAppIdToken *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__GetAppIdToken = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__GetAppIdToken(struct soap *soap, const struct __ns1__GetAppIdToken *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns3__GetAppIdToken(soap, &a->ns3__GetAppIdToken);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__GetAppIdToken(struct soap *soap, const char *tag, int id, const struct __ns1__GetAppIdToken *a, const char *type)
{
	if (soap_out_PointerTo_ns3__GetAppIdToken(soap, "ns3:GetAppIdToken", -1, &a->ns3__GetAppIdToken, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetAppIdToken * SOAP_FMAC4 soap_in___ns1__GetAppIdToken(struct soap *soap, const char *tag, struct __ns1__GetAppIdToken *a, const char *type)
{
	size_t soap_flag_ns3__GetAppIdToken = 1;
	short soap_flag;
	a = (struct __ns1__GetAppIdToken *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__GetAppIdToken, sizeof(struct __ns1__GetAppIdToken), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__GetAppIdToken(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__GetAppIdToken && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns3__GetAppIdToken(soap, "ns3:GetAppIdToken", &a->ns3__GetAppIdToken, ""))
				{	soap_flag_ns3__GetAppIdToken--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__GetAppIdToken(struct soap *soap, const struct __ns1__GetAppIdToken *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__GetAppIdToken(soap, tag?tag:"-ns1:GetAppIdToken", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__GetAppIdToken * SOAP_FMAC4 soap_get___ns1__GetAppIdToken(struct soap *soap, struct __ns1__GetAppIdToken *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__GetAppIdToken(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__GetAppIdToken * SOAP_FMAC2 soap_instantiate___ns1__GetAppIdToken(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__GetAppIdToken(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__GetAppIdToken, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetAppIdToken);
		if (size)
			*size = sizeof(struct __ns1__GetAppIdToken);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__GetAppIdToken[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__GetAppIdToken);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__GetAppIdToken*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__GetAppIdToken(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__GetAppIdToken %p -> %p\n", q, p));
	*(struct __ns1__GetAppIdToken*)p = *(struct __ns1__GetAppIdToken*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__DetectArray(struct soap *soap, struct __ns1__DetectArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__DetectArray = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__DetectArray(struct soap *soap, const struct __ns1__DetectArray *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns3__DetectArray(soap, &a->ns3__DetectArray);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__DetectArray(struct soap *soap, const char *tag, int id, const struct __ns1__DetectArray *a, const char *type)
{
	if (soap_out_PointerTo_ns3__DetectArray(soap, "ns3:DetectArray", -1, &a->ns3__DetectArray, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DetectArray * SOAP_FMAC4 soap_in___ns1__DetectArray(struct soap *soap, const char *tag, struct __ns1__DetectArray *a, const char *type)
{
	size_t soap_flag_ns3__DetectArray = 1;
	short soap_flag;
	a = (struct __ns1__DetectArray *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__DetectArray, sizeof(struct __ns1__DetectArray), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__DetectArray(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__DetectArray && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns3__DetectArray(soap, "ns3:DetectArray", &a->ns3__DetectArray, ""))
				{	soap_flag_ns3__DetectArray--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__DetectArray(struct soap *soap, const struct __ns1__DetectArray *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__DetectArray(soap, tag?tag:"-ns1:DetectArray", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__DetectArray * SOAP_FMAC4 soap_get___ns1__DetectArray(struct soap *soap, struct __ns1__DetectArray *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__DetectArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__DetectArray * SOAP_FMAC2 soap_instantiate___ns1__DetectArray(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__DetectArray(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__DetectArray, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__DetectArray);
		if (size)
			*size = sizeof(struct __ns1__DetectArray);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__DetectArray[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__DetectArray);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__DetectArray*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__DetectArray(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__DetectArray %p -> %p\n", q, p));
	*(struct __ns1__DetectArray*)p = *(struct __ns1__DetectArray*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__Detect(struct soap *soap, struct __ns1__Detect *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__Detect = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__Detect(struct soap *soap, const struct __ns1__Detect *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns3__Detect(soap, &a->ns3__Detect);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__Detect(struct soap *soap, const char *tag, int id, const struct __ns1__Detect *a, const char *type)
{
	if (soap_out_PointerTo_ns3__Detect(soap, "ns3:Detect", -1, &a->ns3__Detect, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Detect * SOAP_FMAC4 soap_in___ns1__Detect(struct soap *soap, const char *tag, struct __ns1__Detect *a, const char *type)
{
	size_t soap_flag_ns3__Detect = 1;
	short soap_flag;
	a = (struct __ns1__Detect *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__Detect, sizeof(struct __ns1__Detect), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__Detect(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__Detect && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns3__Detect(soap, "ns3:Detect", &a->ns3__Detect, ""))
				{	soap_flag_ns3__Detect--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__Detect(struct soap *soap, const struct __ns1__Detect *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__Detect(soap, tag?tag:"-ns1:Detect", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__Detect * SOAP_FMAC4 soap_get___ns1__Detect(struct soap *soap, struct __ns1__Detect *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__Detect(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__Detect * SOAP_FMAC2 soap_instantiate___ns1__Detect(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__Detect(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__Detect, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Detect);
		if (size)
			*size = sizeof(struct __ns1__Detect);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__Detect[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__Detect);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__Detect*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__Detect(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__Detect %p -> %p\n", q, p));
	*(struct __ns1__Detect*)p = *(struct __ns1__Detect*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__BreakSentences(struct soap *soap, struct __ns1__BreakSentences *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__BreakSentences = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__BreakSentences(struct soap *soap, const struct __ns1__BreakSentences *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns3__BreakSentences(soap, &a->ns3__BreakSentences);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__BreakSentences(struct soap *soap, const char *tag, int id, const struct __ns1__BreakSentences *a, const char *type)
{
	if (soap_out_PointerTo_ns3__BreakSentences(soap, "ns3:BreakSentences", -1, &a->ns3__BreakSentences, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__BreakSentences * SOAP_FMAC4 soap_in___ns1__BreakSentences(struct soap *soap, const char *tag, struct __ns1__BreakSentences *a, const char *type)
{
	size_t soap_flag_ns3__BreakSentences = 1;
	short soap_flag;
	a = (struct __ns1__BreakSentences *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__BreakSentences, sizeof(struct __ns1__BreakSentences), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__BreakSentences(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__BreakSentences && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns3__BreakSentences(soap, "ns3:BreakSentences", &a->ns3__BreakSentences, ""))
				{	soap_flag_ns3__BreakSentences--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__BreakSentences(struct soap *soap, const struct __ns1__BreakSentences *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__BreakSentences(soap, tag?tag:"-ns1:BreakSentences", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__BreakSentences * SOAP_FMAC4 soap_get___ns1__BreakSentences(struct soap *soap, struct __ns1__BreakSentences *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__BreakSentences(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__BreakSentences * SOAP_FMAC2 soap_instantiate___ns1__BreakSentences(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__BreakSentences(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__BreakSentences, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__BreakSentences);
		if (size)
			*size = sizeof(struct __ns1__BreakSentences);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__BreakSentences[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__BreakSentences);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__BreakSentences*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__BreakSentences(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__BreakSentences %p -> %p\n", q, p));
	*(struct __ns1__BreakSentences*)p = *(struct __ns1__BreakSentences*)q;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default___ns1__AddTranslation(struct soap *soap, struct __ns1__AddTranslation *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	a->ns3__AddTranslation = NULL;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize___ns1__AddTranslation(struct soap *soap, const struct __ns1__AddTranslation *a)
{
	(void)soap; (void)a; /* appease -Wall -Werror */
	soap_serialize_PointerTo_ns3__AddTranslation(soap, &a->ns3__AddTranslation);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out___ns1__AddTranslation(struct soap *soap, const char *tag, int id, const struct __ns1__AddTranslation *a, const char *type)
{
	if (soap_out_PointerTo_ns3__AddTranslation(soap, "ns3:AddTranslation", -1, &a->ns3__AddTranslation, ""))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddTranslation * SOAP_FMAC4 soap_in___ns1__AddTranslation(struct soap *soap, const char *tag, struct __ns1__AddTranslation *a, const char *type)
{
	size_t soap_flag_ns3__AddTranslation = 1;
	short soap_flag;
	a = (struct __ns1__AddTranslation *)soap_id_enter(soap, "", a, SOAP_TYPE___ns1__AddTranslation, sizeof(struct __ns1__AddTranslation), 0, NULL, NULL, NULL);
	if (!a)
		return NULL;
	soap_default___ns1__AddTranslation(soap, a);
		for (soap_flag = 0;; soap_flag = 1)
		{	soap->error = SOAP_TAG_MISMATCH;
			if (soap_flag_ns3__AddTranslation && soap->error == SOAP_TAG_MISMATCH)
				if (soap_in_PointerTo_ns3__AddTranslation(soap, "ns3:AddTranslation", &a->ns3__AddTranslation, ""))
				{	soap_flag_ns3__AddTranslation--;
					continue;
				}
			if (soap->error == SOAP_TAG_MISMATCH)
				if (soap_flag)
				{	soap->error = SOAP_OK;
					break;
				}
			if (soap->error == SOAP_NO_TAG)
				break;
			if (soap->error)
				return NULL;
		}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put___ns1__AddTranslation(struct soap *soap, const struct __ns1__AddTranslation *a, const char *tag, const char *type)
{
	register int id = 0;
	if (soap_out___ns1__AddTranslation(soap, tag?tag:"-ns1:AddTranslation", id, a, type))
		return soap->error;
	return SOAP_OK;
}

SOAP_FMAC3 struct __ns1__AddTranslation * SOAP_FMAC4 soap_get___ns1__AddTranslation(struct soap *soap, struct __ns1__AddTranslation *p, const char *tag, const char *type)
{
	if ((p = soap_in___ns1__AddTranslation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC1 struct __ns1__AddTranslation * SOAP_FMAC2 soap_instantiate___ns1__AddTranslation(struct soap *soap, int n, const char *type, const char *arrayType, size_t *size)
{
	(void)type; (void)arrayType; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "soap_instantiate___ns1__AddTranslation(%d, %s, %s)\n", n, type?type:"", arrayType?arrayType:""));
	struct soap_clist *cp = soap_link(soap, NULL, SOAP_TYPE___ns1__AddTranslation, n, soap_fdelete);
	if (!cp)
		return NULL;
	if (n < 0)
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AddTranslation);
		if (size)
			*size = sizeof(struct __ns1__AddTranslation);
	}
	else
	{	cp->ptr = (void*)SOAP_NEW(struct __ns1__AddTranslation[n]);
		if (!cp->ptr)
		{	soap->error = SOAP_EOM;
			return NULL;
		}
		if (size)
			*size = n * sizeof(struct __ns1__AddTranslation);
	}
		DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Instantiated location=%p\n", cp->ptr));
	return (struct __ns1__AddTranslation*)cp->ptr;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_copy___ns1__AddTranslation(struct soap *soap, int st, int tt, void *p, size_t len, const void *q, size_t n)
{
	(void)soap; (void)st; (void)len; (void)n; /* appease -Wall -Werror */
	DBGLOG(TEST, SOAP_MESSAGE(fdebug, "Copying struct __ns1__AddTranslation %p -> %p\n", q, p));
	*(struct __ns1__AddTranslation*)p = *(struct __ns1__AddTranslation*)q;
}

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Reason))
		soap_serialize_SOAP_ENV__Reason(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Reason *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Reason);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Reason(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Reason(struct soap *soap, const char *tag, struct SOAP_ENV__Reason **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Reason **)soap_malloc(soap, sizeof(struct SOAP_ENV__Reason *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Reason(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Reason **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Reason, sizeof(struct SOAP_ENV__Reason), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Reason);
	if (soap_out_PointerToSOAP_ENV__Reason(soap, tag?tag:"SOAP-ENV:Reason", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Reason ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Reason(struct soap *soap, struct SOAP_ENV__Reason **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Reason(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Detail))
		soap_serialize_SOAP_ENV__Detail(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Detail *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Detail);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Detail(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Detail(struct soap *soap, const char *tag, struct SOAP_ENV__Detail **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Detail **)soap_malloc(soap, sizeof(struct SOAP_ENV__Detail *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Detail(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Detail **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Detail, sizeof(struct SOAP_ENV__Detail), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Detail);
	if (soap_out_PointerToSOAP_ENV__Detail(soap, tag?tag:"SOAP-ENV:Detail", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Detail ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Detail(struct soap *soap, struct SOAP_ENV__Detail **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Detail(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

#ifndef WITH_NOGLOBAL

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_SOAP_ENV__Code))
		soap_serialize_SOAP_ENV__Code(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, int id, struct SOAP_ENV__Code *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_SOAP_ENV__Code);
	if (id < 0)
		return soap->error;
	return soap_out_SOAP_ENV__Code(soap, tag, id, *a, type);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_in_PointerToSOAP_ENV__Code(struct soap *soap, const char *tag, struct SOAP_ENV__Code **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (struct SOAP_ENV__Code **)soap_malloc(soap, sizeof(struct SOAP_ENV__Code *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_SOAP_ENV__Code(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (struct SOAP_ENV__Code **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_SOAP_ENV__Code, sizeof(struct SOAP_ENV__Code), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToSOAP_ENV__Code);
	if (soap_out_PointerToSOAP_ENV__Code(soap, tag?tag:"SOAP-ENV:Code", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 struct SOAP_ENV__Code ** SOAP_FMAC4 soap_get_PointerToSOAP_ENV__Code(struct soap *soap, struct SOAP_ENV__Code **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToSOAP_ENV__Code(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#endif

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__TranslateArrayResponse(struct soap *soap, _ns3__TranslateArrayResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__TranslateArrayResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__TranslateArrayResponse(struct soap *soap, const char *tag, int id, _ns3__TranslateArrayResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__TranslateArrayResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__TranslateArrayResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__TranslateArrayResponse(struct soap *soap, const char *tag, _ns3__TranslateArrayResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__TranslateArrayResponse **)soap_malloc(soap, sizeof(_ns3__TranslateArrayResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__TranslateArrayResponse *)soap_instantiate__ns3__TranslateArrayResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__TranslateArrayResponse ** p = (_ns3__TranslateArrayResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__TranslateArrayResponse, sizeof(_ns3__TranslateArrayResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__TranslateArrayResponse(struct soap *soap, _ns3__TranslateArrayResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__TranslateArrayResponse);
	if (soap_out_PointerTo_ns3__TranslateArrayResponse(soap, tag?tag:"ns3:TranslateArrayResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__TranslateArrayResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__TranslateArrayResponse(struct soap *soap, _ns3__TranslateArrayResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__TranslateArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__TranslateArray(struct soap *soap, _ns3__TranslateArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__TranslateArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__TranslateArray(struct soap *soap, const char *tag, int id, _ns3__TranslateArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__TranslateArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__TranslateArray ** SOAP_FMAC4 soap_in_PointerTo_ns3__TranslateArray(struct soap *soap, const char *tag, _ns3__TranslateArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__TranslateArray **)soap_malloc(soap, sizeof(_ns3__TranslateArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__TranslateArray *)soap_instantiate__ns3__TranslateArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__TranslateArray ** p = (_ns3__TranslateArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__TranslateArray, sizeof(_ns3__TranslateArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__TranslateArray(struct soap *soap, _ns3__TranslateArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__TranslateArray);
	if (soap_out_PointerTo_ns3__TranslateArray(soap, tag?tag:"ns3:TranslateArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__TranslateArray ** SOAP_FMAC4 soap_get_PointerTo_ns3__TranslateArray(struct soap *soap, _ns3__TranslateArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__TranslateArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__SpeakResponse(struct soap *soap, _ns3__SpeakResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__SpeakResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__SpeakResponse(struct soap *soap, const char *tag, int id, _ns3__SpeakResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__SpeakResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__SpeakResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__SpeakResponse(struct soap *soap, const char *tag, _ns3__SpeakResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__SpeakResponse **)soap_malloc(soap, sizeof(_ns3__SpeakResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__SpeakResponse *)soap_instantiate__ns3__SpeakResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__SpeakResponse ** p = (_ns3__SpeakResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__SpeakResponse, sizeof(_ns3__SpeakResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__SpeakResponse(struct soap *soap, _ns3__SpeakResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__SpeakResponse);
	if (soap_out_PointerTo_ns3__SpeakResponse(soap, tag?tag:"ns3:SpeakResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__SpeakResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__SpeakResponse(struct soap *soap, _ns3__SpeakResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__SpeakResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__Speak(struct soap *soap, _ns3__Speak *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__Speak))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__Speak(struct soap *soap, const char *tag, int id, _ns3__Speak *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__Speak);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__Speak ** SOAP_FMAC4 soap_in_PointerTo_ns3__Speak(struct soap *soap, const char *tag, _ns3__Speak **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__Speak **)soap_malloc(soap, sizeof(_ns3__Speak *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__Speak *)soap_instantiate__ns3__Speak(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__Speak ** p = (_ns3__Speak **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__Speak, sizeof(_ns3__Speak), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__Speak(struct soap *soap, _ns3__Speak *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__Speak);
	if (soap_out_PointerTo_ns3__Speak(soap, tag?tag:"ns3:Speak", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__Speak ** SOAP_FMAC4 soap_get_PointerTo_ns3__Speak(struct soap *soap, _ns3__Speak **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__Speak(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetTranslationsArrayResponse(struct soap *soap, _ns3__GetTranslationsArrayResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__GetTranslationsArrayResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetTranslationsArrayResponse(struct soap *soap, const char *tag, int id, _ns3__GetTranslationsArrayResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__GetTranslationsArrayResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__GetTranslationsArrayResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetTranslationsArrayResponse(struct soap *soap, const char *tag, _ns3__GetTranslationsArrayResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__GetTranslationsArrayResponse **)soap_malloc(soap, sizeof(_ns3__GetTranslationsArrayResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__GetTranslationsArrayResponse *)soap_instantiate__ns3__GetTranslationsArrayResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__GetTranslationsArrayResponse ** p = (_ns3__GetTranslationsArrayResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__GetTranslationsArrayResponse, sizeof(_ns3__GetTranslationsArrayResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetTranslationsArrayResponse(struct soap *soap, _ns3__GetTranslationsArrayResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__GetTranslationsArrayResponse);
	if (soap_out_PointerTo_ns3__GetTranslationsArrayResponse(soap, tag?tag:"ns3:GetTranslationsArrayResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__GetTranslationsArrayResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetTranslationsArrayResponse(struct soap *soap, _ns3__GetTranslationsArrayResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__GetTranslationsArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetTranslationsArray(struct soap *soap, _ns3__GetTranslationsArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__GetTranslationsArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetTranslationsArray(struct soap *soap, const char *tag, int id, _ns3__GetTranslationsArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__GetTranslationsArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__GetTranslationsArray ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetTranslationsArray(struct soap *soap, const char *tag, _ns3__GetTranslationsArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__GetTranslationsArray **)soap_malloc(soap, sizeof(_ns3__GetTranslationsArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__GetTranslationsArray *)soap_instantiate__ns3__GetTranslationsArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__GetTranslationsArray ** p = (_ns3__GetTranslationsArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__GetTranslationsArray, sizeof(_ns3__GetTranslationsArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetTranslationsArray(struct soap *soap, _ns3__GetTranslationsArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__GetTranslationsArray);
	if (soap_out_PointerTo_ns3__GetTranslationsArray(soap, tag?tag:"ns3:GetTranslationsArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__GetTranslationsArray ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetTranslationsArray(struct soap *soap, _ns3__GetTranslationsArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__GetTranslationsArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__AddTranslationArrayResponse(struct soap *soap, _ns3__AddTranslationArrayResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__AddTranslationArrayResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__AddTranslationArrayResponse(struct soap *soap, const char *tag, int id, _ns3__AddTranslationArrayResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__AddTranslationArrayResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__AddTranslationArrayResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__AddTranslationArrayResponse(struct soap *soap, const char *tag, _ns3__AddTranslationArrayResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__AddTranslationArrayResponse **)soap_malloc(soap, sizeof(_ns3__AddTranslationArrayResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__AddTranslationArrayResponse *)soap_instantiate__ns3__AddTranslationArrayResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__AddTranslationArrayResponse ** p = (_ns3__AddTranslationArrayResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__AddTranslationArrayResponse, sizeof(_ns3__AddTranslationArrayResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__AddTranslationArrayResponse(struct soap *soap, _ns3__AddTranslationArrayResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__AddTranslationArrayResponse);
	if (soap_out_PointerTo_ns3__AddTranslationArrayResponse(soap, tag?tag:"ns3:AddTranslationArrayResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__AddTranslationArrayResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__AddTranslationArrayResponse(struct soap *soap, _ns3__AddTranslationArrayResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__AddTranslationArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__AddTranslationArray(struct soap *soap, _ns3__AddTranslationArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__AddTranslationArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__AddTranslationArray(struct soap *soap, const char *tag, int id, _ns3__AddTranslationArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__AddTranslationArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__AddTranslationArray ** SOAP_FMAC4 soap_in_PointerTo_ns3__AddTranslationArray(struct soap *soap, const char *tag, _ns3__AddTranslationArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__AddTranslationArray **)soap_malloc(soap, sizeof(_ns3__AddTranslationArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__AddTranslationArray *)soap_instantiate__ns3__AddTranslationArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__AddTranslationArray ** p = (_ns3__AddTranslationArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__AddTranslationArray, sizeof(_ns3__AddTranslationArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__AddTranslationArray(struct soap *soap, _ns3__AddTranslationArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__AddTranslationArray);
	if (soap_out_PointerTo_ns3__AddTranslationArray(soap, tag?tag:"ns3:AddTranslationArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__AddTranslationArray ** SOAP_FMAC4 soap_get_PointerTo_ns3__AddTranslationArray(struct soap *soap, _ns3__AddTranslationArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__AddTranslationArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__TranslateResponse(struct soap *soap, _ns3__TranslateResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__TranslateResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__TranslateResponse(struct soap *soap, const char *tag, int id, _ns3__TranslateResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__TranslateResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__TranslateResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__TranslateResponse(struct soap *soap, const char *tag, _ns3__TranslateResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__TranslateResponse **)soap_malloc(soap, sizeof(_ns3__TranslateResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__TranslateResponse *)soap_instantiate__ns3__TranslateResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__TranslateResponse ** p = (_ns3__TranslateResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__TranslateResponse, sizeof(_ns3__TranslateResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__TranslateResponse(struct soap *soap, _ns3__TranslateResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__TranslateResponse);
	if (soap_out_PointerTo_ns3__TranslateResponse(soap, tag?tag:"ns3:TranslateResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__TranslateResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__TranslateResponse(struct soap *soap, _ns3__TranslateResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__TranslateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__Translate(struct soap *soap, _ns3__Translate *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__Translate))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__Translate(struct soap *soap, const char *tag, int id, _ns3__Translate *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__Translate);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__Translate ** SOAP_FMAC4 soap_in_PointerTo_ns3__Translate(struct soap *soap, const char *tag, _ns3__Translate **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__Translate **)soap_malloc(soap, sizeof(_ns3__Translate *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__Translate *)soap_instantiate__ns3__Translate(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__Translate ** p = (_ns3__Translate **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__Translate, sizeof(_ns3__Translate), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__Translate(struct soap *soap, _ns3__Translate *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__Translate);
	if (soap_out_PointerTo_ns3__Translate(soap, tag?tag:"ns3:Translate", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__Translate ** SOAP_FMAC4 soap_get_PointerTo_ns3__Translate(struct soap *soap, _ns3__Translate **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__Translate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetTranslationsResponse(struct soap *soap, _ns3__GetTranslationsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__GetTranslationsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetTranslationsResponse(struct soap *soap, const char *tag, int id, _ns3__GetTranslationsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__GetTranslationsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__GetTranslationsResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetTranslationsResponse(struct soap *soap, const char *tag, _ns3__GetTranslationsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__GetTranslationsResponse **)soap_malloc(soap, sizeof(_ns3__GetTranslationsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__GetTranslationsResponse *)soap_instantiate__ns3__GetTranslationsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__GetTranslationsResponse ** p = (_ns3__GetTranslationsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__GetTranslationsResponse, sizeof(_ns3__GetTranslationsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetTranslationsResponse(struct soap *soap, _ns3__GetTranslationsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__GetTranslationsResponse);
	if (soap_out_PointerTo_ns3__GetTranslationsResponse(soap, tag?tag:"ns3:GetTranslationsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__GetTranslationsResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetTranslationsResponse(struct soap *soap, _ns3__GetTranslationsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__GetTranslationsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetTranslations(struct soap *soap, _ns3__GetTranslations *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__GetTranslations))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetTranslations(struct soap *soap, const char *tag, int id, _ns3__GetTranslations *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__GetTranslations);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__GetTranslations ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetTranslations(struct soap *soap, const char *tag, _ns3__GetTranslations **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__GetTranslations **)soap_malloc(soap, sizeof(_ns3__GetTranslations *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__GetTranslations *)soap_instantiate__ns3__GetTranslations(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__GetTranslations ** p = (_ns3__GetTranslations **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__GetTranslations, sizeof(_ns3__GetTranslations), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetTranslations(struct soap *soap, _ns3__GetTranslations *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__GetTranslations);
	if (soap_out_PointerTo_ns3__GetTranslations(soap, tag?tag:"ns3:GetTranslations", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__GetTranslations ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetTranslations(struct soap *soap, _ns3__GetTranslations **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__GetTranslations(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetLanguagesForTranslateResponse(struct soap *soap, _ns3__GetLanguagesForTranslateResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__GetLanguagesForTranslateResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetLanguagesForTranslateResponse(struct soap *soap, const char *tag, int id, _ns3__GetLanguagesForTranslateResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__GetLanguagesForTranslateResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__GetLanguagesForTranslateResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetLanguagesForTranslateResponse(struct soap *soap, const char *tag, _ns3__GetLanguagesForTranslateResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__GetLanguagesForTranslateResponse **)soap_malloc(soap, sizeof(_ns3__GetLanguagesForTranslateResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__GetLanguagesForTranslateResponse *)soap_instantiate__ns3__GetLanguagesForTranslateResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__GetLanguagesForTranslateResponse ** p = (_ns3__GetLanguagesForTranslateResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__GetLanguagesForTranslateResponse, sizeof(_ns3__GetLanguagesForTranslateResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetLanguagesForTranslateResponse(struct soap *soap, _ns3__GetLanguagesForTranslateResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__GetLanguagesForTranslateResponse);
	if (soap_out_PointerTo_ns3__GetLanguagesForTranslateResponse(soap, tag?tag:"ns3:GetLanguagesForTranslateResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__GetLanguagesForTranslateResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetLanguagesForTranslateResponse(struct soap *soap, _ns3__GetLanguagesForTranslateResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__GetLanguagesForTranslateResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetLanguagesForTranslate(struct soap *soap, _ns3__GetLanguagesForTranslate *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__GetLanguagesForTranslate))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetLanguagesForTranslate(struct soap *soap, const char *tag, int id, _ns3__GetLanguagesForTranslate *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__GetLanguagesForTranslate);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__GetLanguagesForTranslate ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetLanguagesForTranslate(struct soap *soap, const char *tag, _ns3__GetLanguagesForTranslate **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__GetLanguagesForTranslate **)soap_malloc(soap, sizeof(_ns3__GetLanguagesForTranslate *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__GetLanguagesForTranslate *)soap_instantiate__ns3__GetLanguagesForTranslate(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__GetLanguagesForTranslate ** p = (_ns3__GetLanguagesForTranslate **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__GetLanguagesForTranslate, sizeof(_ns3__GetLanguagesForTranslate), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetLanguagesForTranslate(struct soap *soap, _ns3__GetLanguagesForTranslate *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__GetLanguagesForTranslate);
	if (soap_out_PointerTo_ns3__GetLanguagesForTranslate(soap, tag?tag:"ns3:GetLanguagesForTranslate", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__GetLanguagesForTranslate ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetLanguagesForTranslate(struct soap *soap, _ns3__GetLanguagesForTranslate **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__GetLanguagesForTranslate(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetLanguagesForSpeakResponse(struct soap *soap, _ns3__GetLanguagesForSpeakResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__GetLanguagesForSpeakResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetLanguagesForSpeakResponse(struct soap *soap, const char *tag, int id, _ns3__GetLanguagesForSpeakResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__GetLanguagesForSpeakResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__GetLanguagesForSpeakResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetLanguagesForSpeakResponse(struct soap *soap, const char *tag, _ns3__GetLanguagesForSpeakResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__GetLanguagesForSpeakResponse **)soap_malloc(soap, sizeof(_ns3__GetLanguagesForSpeakResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__GetLanguagesForSpeakResponse *)soap_instantiate__ns3__GetLanguagesForSpeakResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__GetLanguagesForSpeakResponse ** p = (_ns3__GetLanguagesForSpeakResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__GetLanguagesForSpeakResponse, sizeof(_ns3__GetLanguagesForSpeakResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetLanguagesForSpeakResponse(struct soap *soap, _ns3__GetLanguagesForSpeakResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__GetLanguagesForSpeakResponse);
	if (soap_out_PointerTo_ns3__GetLanguagesForSpeakResponse(soap, tag?tag:"ns3:GetLanguagesForSpeakResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__GetLanguagesForSpeakResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetLanguagesForSpeakResponse(struct soap *soap, _ns3__GetLanguagesForSpeakResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__GetLanguagesForSpeakResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetLanguagesForSpeak(struct soap *soap, _ns3__GetLanguagesForSpeak *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__GetLanguagesForSpeak))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetLanguagesForSpeak(struct soap *soap, const char *tag, int id, _ns3__GetLanguagesForSpeak *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__GetLanguagesForSpeak);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__GetLanguagesForSpeak ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetLanguagesForSpeak(struct soap *soap, const char *tag, _ns3__GetLanguagesForSpeak **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__GetLanguagesForSpeak **)soap_malloc(soap, sizeof(_ns3__GetLanguagesForSpeak *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__GetLanguagesForSpeak *)soap_instantiate__ns3__GetLanguagesForSpeak(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__GetLanguagesForSpeak ** p = (_ns3__GetLanguagesForSpeak **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__GetLanguagesForSpeak, sizeof(_ns3__GetLanguagesForSpeak), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetLanguagesForSpeak(struct soap *soap, _ns3__GetLanguagesForSpeak *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__GetLanguagesForSpeak);
	if (soap_out_PointerTo_ns3__GetLanguagesForSpeak(soap, tag?tag:"ns3:GetLanguagesForSpeak", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__GetLanguagesForSpeak ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetLanguagesForSpeak(struct soap *soap, _ns3__GetLanguagesForSpeak **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__GetLanguagesForSpeak(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetLanguageNamesResponse(struct soap *soap, _ns3__GetLanguageNamesResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__GetLanguageNamesResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetLanguageNamesResponse(struct soap *soap, const char *tag, int id, _ns3__GetLanguageNamesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__GetLanguageNamesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__GetLanguageNamesResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetLanguageNamesResponse(struct soap *soap, const char *tag, _ns3__GetLanguageNamesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__GetLanguageNamesResponse **)soap_malloc(soap, sizeof(_ns3__GetLanguageNamesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__GetLanguageNamesResponse *)soap_instantiate__ns3__GetLanguageNamesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__GetLanguageNamesResponse ** p = (_ns3__GetLanguageNamesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__GetLanguageNamesResponse, sizeof(_ns3__GetLanguageNamesResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetLanguageNamesResponse(struct soap *soap, _ns3__GetLanguageNamesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__GetLanguageNamesResponse);
	if (soap_out_PointerTo_ns3__GetLanguageNamesResponse(soap, tag?tag:"ns3:GetLanguageNamesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__GetLanguageNamesResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetLanguageNamesResponse(struct soap *soap, _ns3__GetLanguageNamesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__GetLanguageNamesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetLanguageNames(struct soap *soap, _ns3__GetLanguageNames *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__GetLanguageNames))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetLanguageNames(struct soap *soap, const char *tag, int id, _ns3__GetLanguageNames *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__GetLanguageNames);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__GetLanguageNames ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetLanguageNames(struct soap *soap, const char *tag, _ns3__GetLanguageNames **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__GetLanguageNames **)soap_malloc(soap, sizeof(_ns3__GetLanguageNames *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__GetLanguageNames *)soap_instantiate__ns3__GetLanguageNames(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__GetLanguageNames ** p = (_ns3__GetLanguageNames **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__GetLanguageNames, sizeof(_ns3__GetLanguageNames), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetLanguageNames(struct soap *soap, _ns3__GetLanguageNames *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__GetLanguageNames);
	if (soap_out_PointerTo_ns3__GetLanguageNames(soap, tag?tag:"ns3:GetLanguageNames", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__GetLanguageNames ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetLanguageNames(struct soap *soap, _ns3__GetLanguageNames **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__GetLanguageNames(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetAppIdTokenResponse(struct soap *soap, _ns3__GetAppIdTokenResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__GetAppIdTokenResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetAppIdTokenResponse(struct soap *soap, const char *tag, int id, _ns3__GetAppIdTokenResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__GetAppIdTokenResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__GetAppIdTokenResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetAppIdTokenResponse(struct soap *soap, const char *tag, _ns3__GetAppIdTokenResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__GetAppIdTokenResponse **)soap_malloc(soap, sizeof(_ns3__GetAppIdTokenResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__GetAppIdTokenResponse *)soap_instantiate__ns3__GetAppIdTokenResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__GetAppIdTokenResponse ** p = (_ns3__GetAppIdTokenResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__GetAppIdTokenResponse, sizeof(_ns3__GetAppIdTokenResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetAppIdTokenResponse(struct soap *soap, _ns3__GetAppIdTokenResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__GetAppIdTokenResponse);
	if (soap_out_PointerTo_ns3__GetAppIdTokenResponse(soap, tag?tag:"ns3:GetAppIdTokenResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__GetAppIdTokenResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetAppIdTokenResponse(struct soap *soap, _ns3__GetAppIdTokenResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__GetAppIdTokenResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__GetAppIdToken(struct soap *soap, _ns3__GetAppIdToken *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__GetAppIdToken))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__GetAppIdToken(struct soap *soap, const char *tag, int id, _ns3__GetAppIdToken *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__GetAppIdToken);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__GetAppIdToken ** SOAP_FMAC4 soap_in_PointerTo_ns3__GetAppIdToken(struct soap *soap, const char *tag, _ns3__GetAppIdToken **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__GetAppIdToken **)soap_malloc(soap, sizeof(_ns3__GetAppIdToken *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__GetAppIdToken *)soap_instantiate__ns3__GetAppIdToken(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__GetAppIdToken ** p = (_ns3__GetAppIdToken **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__GetAppIdToken, sizeof(_ns3__GetAppIdToken), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__GetAppIdToken(struct soap *soap, _ns3__GetAppIdToken *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__GetAppIdToken);
	if (soap_out_PointerTo_ns3__GetAppIdToken(soap, tag?tag:"ns3:GetAppIdToken", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__GetAppIdToken ** SOAP_FMAC4 soap_get_PointerTo_ns3__GetAppIdToken(struct soap *soap, _ns3__GetAppIdToken **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__GetAppIdToken(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__DetectArrayResponse(struct soap *soap, _ns3__DetectArrayResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__DetectArrayResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__DetectArrayResponse(struct soap *soap, const char *tag, int id, _ns3__DetectArrayResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__DetectArrayResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__DetectArrayResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__DetectArrayResponse(struct soap *soap, const char *tag, _ns3__DetectArrayResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__DetectArrayResponse **)soap_malloc(soap, sizeof(_ns3__DetectArrayResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__DetectArrayResponse *)soap_instantiate__ns3__DetectArrayResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__DetectArrayResponse ** p = (_ns3__DetectArrayResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__DetectArrayResponse, sizeof(_ns3__DetectArrayResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__DetectArrayResponse(struct soap *soap, _ns3__DetectArrayResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__DetectArrayResponse);
	if (soap_out_PointerTo_ns3__DetectArrayResponse(soap, tag?tag:"ns3:DetectArrayResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__DetectArrayResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__DetectArrayResponse(struct soap *soap, _ns3__DetectArrayResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__DetectArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__DetectArray(struct soap *soap, _ns3__DetectArray *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__DetectArray))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__DetectArray(struct soap *soap, const char *tag, int id, _ns3__DetectArray *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__DetectArray);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__DetectArray ** SOAP_FMAC4 soap_in_PointerTo_ns3__DetectArray(struct soap *soap, const char *tag, _ns3__DetectArray **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__DetectArray **)soap_malloc(soap, sizeof(_ns3__DetectArray *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__DetectArray *)soap_instantiate__ns3__DetectArray(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__DetectArray ** p = (_ns3__DetectArray **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__DetectArray, sizeof(_ns3__DetectArray), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__DetectArray(struct soap *soap, _ns3__DetectArray *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__DetectArray);
	if (soap_out_PointerTo_ns3__DetectArray(soap, tag?tag:"ns3:DetectArray", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__DetectArray ** SOAP_FMAC4 soap_get_PointerTo_ns3__DetectArray(struct soap *soap, _ns3__DetectArray **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__DetectArray(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__DetectResponse(struct soap *soap, _ns3__DetectResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__DetectResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__DetectResponse(struct soap *soap, const char *tag, int id, _ns3__DetectResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__DetectResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__DetectResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__DetectResponse(struct soap *soap, const char *tag, _ns3__DetectResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__DetectResponse **)soap_malloc(soap, sizeof(_ns3__DetectResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__DetectResponse *)soap_instantiate__ns3__DetectResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__DetectResponse ** p = (_ns3__DetectResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__DetectResponse, sizeof(_ns3__DetectResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__DetectResponse(struct soap *soap, _ns3__DetectResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__DetectResponse);
	if (soap_out_PointerTo_ns3__DetectResponse(soap, tag?tag:"ns3:DetectResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__DetectResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__DetectResponse(struct soap *soap, _ns3__DetectResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__DetectResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__Detect(struct soap *soap, _ns3__Detect *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__Detect))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__Detect(struct soap *soap, const char *tag, int id, _ns3__Detect *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__Detect);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__Detect ** SOAP_FMAC4 soap_in_PointerTo_ns3__Detect(struct soap *soap, const char *tag, _ns3__Detect **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__Detect **)soap_malloc(soap, sizeof(_ns3__Detect *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__Detect *)soap_instantiate__ns3__Detect(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__Detect ** p = (_ns3__Detect **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__Detect, sizeof(_ns3__Detect), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__Detect(struct soap *soap, _ns3__Detect *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__Detect);
	if (soap_out_PointerTo_ns3__Detect(soap, tag?tag:"ns3:Detect", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__Detect ** SOAP_FMAC4 soap_get_PointerTo_ns3__Detect(struct soap *soap, _ns3__Detect **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__Detect(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__BreakSentencesResponse(struct soap *soap, _ns3__BreakSentencesResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__BreakSentencesResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__BreakSentencesResponse(struct soap *soap, const char *tag, int id, _ns3__BreakSentencesResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__BreakSentencesResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__BreakSentencesResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__BreakSentencesResponse(struct soap *soap, const char *tag, _ns3__BreakSentencesResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__BreakSentencesResponse **)soap_malloc(soap, sizeof(_ns3__BreakSentencesResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__BreakSentencesResponse *)soap_instantiate__ns3__BreakSentencesResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__BreakSentencesResponse ** p = (_ns3__BreakSentencesResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__BreakSentencesResponse, sizeof(_ns3__BreakSentencesResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__BreakSentencesResponse(struct soap *soap, _ns3__BreakSentencesResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__BreakSentencesResponse);
	if (soap_out_PointerTo_ns3__BreakSentencesResponse(soap, tag?tag:"ns3:BreakSentencesResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__BreakSentencesResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__BreakSentencesResponse(struct soap *soap, _ns3__BreakSentencesResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__BreakSentencesResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__BreakSentences(struct soap *soap, _ns3__BreakSentences *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__BreakSentences))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__BreakSentences(struct soap *soap, const char *tag, int id, _ns3__BreakSentences *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__BreakSentences);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__BreakSentences ** SOAP_FMAC4 soap_in_PointerTo_ns3__BreakSentences(struct soap *soap, const char *tag, _ns3__BreakSentences **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__BreakSentences **)soap_malloc(soap, sizeof(_ns3__BreakSentences *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__BreakSentences *)soap_instantiate__ns3__BreakSentences(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__BreakSentences ** p = (_ns3__BreakSentences **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__BreakSentences, sizeof(_ns3__BreakSentences), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__BreakSentences(struct soap *soap, _ns3__BreakSentences *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__BreakSentences);
	if (soap_out_PointerTo_ns3__BreakSentences(soap, tag?tag:"ns3:BreakSentences", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__BreakSentences ** SOAP_FMAC4 soap_get_PointerTo_ns3__BreakSentences(struct soap *soap, _ns3__BreakSentences **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__BreakSentences(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__AddTranslationResponse(struct soap *soap, _ns3__AddTranslationResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__AddTranslationResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__AddTranslationResponse(struct soap *soap, const char *tag, int id, _ns3__AddTranslationResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__AddTranslationResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__AddTranslationResponse ** SOAP_FMAC4 soap_in_PointerTo_ns3__AddTranslationResponse(struct soap *soap, const char *tag, _ns3__AddTranslationResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__AddTranslationResponse **)soap_malloc(soap, sizeof(_ns3__AddTranslationResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__AddTranslationResponse *)soap_instantiate__ns3__AddTranslationResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__AddTranslationResponse ** p = (_ns3__AddTranslationResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__AddTranslationResponse, sizeof(_ns3__AddTranslationResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__AddTranslationResponse(struct soap *soap, _ns3__AddTranslationResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__AddTranslationResponse);
	if (soap_out_PointerTo_ns3__AddTranslationResponse(soap, tag?tag:"ns3:AddTranslationResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__AddTranslationResponse ** SOAP_FMAC4 soap_get_PointerTo_ns3__AddTranslationResponse(struct soap *soap, _ns3__AddTranslationResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__AddTranslationResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTo_ns3__AddTranslation(struct soap *soap, _ns3__AddTranslation *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE__ns3__AddTranslation))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTo_ns3__AddTranslation(struct soap *soap, const char *tag, int id, _ns3__AddTranslation *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE__ns3__AddTranslation);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 _ns3__AddTranslation ** SOAP_FMAC4 soap_in_PointerTo_ns3__AddTranslation(struct soap *soap, const char *tag, _ns3__AddTranslation **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (_ns3__AddTranslation **)soap_malloc(soap, sizeof(_ns3__AddTranslation *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (_ns3__AddTranslation *)soap_instantiate__ns3__AddTranslation(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	_ns3__AddTranslation ** p = (_ns3__AddTranslation **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE__ns3__AddTranslation, sizeof(_ns3__AddTranslation), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTo_ns3__AddTranslation(struct soap *soap, _ns3__AddTranslation *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTo_ns3__AddTranslation);
	if (soap_out_PointerTo_ns3__AddTranslation(soap, tag?tag:"ns3:AddTranslation", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 _ns3__AddTranslation ** SOAP_FMAC4 soap_get_PointerTo_ns3__AddTranslation(struct soap *soap, _ns3__AddTranslation **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTo_ns3__AddTranslation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons6__TranslateArrayResponse(struct soap *soap, ns6__TranslateArrayResponse **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons6__TranslateArrayResponse))
		soap_serialize_PointerTons6__TranslateArrayResponse(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons6__TranslateArrayResponse(struct soap *soap, const char *tag, int id, ns6__TranslateArrayResponse **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons6__TranslateArrayResponse);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons6__TranslateArrayResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns6__TranslateArrayResponse *** SOAP_FMAC4 soap_in_PointerToPointerTons6__TranslateArrayResponse(struct soap *soap, const char *tag, ns6__TranslateArrayResponse ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns6__TranslateArrayResponse ***)soap_malloc(soap, sizeof(ns6__TranslateArrayResponse **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons6__TranslateArrayResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns6__TranslateArrayResponse ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons6__TranslateArrayResponse, sizeof(ns6__TranslateArrayResponse *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons6__TranslateArrayResponse(struct soap *soap, ns6__TranslateArrayResponse **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons6__TranslateArrayResponse);
	if (soap_out_PointerToPointerTons6__TranslateArrayResponse(soap, tag?tag:"ns6:TranslateArrayResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns6__TranslateArrayResponse *** SOAP_FMAC4 soap_get_PointerToPointerTons6__TranslateArrayResponse(struct soap *soap, ns6__TranslateArrayResponse ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons6__TranslateArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__TranslateArrayResponse(struct soap *soap, ns6__TranslateArrayResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns6__TranslateArrayResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__TranslateArrayResponse(struct soap *soap, const char *tag, int id, ns6__TranslateArrayResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns6__TranslateArrayResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns6__TranslateArrayResponse ** SOAP_FMAC4 soap_in_PointerTons6__TranslateArrayResponse(struct soap *soap, const char *tag, ns6__TranslateArrayResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns6__TranslateArrayResponse **)soap_malloc(soap, sizeof(ns6__TranslateArrayResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns6__TranslateArrayResponse *)soap_instantiate_ns6__TranslateArrayResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns6__TranslateArrayResponse ** p = (ns6__TranslateArrayResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns6__TranslateArrayResponse, sizeof(ns6__TranslateArrayResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__TranslateArrayResponse(struct soap *soap, ns6__TranslateArrayResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons6__TranslateArrayResponse);
	if (soap_out_PointerTons6__TranslateArrayResponse(soap, tag?tag:"ns6:TranslateArrayResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns6__TranslateArrayResponse ** SOAP_FMAC4 soap_get_PointerTons6__TranslateArrayResponse(struct soap *soap, ns6__TranslateArrayResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons6__TranslateArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons6__GetTranslationsResponse(struct soap *soap, ns6__GetTranslationsResponse **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons6__GetTranslationsResponse))
		soap_serialize_PointerTons6__GetTranslationsResponse(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons6__GetTranslationsResponse(struct soap *soap, const char *tag, int id, ns6__GetTranslationsResponse **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons6__GetTranslationsResponse);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons6__GetTranslationsResponse(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns6__GetTranslationsResponse *** SOAP_FMAC4 soap_in_PointerToPointerTons6__GetTranslationsResponse(struct soap *soap, const char *tag, ns6__GetTranslationsResponse ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns6__GetTranslationsResponse ***)soap_malloc(soap, sizeof(ns6__GetTranslationsResponse **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons6__GetTranslationsResponse(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns6__GetTranslationsResponse ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons6__GetTranslationsResponse, sizeof(ns6__GetTranslationsResponse *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons6__GetTranslationsResponse(struct soap *soap, ns6__GetTranslationsResponse **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons6__GetTranslationsResponse);
	if (soap_out_PointerToPointerTons6__GetTranslationsResponse(soap, tag?tag:"ns6:GetTranslationsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns6__GetTranslationsResponse *** SOAP_FMAC4 soap_get_PointerToPointerTons6__GetTranslationsResponse(struct soap *soap, ns6__GetTranslationsResponse ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons6__GetTranslationsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons6__Translation(struct soap *soap, ns6__Translation **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons6__Translation))
		soap_serialize_PointerTons6__Translation(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons6__Translation(struct soap *soap, const char *tag, int id, ns6__Translation **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons6__Translation);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons6__Translation(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns6__Translation *** SOAP_FMAC4 soap_in_PointerToPointerTons6__Translation(struct soap *soap, const char *tag, ns6__Translation ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns6__Translation ***)soap_malloc(soap, sizeof(ns6__Translation **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons6__Translation(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns6__Translation ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons6__Translation, sizeof(ns6__Translation *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons6__Translation(struct soap *soap, ns6__Translation **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons6__Translation);
	if (soap_out_PointerToPointerTons6__Translation(soap, tag?tag:"ns6:Translation", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns6__Translation *** SOAP_FMAC4 soap_get_PointerToPointerTons6__Translation(struct soap *soap, ns6__Translation ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons6__Translation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__Translation(struct soap *soap, ns6__Translation *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns6__Translation))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__Translation(struct soap *soap, const char *tag, int id, ns6__Translation *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns6__Translation);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns6__Translation ** SOAP_FMAC4 soap_in_PointerTons6__Translation(struct soap *soap, const char *tag, ns6__Translation **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns6__Translation **)soap_malloc(soap, sizeof(ns6__Translation *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns6__Translation *)soap_instantiate_ns6__Translation(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns6__Translation ** p = (ns6__Translation **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns6__Translation, sizeof(ns6__Translation), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__Translation(struct soap *soap, ns6__Translation *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons6__Translation);
	if (soap_out_PointerTons6__Translation(soap, tag?tag:"ns6:Translation", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns6__Translation ** SOAP_FMAC4 soap_get_PointerTons6__Translation(struct soap *soap, ns6__Translation **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons6__Translation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToPointerTons6__TranslationMatch(struct soap *soap, ns6__TranslationMatch **const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_PointerTons6__TranslationMatch))
		soap_serialize_PointerTons6__TranslationMatch(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToPointerTons6__TranslationMatch(struct soap *soap, const char *tag, int id, ns6__TranslationMatch **const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_PointerTons6__TranslationMatch);
	if (id < 0)
		return soap->error;
	return soap_out_PointerTons6__TranslationMatch(soap, tag, id, *a, type);
}

SOAP_FMAC3 ns6__TranslationMatch *** SOAP_FMAC4 soap_in_PointerToPointerTons6__TranslationMatch(struct soap *soap, const char *tag, ns6__TranslationMatch ***a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns6__TranslationMatch ***)soap_malloc(soap, sizeof(ns6__TranslationMatch **))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_PointerTons6__TranslationMatch(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (ns6__TranslationMatch ***)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_PointerTons6__TranslationMatch, sizeof(ns6__TranslationMatch *), 1);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToPointerTons6__TranslationMatch(struct soap *soap, ns6__TranslationMatch **const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToPointerTons6__TranslationMatch);
	if (soap_out_PointerToPointerTons6__TranslationMatch(soap, tag?tag:"ns6:TranslationMatch", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns6__TranslationMatch *** SOAP_FMAC4 soap_get_PointerToPointerTons6__TranslationMatch(struct soap *soap, ns6__TranslationMatch ***p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToPointerTons6__TranslationMatch(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__TranslationMatch(struct soap *soap, ns6__TranslationMatch *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns6__TranslationMatch))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__TranslationMatch(struct soap *soap, const char *tag, int id, ns6__TranslationMatch *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns6__TranslationMatch);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns6__TranslationMatch ** SOAP_FMAC4 soap_in_PointerTons6__TranslationMatch(struct soap *soap, const char *tag, ns6__TranslationMatch **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns6__TranslationMatch **)soap_malloc(soap, sizeof(ns6__TranslationMatch *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns6__TranslationMatch *)soap_instantiate_ns6__TranslationMatch(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns6__TranslationMatch ** p = (ns6__TranslationMatch **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns6__TranslationMatch, sizeof(ns6__TranslationMatch), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__TranslationMatch(struct soap *soap, ns6__TranslationMatch *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons6__TranslationMatch);
	if (soap_out_PointerTons6__TranslationMatch(soap, tag?tag:"ns6:TranslationMatch", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns6__TranslationMatch ** SOAP_FMAC4 soap_get_PointerTons6__TranslationMatch(struct soap *soap, ns6__TranslationMatch **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons6__TranslationMatch(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__ArrayOfTranslationMatch(struct soap *soap, ns6__ArrayOfTranslationMatch *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns6__ArrayOfTranslationMatch))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__ArrayOfTranslationMatch(struct soap *soap, const char *tag, int id, ns6__ArrayOfTranslationMatch *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns6__ArrayOfTranslationMatch);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns6__ArrayOfTranslationMatch ** SOAP_FMAC4 soap_in_PointerTons6__ArrayOfTranslationMatch(struct soap *soap, const char *tag, ns6__ArrayOfTranslationMatch **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns6__ArrayOfTranslationMatch **)soap_malloc(soap, sizeof(ns6__ArrayOfTranslationMatch *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns6__ArrayOfTranslationMatch *)soap_instantiate_ns6__ArrayOfTranslationMatch(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns6__ArrayOfTranslationMatch ** p = (ns6__ArrayOfTranslationMatch **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns6__ArrayOfTranslationMatch, sizeof(ns6__ArrayOfTranslationMatch), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__ArrayOfTranslationMatch(struct soap *soap, ns6__ArrayOfTranslationMatch *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons6__ArrayOfTranslationMatch);
	if (soap_out_PointerTons6__ArrayOfTranslationMatch(soap, tag?tag:"ns6:ArrayOfTranslationMatch", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns6__ArrayOfTranslationMatch ** SOAP_FMAC4 soap_get_PointerTons6__ArrayOfTranslationMatch(struct soap *soap, ns6__ArrayOfTranslationMatch **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons6__ArrayOfTranslationMatch(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__ArrayOfTranslateArrayResponse(struct soap *soap, ns6__ArrayOfTranslateArrayResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__ArrayOfTranslateArrayResponse(struct soap *soap, const char *tag, int id, ns6__ArrayOfTranslateArrayResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns6__ArrayOfTranslateArrayResponse ** SOAP_FMAC4 soap_in_PointerTons6__ArrayOfTranslateArrayResponse(struct soap *soap, const char *tag, ns6__ArrayOfTranslateArrayResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns6__ArrayOfTranslateArrayResponse **)soap_malloc(soap, sizeof(ns6__ArrayOfTranslateArrayResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns6__ArrayOfTranslateArrayResponse *)soap_instantiate_ns6__ArrayOfTranslateArrayResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns6__ArrayOfTranslateArrayResponse ** p = (ns6__ArrayOfTranslateArrayResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns6__ArrayOfTranslateArrayResponse, sizeof(ns6__ArrayOfTranslateArrayResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__ArrayOfTranslateArrayResponse(struct soap *soap, ns6__ArrayOfTranslateArrayResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons6__ArrayOfTranslateArrayResponse);
	if (soap_out_PointerTons6__ArrayOfTranslateArrayResponse(soap, tag?tag:"ns6:ArrayOfTranslateArrayResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns6__ArrayOfTranslateArrayResponse ** SOAP_FMAC4 soap_get_PointerTons6__ArrayOfTranslateArrayResponse(struct soap *soap, ns6__ArrayOfTranslateArrayResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons6__ArrayOfTranslateArrayResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__ArrayOfGetTranslationsResponse(struct soap *soap, ns6__ArrayOfGetTranslationsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__ArrayOfGetTranslationsResponse(struct soap *soap, const char *tag, int id, ns6__ArrayOfGetTranslationsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns6__ArrayOfGetTranslationsResponse ** SOAP_FMAC4 soap_in_PointerTons6__ArrayOfGetTranslationsResponse(struct soap *soap, const char *tag, ns6__ArrayOfGetTranslationsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns6__ArrayOfGetTranslationsResponse **)soap_malloc(soap, sizeof(ns6__ArrayOfGetTranslationsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns6__ArrayOfGetTranslationsResponse *)soap_instantiate_ns6__ArrayOfGetTranslationsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns6__ArrayOfGetTranslationsResponse ** p = (ns6__ArrayOfGetTranslationsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns6__ArrayOfGetTranslationsResponse, sizeof(ns6__ArrayOfGetTranslationsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__ArrayOfGetTranslationsResponse(struct soap *soap, ns6__ArrayOfGetTranslationsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons6__ArrayOfGetTranslationsResponse);
	if (soap_out_PointerTons6__ArrayOfGetTranslationsResponse(soap, tag?tag:"ns6:ArrayOfGetTranslationsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns6__ArrayOfGetTranslationsResponse ** SOAP_FMAC4 soap_get_PointerTons6__ArrayOfGetTranslationsResponse(struct soap *soap, ns6__ArrayOfGetTranslationsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons6__ArrayOfGetTranslationsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__ArrayOfTranslation(struct soap *soap, ns6__ArrayOfTranslation *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns6__ArrayOfTranslation))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__ArrayOfTranslation(struct soap *soap, const char *tag, int id, ns6__ArrayOfTranslation *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns6__ArrayOfTranslation);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns6__ArrayOfTranslation ** SOAP_FMAC4 soap_in_PointerTons6__ArrayOfTranslation(struct soap *soap, const char *tag, ns6__ArrayOfTranslation **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns6__ArrayOfTranslation **)soap_malloc(soap, sizeof(ns6__ArrayOfTranslation *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns6__ArrayOfTranslation *)soap_instantiate_ns6__ArrayOfTranslation(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns6__ArrayOfTranslation ** p = (ns6__ArrayOfTranslation **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns6__ArrayOfTranslation, sizeof(ns6__ArrayOfTranslation), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__ArrayOfTranslation(struct soap *soap, ns6__ArrayOfTranslation *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons6__ArrayOfTranslation);
	if (soap_out_PointerTons6__ArrayOfTranslation(soap, tag?tag:"ns6:ArrayOfTranslation", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns6__ArrayOfTranslation ** SOAP_FMAC4 soap_get_PointerTons6__ArrayOfTranslation(struct soap *soap, ns6__ArrayOfTranslation **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons6__ArrayOfTranslation(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__GetTranslationsResponse(struct soap *soap, ns6__GetTranslationsResponse *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns6__GetTranslationsResponse))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__GetTranslationsResponse(struct soap *soap, const char *tag, int id, ns6__GetTranslationsResponse *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns6__GetTranslationsResponse);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns6__GetTranslationsResponse ** SOAP_FMAC4 soap_in_PointerTons6__GetTranslationsResponse(struct soap *soap, const char *tag, ns6__GetTranslationsResponse **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns6__GetTranslationsResponse **)soap_malloc(soap, sizeof(ns6__GetTranslationsResponse *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns6__GetTranslationsResponse *)soap_instantiate_ns6__GetTranslationsResponse(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns6__GetTranslationsResponse ** p = (ns6__GetTranslationsResponse **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns6__GetTranslationsResponse, sizeof(ns6__GetTranslationsResponse), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__GetTranslationsResponse(struct soap *soap, ns6__GetTranslationsResponse *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons6__GetTranslationsResponse);
	if (soap_out_PointerTons6__GetTranslationsResponse(soap, tag?tag:"ns6:GetTranslationsResponse", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns6__GetTranslationsResponse ** SOAP_FMAC4 soap_get_PointerTons6__GetTranslationsResponse(struct soap *soap, ns6__GetTranslationsResponse **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons6__GetTranslationsResponse(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons6__TranslateOptions(struct soap *soap, ns6__TranslateOptions *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns6__TranslateOptions))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons6__TranslateOptions(struct soap *soap, const char *tag, int id, ns6__TranslateOptions *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns6__TranslateOptions);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns6__TranslateOptions ** SOAP_FMAC4 soap_in_PointerTons6__TranslateOptions(struct soap *soap, const char *tag, ns6__TranslateOptions **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns6__TranslateOptions **)soap_malloc(soap, sizeof(ns6__TranslateOptions *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns6__TranslateOptions *)soap_instantiate_ns6__TranslateOptions(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns6__TranslateOptions ** p = (ns6__TranslateOptions **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns6__TranslateOptions, sizeof(ns6__TranslateOptions), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons6__TranslateOptions(struct soap *soap, ns6__TranslateOptions *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons6__TranslateOptions);
	if (soap_out_PointerTons6__TranslateOptions(soap, tag?tag:"ns6:TranslateOptions", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns6__TranslateOptions ** SOAP_FMAC4 soap_get_PointerTons6__TranslateOptions(struct soap *soap, ns6__TranslateOptions **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons6__TranslateOptions(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ArrayOfstring(struct soap *soap, ns5__ArrayOfstring *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__ArrayOfstring))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ArrayOfstring(struct soap *soap, const char *tag, int id, ns5__ArrayOfstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__ArrayOfstring);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns5__ArrayOfstring ** SOAP_FMAC4 soap_in_PointerTons5__ArrayOfstring(struct soap *soap, const char *tag, ns5__ArrayOfstring **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__ArrayOfstring **)soap_malloc(soap, sizeof(ns5__ArrayOfstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__ArrayOfstring *)soap_instantiate_ns5__ArrayOfstring(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns5__ArrayOfstring ** p = (ns5__ArrayOfstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__ArrayOfstring, sizeof(ns5__ArrayOfstring), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ArrayOfstring(struct soap *soap, ns5__ArrayOfstring *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons5__ArrayOfstring);
	if (soap_out_PointerTons5__ArrayOfstring(soap, tag?tag:"ns5:ArrayOfstring", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__ArrayOfstring ** SOAP_FMAC4 soap_get_PointerTons5__ArrayOfstring(struct soap *soap, ns5__ArrayOfstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__ArrayOfstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTons5__ArrayOfint(struct soap *soap, ns5__ArrayOfint *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_ns5__ArrayOfint))
		(*a)->soap_serialize(soap);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTons5__ArrayOfint(struct soap *soap, const char *tag, int id, ns5__ArrayOfint *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_ns5__ArrayOfint);
	if (id < 0)
		return soap->error;
	return (*a)->soap_out(soap, tag, id, type);
}

SOAP_FMAC3 ns5__ArrayOfint ** SOAP_FMAC4 soap_in_PointerTons5__ArrayOfint(struct soap *soap, const char *tag, ns5__ArrayOfint **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (ns5__ArrayOfint **)soap_malloc(soap, sizeof(ns5__ArrayOfint *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = (ns5__ArrayOfint *)soap_instantiate_ns5__ArrayOfint(soap, -1, soap->type, soap->arrayType, NULL)))
			return NULL;
		(*a)->soap_default(soap);
		if (!(*a)->soap_in(soap, tag, NULL))
			return NULL;
	}
	else
	{	ns5__ArrayOfint ** p = (ns5__ArrayOfint **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_ns5__ArrayOfint, sizeof(ns5__ArrayOfint), 0);
		a = p;
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTons5__ArrayOfint(struct soap *soap, ns5__ArrayOfint *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTons5__ArrayOfint);
	if (soap_out_PointerTons5__ArrayOfint(soap, tag?tag:"ns5:ArrayOfint", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 ns5__ArrayOfint ** SOAP_FMAC4 soap_get_PointerTons5__ArrayOfint(struct soap *soap, ns5__ArrayOfint **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTons5__ArrayOfint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerToint(struct soap *soap, int *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_int);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerToint(struct soap *soap, const char *tag, int id, int *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_int);
	if (id < 0)
		return soap->error;
	return soap_out_int(soap, tag, id, *a, type);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_in_PointerToint(struct soap *soap, const char *tag, int **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (int **)soap_malloc(soap, sizeof(int *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_int(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (int **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_int, sizeof(int), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerToint(struct soap *soap, int *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerToint);
	if (soap_out_PointerToint(soap, tag?tag:"int", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 int ** SOAP_FMAC4 soap_get_PointerToint(struct soap *soap, int **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerToint(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTostd__wstring(struct soap *soap, std::wstring *const*a)
{
	if (!soap_reference(soap, *a, SOAP_TYPE_std__wstring))
		soap_serialize_std__wstring(soap, *a);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTostd__wstring(struct soap *soap, const char *tag, int id, std::wstring *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_std__wstring);
	if (id < 0)
		return soap->error;
	return soap_out_std__wstring(soap, tag, id, *a, type);
}

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_in_PointerTostd__wstring(struct soap *soap, const char *tag, std::wstring **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (std::wstring **)soap_malloc(soap, sizeof(std::wstring *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_std__wstring(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (std::wstring **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_std__wstring, sizeof(std::wstring), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTostd__wstring(struct soap *soap, std::wstring *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTostd__wstring);
	if (soap_out_PointerTostd__wstring(soap, tag?tag:"string", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 std::wstring ** SOAP_FMAC4 soap_get_PointerTostd__wstring(struct soap *soap, std::wstring **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTostd__wstring(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_PointerTounsignedByte(struct soap *soap, unsigned char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_unsignedByte);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_PointerTounsignedByte(struct soap *soap, const char *tag, int id, unsigned char *const*a, const char *type)
{
	id = soap_element_id(soap, tag, id, *a, NULL, 0, type, SOAP_TYPE_unsignedByte);
	if (id < 0)
		return soap->error;
	return soap_out_unsignedByte(soap, tag, id, *a, type);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_in_PointerTounsignedByte(struct soap *soap, const char *tag, unsigned char **a, const char *type)
{
	if (soap_element_begin_in(soap, tag, 1, NULL))
		return NULL;
	if (!a)
		if (!(a = (unsigned char **)soap_malloc(soap, sizeof(unsigned char *))))
			return NULL;
	*a = NULL;
	if (!soap->null && *soap->href != '#')
	{	soap_revert(soap);
		if (!(*a = soap_in_unsignedByte(soap, tag, *a, type)))
			return NULL;
	}
	else
	{	a = (unsigned char **)soap_id_lookup(soap, soap->href, (void**)a, SOAP_TYPE_unsignedByte, sizeof(unsigned char), 0);
		if (soap->body && soap_element_end_in(soap, tag))
			return NULL;
	}
	return a;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_PointerTounsignedByte(struct soap *soap, unsigned char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_PointerTounsignedByte);
	if (soap_out_PointerTounsignedByte(soap, tag?tag:"unsignedByte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 unsigned char ** SOAP_FMAC4 soap_get_PointerTounsignedByte(struct soap *soap, unsigned char **p, const char *tag, const char *type)
{
	if ((p = soap_in_PointerTounsignedByte(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out__QName(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE__QName);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in__QName(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE__QName, 2, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put__QName(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE__QName);
	if (soap_out__QName(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get__QName(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in__QName(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

SOAP_FMAC3 void SOAP_FMAC4 soap_default_string(struct soap *soap, char **a)
{
	(void)soap; /* appease -Wall -Werror */
#ifdef SOAP_DEFAULT_string
	*a = SOAP_DEFAULT_string;
#else
	*a = (char *)0;
#endif
}

SOAP_FMAC3 void SOAP_FMAC4 soap_serialize_string(struct soap *soap, char *const*a)
{
	soap_reference(soap, *a, SOAP_TYPE_string);
}

SOAP_FMAC3 int SOAP_FMAC4 soap_out_string(struct soap *soap, const char *tag, int id, char *const*a, const char *type)
{
	return soap_outstring(soap, tag, id, a, type, SOAP_TYPE_string);
}

SOAP_FMAC3 char * * SOAP_FMAC4 soap_in_string(struct soap *soap, const char *tag, char **a, const char *type)
{	char **p;
	p = soap_instring(soap, tag, a, type, SOAP_TYPE_string, 1, -1, -1);
	return p;
}

SOAP_FMAC3 int SOAP_FMAC4 soap_put_string(struct soap *soap, char *const*a, const char *tag, const char *type)
{
	register int id = soap_embed(soap, (void*)a, NULL, 0, tag, SOAP_TYPE_string);
	if (soap_out_string(soap, tag?tag:"byte", id, a, type))
		return soap->error;
	return soap_putindependent(soap);
}

SOAP_FMAC3 char ** SOAP_FMAC4 soap_get_string(struct soap *soap, char **p, const char *tag, const char *type)
{
	if ((p = soap_in_string(soap, tag, p, type)))
		if (soap_getindependent(soap))
			return NULL;
	return p;
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapC.cpp */
