/* soapClient.cpp
   Generated by gSOAP 2.8.0 from wsName.h
   Copyright(C) 2000-2010, Robert van Engelen, Genivia Inc. All Rights Reserved.
   The generated code is released under one of the following licenses:
   GPL, the gSOAP public license, or Genivia's license for commercial use.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.0 2011-03-17 08:46:25 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddTranslation(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__AddTranslation *ns3__AddTranslation, _ns3__AddTranslationResponse *ns3__AddTranslationResponse)
{	struct __ns1__AddTranslation soap_tmp___ns1__AddTranslation;
	if (!soap_endpoint)
		soap_endpoint = "http://api.microsofttranslator.com/V2/soap.svc";
	if (!soap_action)
		soap_action = "http://api.microsofttranslator.com/V2/LanguageService/AddTranslation";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddTranslation.ns3__AddTranslation = ns3__AddTranslation;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AddTranslation(soap, &soap_tmp___ns1__AddTranslation);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddTranslation(soap, &soap_tmp___ns1__AddTranslation, "-ns1:AddTranslation", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddTranslation(soap, &soap_tmp___ns1__AddTranslation, "-ns1:AddTranslation", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__AddTranslationResponse)
		return soap_closesock(soap);
	ns3__AddTranslationResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__AddTranslationResponse->soap_get(soap, "ns3:AddTranslationResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__BreakSentences(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__BreakSentences *ns3__BreakSentences, _ns3__BreakSentencesResponse *ns3__BreakSentencesResponse)
{	struct __ns1__BreakSentences soap_tmp___ns1__BreakSentences;
	if (!soap_endpoint)
		soap_endpoint = "http://api.microsofttranslator.com/V2/soap.svc";
	if (!soap_action)
		soap_action = "http://api.microsofttranslator.com/V2/LanguageService/BreakSentences";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__BreakSentences.ns3__BreakSentences = ns3__BreakSentences;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__BreakSentences(soap, &soap_tmp___ns1__BreakSentences);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__BreakSentences(soap, &soap_tmp___ns1__BreakSentences, "-ns1:BreakSentences", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__BreakSentences(soap, &soap_tmp___ns1__BreakSentences, "-ns1:BreakSentences", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__BreakSentencesResponse)
		return soap_closesock(soap);
	ns3__BreakSentencesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__BreakSentencesResponse->soap_get(soap, "ns3:BreakSentencesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Detect(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__Detect *ns3__Detect, _ns3__DetectResponse *ns3__DetectResponse)
{	struct __ns1__Detect soap_tmp___ns1__Detect;
	if (!soap_endpoint)
		soap_endpoint = "http://api.microsofttranslator.com/V2/soap.svc";
	if (!soap_action)
		soap_action = "http://api.microsofttranslator.com/V2/LanguageService/Detect";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Detect.ns3__Detect = ns3__Detect;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__Detect(soap, &soap_tmp___ns1__Detect);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Detect(soap, &soap_tmp___ns1__Detect, "-ns1:Detect", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Detect(soap, &soap_tmp___ns1__Detect, "-ns1:Detect", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__DetectResponse)
		return soap_closesock(soap);
	ns3__DetectResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__DetectResponse->soap_get(soap, "ns3:DetectResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__DetectArray(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__DetectArray *ns3__DetectArray, _ns3__DetectArrayResponse *ns3__DetectArrayResponse)
{	struct __ns1__DetectArray soap_tmp___ns1__DetectArray;
	if (!soap_endpoint)
		soap_endpoint = "http://api.microsofttranslator.com/V2/soap.svc";
	if (!soap_action)
		soap_action = "http://api.microsofttranslator.com/V2/LanguageService/DetectArray";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__DetectArray.ns3__DetectArray = ns3__DetectArray;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__DetectArray(soap, &soap_tmp___ns1__DetectArray);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__DetectArray(soap, &soap_tmp___ns1__DetectArray, "-ns1:DetectArray", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__DetectArray(soap, &soap_tmp___ns1__DetectArray, "-ns1:DetectArray", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__DetectArrayResponse)
		return soap_closesock(soap);
	ns3__DetectArrayResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__DetectArrayResponse->soap_get(soap, "ns3:DetectArrayResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetAppIdToken(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetAppIdToken *ns3__GetAppIdToken, _ns3__GetAppIdTokenResponse *ns3__GetAppIdTokenResponse)
{	struct __ns1__GetAppIdToken soap_tmp___ns1__GetAppIdToken;
	if (!soap_endpoint)
		soap_endpoint = "http://api.microsofttranslator.com/V2/soap.svc";
	if (!soap_action)
		soap_action = "http://api.microsofttranslator.com/V2/LanguageService/GetAppIdToken";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetAppIdToken.ns3__GetAppIdToken = ns3__GetAppIdToken;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetAppIdToken(soap, &soap_tmp___ns1__GetAppIdToken);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetAppIdToken(soap, &soap_tmp___ns1__GetAppIdToken, "-ns1:GetAppIdToken", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetAppIdToken(soap, &soap_tmp___ns1__GetAppIdToken, "-ns1:GetAppIdToken", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__GetAppIdTokenResponse)
		return soap_closesock(soap);
	ns3__GetAppIdTokenResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__GetAppIdTokenResponse->soap_get(soap, "ns3:GetAppIdTokenResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetLanguageNames(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetLanguageNames *ns3__GetLanguageNames, _ns3__GetLanguageNamesResponse *ns3__GetLanguageNamesResponse)
{	struct __ns1__GetLanguageNames soap_tmp___ns1__GetLanguageNames;
	if (!soap_endpoint)
		soap_endpoint = "http://api.microsofttranslator.com/V2/soap.svc";
	if (!soap_action)
		soap_action = "http://api.microsofttranslator.com/V2/LanguageService/GetLanguageNames";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetLanguageNames.ns3__GetLanguageNames = ns3__GetLanguageNames;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetLanguageNames(soap, &soap_tmp___ns1__GetLanguageNames);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetLanguageNames(soap, &soap_tmp___ns1__GetLanguageNames, "-ns1:GetLanguageNames", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetLanguageNames(soap, &soap_tmp___ns1__GetLanguageNames, "-ns1:GetLanguageNames", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__GetLanguageNamesResponse)
		return soap_closesock(soap);
	ns3__GetLanguageNamesResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__GetLanguageNamesResponse->soap_get(soap, "ns3:GetLanguageNamesResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetLanguagesForSpeak(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetLanguagesForSpeak *ns3__GetLanguagesForSpeak, _ns3__GetLanguagesForSpeakResponse *ns3__GetLanguagesForSpeakResponse)
{	struct __ns1__GetLanguagesForSpeak soap_tmp___ns1__GetLanguagesForSpeak;
	if (!soap_endpoint)
		soap_endpoint = "http://api.microsofttranslator.com/V2/soap.svc";
	if (!soap_action)
		soap_action = "http://api.microsofttranslator.com/V2/LanguageService/GetLanguagesForSpeak";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetLanguagesForSpeak.ns3__GetLanguagesForSpeak = ns3__GetLanguagesForSpeak;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetLanguagesForSpeak(soap, &soap_tmp___ns1__GetLanguagesForSpeak);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetLanguagesForSpeak(soap, &soap_tmp___ns1__GetLanguagesForSpeak, "-ns1:GetLanguagesForSpeak", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetLanguagesForSpeak(soap, &soap_tmp___ns1__GetLanguagesForSpeak, "-ns1:GetLanguagesForSpeak", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__GetLanguagesForSpeakResponse)
		return soap_closesock(soap);
	ns3__GetLanguagesForSpeakResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__GetLanguagesForSpeakResponse->soap_get(soap, "ns3:GetLanguagesForSpeakResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetLanguagesForTranslate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetLanguagesForTranslate *ns3__GetLanguagesForTranslate, _ns3__GetLanguagesForTranslateResponse *ns3__GetLanguagesForTranslateResponse)
{	struct __ns1__GetLanguagesForTranslate soap_tmp___ns1__GetLanguagesForTranslate;
	if (!soap_endpoint)
		soap_endpoint = "http://api.microsofttranslator.com/V2/soap.svc";
	if (!soap_action)
		soap_action = "http://api.microsofttranslator.com/V2/LanguageService/GetLanguagesForTranslate";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetLanguagesForTranslate.ns3__GetLanguagesForTranslate = ns3__GetLanguagesForTranslate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetLanguagesForTranslate(soap, &soap_tmp___ns1__GetLanguagesForTranslate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetLanguagesForTranslate(soap, &soap_tmp___ns1__GetLanguagesForTranslate, "-ns1:GetLanguagesForTranslate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetLanguagesForTranslate(soap, &soap_tmp___ns1__GetLanguagesForTranslate, "-ns1:GetLanguagesForTranslate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__GetLanguagesForTranslateResponse)
		return soap_closesock(soap);
	ns3__GetLanguagesForTranslateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__GetLanguagesForTranslateResponse->soap_get(soap, "ns3:GetLanguagesForTranslateResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetTranslations(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetTranslations *ns3__GetTranslations, _ns3__GetTranslationsResponse *ns3__GetTranslationsResponse)
{	struct __ns1__GetTranslations soap_tmp___ns1__GetTranslations;
	if (!soap_endpoint)
		soap_endpoint = "http://api.microsofttranslator.com/V2/soap.svc";
	if (!soap_action)
		soap_action = "http://api.microsofttranslator.com/V2/LanguageService/GetTranslations";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetTranslations.ns3__GetTranslations = ns3__GetTranslations;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetTranslations(soap, &soap_tmp___ns1__GetTranslations);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetTranslations(soap, &soap_tmp___ns1__GetTranslations, "-ns1:GetTranslations", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetTranslations(soap, &soap_tmp___ns1__GetTranslations, "-ns1:GetTranslations", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__GetTranslationsResponse)
		return soap_closesock(soap);
	ns3__GetTranslationsResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__GetTranslationsResponse->soap_get(soap, "ns3:GetTranslationsResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Translate(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__Translate *ns3__Translate, _ns3__TranslateResponse *ns3__TranslateResponse)
{	struct __ns1__Translate soap_tmp___ns1__Translate;
	if (!soap_endpoint)
		soap_endpoint = "http://api.microsofttranslator.com/V2/soap.svc";
	if (!soap_action)
		soap_action = "http://api.microsofttranslator.com/V2/LanguageService/Translate";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Translate.ns3__Translate = ns3__Translate;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__Translate(soap, &soap_tmp___ns1__Translate);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Translate(soap, &soap_tmp___ns1__Translate, "-ns1:Translate", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Translate(soap, &soap_tmp___ns1__Translate, "-ns1:Translate", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__TranslateResponse)
		return soap_closesock(soap);
	ns3__TranslateResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__TranslateResponse->soap_get(soap, "ns3:TranslateResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__AddTranslationArray(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__AddTranslationArray *ns3__AddTranslationArray, _ns3__AddTranslationArrayResponse *ns3__AddTranslationArrayResponse)
{	struct __ns1__AddTranslationArray soap_tmp___ns1__AddTranslationArray;
	if (!soap_endpoint)
		soap_endpoint = "http://api.microsofttranslator.com/V2/soap.svc";
	if (!soap_action)
		soap_action = "http://api.microsofttranslator.com/V2/LanguageService/AddTranslationArray";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__AddTranslationArray.ns3__AddTranslationArray = ns3__AddTranslationArray;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__AddTranslationArray(soap, &soap_tmp___ns1__AddTranslationArray);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__AddTranslationArray(soap, &soap_tmp___ns1__AddTranslationArray, "-ns1:AddTranslationArray", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__AddTranslationArray(soap, &soap_tmp___ns1__AddTranslationArray, "-ns1:AddTranslationArray", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__AddTranslationArrayResponse)
		return soap_closesock(soap);
	ns3__AddTranslationArrayResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__AddTranslationArrayResponse->soap_get(soap, "ns3:AddTranslationArrayResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__GetTranslationsArray(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__GetTranslationsArray *ns3__GetTranslationsArray, _ns3__GetTranslationsArrayResponse *ns3__GetTranslationsArrayResponse)
{	struct __ns1__GetTranslationsArray soap_tmp___ns1__GetTranslationsArray;
	if (!soap_endpoint)
		soap_endpoint = "http://api.microsofttranslator.com/V2/soap.svc";
	if (!soap_action)
		soap_action = "http://api.microsofttranslator.com/V2/LanguageService/GetTranslationsArray";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__GetTranslationsArray.ns3__GetTranslationsArray = ns3__GetTranslationsArray;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__GetTranslationsArray(soap, &soap_tmp___ns1__GetTranslationsArray);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__GetTranslationsArray(soap, &soap_tmp___ns1__GetTranslationsArray, "-ns1:GetTranslationsArray", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__GetTranslationsArray(soap, &soap_tmp___ns1__GetTranslationsArray, "-ns1:GetTranslationsArray", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__GetTranslationsArrayResponse)
		return soap_closesock(soap);
	ns3__GetTranslationsArrayResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__GetTranslationsArrayResponse->soap_get(soap, "ns3:GetTranslationsArrayResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Speak(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__Speak *ns3__Speak, _ns3__SpeakResponse *ns3__SpeakResponse)
{	struct __ns1__Speak soap_tmp___ns1__Speak;
	if (!soap_endpoint)
		soap_endpoint = "http://api.microsofttranslator.com/V2/soap.svc";
	if (!soap_action)
		soap_action = "http://api.microsofttranslator.com/V2/LanguageService/Speak";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Speak.ns3__Speak = ns3__Speak;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__Speak(soap, &soap_tmp___ns1__Speak);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Speak(soap, &soap_tmp___ns1__Speak, "-ns1:Speak", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Speak(soap, &soap_tmp___ns1__Speak, "-ns1:Speak", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__SpeakResponse)
		return soap_closesock(soap);
	ns3__SpeakResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__SpeakResponse->soap_get(soap, "ns3:SpeakResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__TranslateArray(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns3__TranslateArray *ns3__TranslateArray, _ns3__TranslateArrayResponse *ns3__TranslateArrayResponse)
{	struct __ns1__TranslateArray soap_tmp___ns1__TranslateArray;
	if (!soap_endpoint)
		soap_endpoint = "http://api.microsofttranslator.com/V2/soap.svc";
	if (!soap_action)
		soap_action = "http://api.microsofttranslator.com/V2/LanguageService/TranslateArray";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__TranslateArray.ns3__TranslateArray = ns3__TranslateArray;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__TranslateArray(soap, &soap_tmp___ns1__TranslateArray);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__TranslateArray(soap, &soap_tmp___ns1__TranslateArray, "-ns1:TranslateArray", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__TranslateArray(soap, &soap_tmp___ns1__TranslateArray, "-ns1:TranslateArray", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns3__TranslateArrayResponse)
		return soap_closesock(soap);
	ns3__TranslateArrayResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns3__TranslateArrayResponse->soap_get(soap, "ns3:TranslateArrayResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
